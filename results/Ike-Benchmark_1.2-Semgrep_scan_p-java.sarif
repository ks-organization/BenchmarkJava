{"version":"2.1.0","runs":[{"invocations":[{"executionSuccessful":true,"toolExecutionNotifications":[]}],"results":[{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00001.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":74,"endLine":71,"snippet":{"text":"            fis = new java.io.FileInputStream(new java.io.File(fileName));"},"startColumn":19,"startLine":71}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00002.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":64,"endLine":72,"snippet":{"text":"            fos = new java.io.FileOutputStream(fileName, false);"},"startColumn":13,"startLine":72}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00002.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":85,"snippet":{"text":"                    fos = null;"},"startColumn":21,"startLine":85}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00004.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":77,"endLine":73,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(param)\n                                + \"' with value: '10340' saved in session.\");"},"startColumn":9,"startLine":69}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00005.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":63,"snippet":{"text":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},"startColumn":69,"startLine":63}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00005.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":66,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":66}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00005.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":66,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":66}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00006.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":38,"endLine":62,"snippet":{"text":"        argList.add(\"echo \" + param);"},"startColumn":9,"startLine":62}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00007.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":47,"endLine":61,"snippet":{"text":"            Process p = r.exec(args, argsEnv);"},"startColumn":13,"startLine":61}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00008.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":80,"endLine":57,"snippet":{"text":"            java.sql.CallableStatement statement = connection.prepareCall(sql);"},"startColumn":13,"startLine":57}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00011.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":71,"endLine":54,"snippet":{"text":"        java.io.File fileTarget = new java.io.File(param, \"/Test.txt\");"},"startColumn":22,"startLine":54}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00012.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":58,"endLine":68,"snippet":{"text":"                    idc.search(base, filter, filters, sc);"},"startColumn":21,"startLine":68}}}],"message":{"text":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data."},"properties":{},"ruleId":"java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00012.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":85,"snippet":{"text":"                    response.getWriter()\n                            .println(\n                                    \"LDAP query results:<br>\"\n                                            + \"Record found with name \"\n                                            + attr.get()\n                                            + \"<br>\"\n                                            + \"Address: \"\n                                            + attr2.get()\n                                            + \"<br>\");"},"startColumn":21,"startLine":77}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00013.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":69,"endLine":56,"snippet":{"text":"        response.getWriter().format(java.util.Locale.US, param, obj);"},"startColumn":9,"startLine":56}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00014.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":48,"endLine":56,"snippet":{"text":"        response.getWriter().format(param, obj);"},"startColumn":9,"startLine":56}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00015.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":38,"endLine":64,"snippet":{"text":"        argList.add(\"echo \" + param);"},"startColumn":9,"startLine":64}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00017.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":45,"endLine":63,"snippet":{"text":"            Process p = r.exec(cmd + param);"},"startColumn":13,"startLine":63}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00018.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":59,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            int count = statement.executeUpdate(sql);"},"startColumn":13,"startLine":57}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00019.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":54,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":54}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00019.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":54,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":54}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00020.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":61,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":61}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00020.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":61,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":61}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00021.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":58,"endLine":59,"snippet":{"text":"                    ctx.search(base, filter, filters, sc);"},"startColumn":21,"startLine":59}}}],"message":{"text":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data."},"properties":{},"ruleId":"java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00021.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":76,"snippet":{"text":"                    response.getWriter()\n                            .println(\n                                    \"LDAP query results:<br>\"\n                                            + \"Record found with name \"\n                                            + attr.get()\n                                            + \"<br>\"\n                                            + \"Address: \"\n                                            + attr2.get()\n                                            + \"<br>\");"},"startColumn":21,"startLine":68}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00024.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":73,"endLine":57,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},"startColumn":13,"startLine":52}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00025.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":53,"snippet":{"text":"            Long results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class);"},"startColumn":13,"startLine":51}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00025.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":89,"endLine":54,"snippet":{"text":"            response.getWriter().println(\"Your results are: \" + String.valueOf(results));"},"startColumn":13,"startLine":54}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00026.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":97,"endLine":50,"snippet":{"text":"            org.springframework.jdbc.support.rowset.SqlRowSet results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql);"},"startColumn":13,"startLine":49}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00027.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":52,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            int count = statement.executeUpdate(sql);"},"startColumn":13,"startLine":50}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00028.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":64,"endLine":57,"snippet":{"text":"            fos = new java.io.FileOutputStream(fileName, false);"},"startColumn":13,"startLine":57}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00028.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":70,"snippet":{"text":"                    fos = null;"},"startColumn":21,"startLine":70}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00030.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":48,"endLine":53,"snippet":{"text":"        response.getWriter().printf(param, obj);"},"startColumn":9,"startLine":53}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00031.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":52,"snippet":{"text":"        request.getSession().putValue(\"userid\", param);"},"startColumn":49,"startLine":52}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"properties":{},"ruleId":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00031.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":58,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: 'userid' with value: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(param)\n                                + \"' saved in session.\");"},"startColumn":9,"startLine":54}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00032.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":82,"endLine":54,"snippet":{"text":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql);"},"startColumn":13,"startLine":54}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00033.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":97,"endLine":54,"snippet":{"text":"            org.springframework.jdbc.support.rowset.SqlRowSet results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql);"},"startColumn":13,"startLine":53}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00034.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":78,"endLine":56,"snippet":{"text":"            statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},"startColumn":13,"startLine":56}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00035.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":69,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":69}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00035.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":69,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":69}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00036.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":71,"endLine":65,"snippet":{"text":"            response.getWriter().write(param.toCharArray(), 0, length);"},"startColumn":13,"startLine":65}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00037.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":73,"endLine":71,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},"startColumn":13,"startLine":66}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00038.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":32,"endLine":79,"snippet":{"text":"            java.util.List<String> results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(\n                            sql,\n                            new org.springframework.jdbc.core.RowMapper<String>() {\n                                @Override\n                                public String mapRow(java.sql.ResultSet rs, int rowNum)\n                                        throws java.sql.SQLException {\n                                    try {\n                                        return rs.getString(\"USERNAME\");\n                                    } catch (java.sql.SQLException e) {\n                                        if (org.owasp.benchmark.helpers.DatabaseHelper\n                                                .hideSQLErrors) {\n                                            return \"Error processing query.\";\n                                        } else throw e;\n                                    }\n                                }\n                            });"},"startColumn":13,"startLine":63}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00039.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":94,"endLine":65,"snippet":{"text":"            java.util.Map<String, Object> results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForMap(sql);"},"startColumn":13,"startLine":64}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00040.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":58,"endLine":49,"snippet":{"text":"        java.io.File fileTarget = new java.io.File(param);"},"startColumn":22,"startLine":49}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00044.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":49,"endLine":60,"snippet":{"text":"                    ctx.search(base, filter, sc);"},"startColumn":21,"startLine":60}}}],"message":{"text":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data."},"properties":{},"ruleId":"java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00044.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":77,"snippet":{"text":"                    response.getWriter()\n                            .println(\n                                    \"LDAP query results:<br>\"\n                                            + \"Record found with name \"\n                                            + attr.get()\n                                            + \"<br>\"\n                                            + \"Address: \"\n                                            + attr2.get()\n                                            + \"<br>\");"},"startColumn":21,"startLine":69}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00045.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":92,"endLine":62,"snippet":{"text":"        java.io.FileOutputStream fos =\n                new java.io.FileOutputStream(new java.io.FileInputStream(fileName).getFD()); ) {"},"startColumn":34,"startLine":61}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00046.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":50,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"MD5\");"},"startColumn":86,"startLine":50}}}],"message":{"text":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-md5.use-of-md5"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00047.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":48,"endLine":73,"snippet":{"text":"        response.getWriter().format(param, obj);"},"startColumn":9,"startLine":73}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00048.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":72,"snippet":{"text":"        response.getWriter().print(param.toCharArray());"},"startColumn":9,"startLine":72}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00049.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":64,"endLine":72,"snippet":{"text":"        response.getWriter().write(\"Parameter value: \" + param);"},"startColumn":9,"startLine":72}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00050.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":62,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":62}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00050.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":62,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":62}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00051.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":60,"snippet":{"text":"        ProcessBuilder pb = new ProcessBuilder(args);"},"startColumn":9,"startLine":60}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00051.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":36,"endLine":63,"snippet":{"text":"            Process p = pb.start();"},"startColumn":13,"startLine":63}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00053.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":88,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":88}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00053.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":88,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":88}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00055.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":81,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":81}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00055.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":81,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":81}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00056.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":91,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":91}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00056.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":91,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":91}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00057.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":83,"snippet":{"text":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},"startColumn":69,"startLine":83}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00057.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":86,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":86}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00057.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":86,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":86}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00060.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":76,"snippet":{"text":"        java.io.File fileTarget =\n                new java.io.File(\n                        new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR), bar);"},"startColumn":22,"startLine":74}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00061.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":69,"endLine":74,"snippet":{"text":"        java.io.File fileTarget = new java.io.File(bar, \"/Test.txt\");"},"startColumn":22,"startLine":74}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00063.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":74,"endLine":77,"snippet":{"text":"            fis = new java.io.FileInputStream(new java.io.File(fileName));"},"startColumn":19,"startLine":77}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00064.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":78,"snippet":{"text":"            fos = new java.io.FileOutputStream(fileName);"},"startColumn":13,"startLine":78}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00064.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":91,"snippet":{"text":"                    fos = null;"},"startColumn":21,"startLine":91}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00070.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":101,"endLine":73,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"SHA1\", \"SUN\");"},"startColumn":13,"startLine":73}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00071.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":101,"endLine":73,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"SHA1\", \"SUN\");"},"startColumn":13,"startLine":73}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00073.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":87,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"MD5\");"},"startColumn":86,"startLine":87}}}],"message":{"text":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-md5.use-of-md5"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00077.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":36,"endLine":96,"snippet":{"text":"        argList.add(\"echo \" + bar);"},"startColumn":9,"startLine":96}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00090.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":43,"endLine":81,"snippet":{"text":"            Process p = r.exec(cmd + bar);"},"startColumn":13,"startLine":81}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00091.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":47,"endLine":76,"snippet":{"text":"            Process p = r.exec(args, argsEnv);"},"startColumn":13,"startLine":76}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00092.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":47,"endLine":95,"snippet":{"text":"            Process p = r.exec(args, argsEnv);"},"startColumn":13,"startLine":95}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00097.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":79,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' with value: 10340 saved in session.\");"},"startColumn":9,"startLine":75}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00098.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":52,"endLine":68,"snippet":{"text":"        request.getSession().putValue(\"userid\", bar);"},"startColumn":49,"startLine":68}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"properties":{},"ruleId":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00102.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":94,"endLine":73,"snippet":{"text":"            java.util.Map<String, Object> results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForMap(sql);"},"startColumn":13,"startLine":72}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00103.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":65,"endLine":77,"snippet":{"text":"            Object results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, new Object[] {}, String.class);"},"startColumn":13,"startLine":75}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00104.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":75,"snippet":{"text":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);"},"startColumn":13,"startLine":75}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00105.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":53,"endLine":78,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            statement.addBatch(sql);\n            int[] counts = statement.executeBatch();"},"startColumn":13,"startLine":75}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00108.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":91,"snippet":{"text":"            statement.execute(sql, new int[] {1, 2});"},"startColumn":13,"startLine":91}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00109.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":79,"snippet":{"text":"            statement.execute(sql, new String[] {\"username\", \"password\"});"},"startColumn":13,"startLine":79}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00112.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":74,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            int count = statement.executeUpdate(sql);"},"startColumn":13,"startLine":72}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00114.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":72,"endLine":77,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            int count = statement.executeUpdate(sql, new int[] {1, 2});"},"startColumn":13,"startLine":75}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00117.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":99,"endLine":90,"snippet":{"text":"                            xp.compile(expression)\n                                    .evaluate(xmlDocument, javax.xml.xpath.XPathConstants.NODESET);"},"startColumn":29,"startLine":89}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a XPath evaluate or compile command. This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized. Xpath injection could lead to unauthorized access to sensitive information in XML documents. Instead, thoroughly sanitize user input or use parameterized xpath queries if you can."},"properties":{},"ruleId":"java.lang.security.audit.tainted-xpath-from-http-request.tainted-xpath-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00117.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":79,"endLine":96,"snippet":{"text":"                response.getWriter().println(value.getTextContent() + \"<br/>\");"},"startColumn":17,"startLine":96}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00118.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":65,"endLine":87,"snippet":{"text":"            String result = xp.evaluate(expression, xmlDocument);"},"startColumn":29,"startLine":87}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a XPath evaluate or compile command. This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized. Xpath injection could lead to unauthorized access to sensitive information in XML documents. Instead, thoroughly sanitize user input or use parameterized xpath queries if you can."},"properties":{},"ruleId":"java.lang.security.audit.tainted-xpath-from-http-request.tainted-xpath-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00118.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":88,"endLine":89,"snippet":{"text":"            response.getWriter().println(\"Your query results are: \" + result + \"<br/>\");"},"startColumn":13,"startLine":89}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00119.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":89,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":89}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00119.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":89,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":89}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00120.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":73,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":73}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00120.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":73,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":73}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00123.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":64,"snippet":{"text":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},"startColumn":69,"startLine":64}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00123.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":67,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":67}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00123.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":67,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":67}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00124.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":69,"snippet":{"text":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},"startColumn":69,"startLine":69}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00124.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":72,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":72}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00124.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":72,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":72}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00125.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":64,"snippet":{"text":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},"startColumn":69,"startLine":64}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00125.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":67,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":67}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00125.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":67,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":67}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00131.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":72,"snippet":{"text":"        java.io.File fileTarget = new java.io.File(bar);"},"startColumn":22,"startLine":72}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00132.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":74,"endLine":77,"snippet":{"text":"            fis = new java.io.FileInputStream(new java.io.File(fileName));"},"startColumn":19,"startLine":77}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00133.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":63,"snippet":{"text":"            fis = new java.io.FileInputStream(fileName);"},"startColumn":19,"startLine":63}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00135.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":92,"endLine":84,"snippet":{"text":"        java.io.FileOutputStream fos =\n                new java.io.FileOutputStream(new java.io.FileInputStream(fileName).getFD()); ) {"},"startColumn":34,"startLine":83}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00136.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":64,"endLine":78,"snippet":{"text":"            fos = new java.io.FileOutputStream(fileName, false);"},"startColumn":13,"startLine":78}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00136.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":91,"snippet":{"text":"                    fos = null;"},"startColumn":21,"startLine":91}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00138.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":58,"endLine":72,"snippet":{"text":"                    idc.search(base, filter, filters, sc);"},"startColumn":21,"startLine":72}}}],"message":{"text":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data."},"properties":{},"ruleId":"java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00138.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":89,"snippet":{"text":"                    response.getWriter()\n                            .println(\n                                    \"LDAP query results:<br>\"\n                                            + \"Record found with name \"\n                                            + attr.get()\n                                            + \"<br>\"\n                                            + \"Address: \"\n                                            + attr2.get()\n                                            + \"<br>\");"},"startColumn":21,"startLine":81}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00141.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":83,"endLine":64,"snippet":{"text":"                md = java.security.MessageDigest.getInstance(\"SHA1\", provider[0]);"},"startColumn":17,"startLine":64}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00141.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":77,"endLine":66,"snippet":{"text":"                md = java.security.MessageDigest.getInstance(\"SHA1\", \"SUN\");"},"startColumn":17,"startLine":66}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00146.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":67,"endLine":59,"snippet":{"text":"        response.getWriter().format(java.util.Locale.US, bar, obj);"},"startColumn":9,"startLine":59}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00148.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":60,"snippet":{"text":"        response.getWriter().format(\"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":60}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00149.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":56,"snippet":{"text":"        response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":56}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00150.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":60,"snippet":{"text":"        response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":60}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00152.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":73,"snippet":{"text":"        response.getWriter().println(bar.toCharArray());"},"startColumn":9,"startLine":73}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00154.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":42,"endLine":73,"snippet":{"text":"        response.getWriter().println(bar);"},"startColumn":9,"startLine":73}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00155.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":42,"endLine":56,"snippet":{"text":"        response.getWriter().println(bar);"},"startColumn":9,"startLine":56}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00157.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":40,"endLine":59,"snippet":{"text":"        response.getWriter().write(bar);"},"startColumn":9,"startLine":59}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00158.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":36,"endLine":68,"snippet":{"text":"        argList.add(\"echo \" + bar);"},"startColumn":9,"startLine":68}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00159.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":67,"snippet":{"text":"        ProcessBuilder pb = new ProcessBuilder(args);"},"startColumn":9,"startLine":67}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00159.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":36,"endLine":70,"snippet":{"text":"            Process p = pb.start();"},"startColumn":13,"startLine":70}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00174.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":63,"snippet":{"text":"            Process p = r.exec(cmd, argsEnv);"},"startColumn":13,"startLine":63}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00176.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":98,"endLine":64,"snippet":{"text":"            Process p =\n                    r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":63}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00177.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":98,"endLine":69,"snippet":{"text":"            Process p =\n                    r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":68}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00191.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":66,"endLine":81,"snippet":{"text":"            java.sql.CallableStatement statement =\n                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);"},"startColumn":13,"startLine":77}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00192.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":77,"snippet":{"text":"            java.sql.PreparedStatement statement = connection.prepareStatement(sql);"},"startColumn":13,"startLine":77}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00193.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":64,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"});"},"startColumn":13,"startLine":63}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00194.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":63,"snippet":{"text":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);"},"startColumn":13,"startLine":63}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00195.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":82,"endLine":61,"snippet":{"text":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql);"},"startColumn":13,"startLine":61}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00196.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":82,"endLine":61,"snippet":{"text":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql);"},"startColumn":13,"startLine":61}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00198.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":49,"endLine":61,"snippet":{"text":"            Integer results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Integer.class);"},"startColumn":13,"startLine":59}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00198.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":73,"endLine":62,"snippet":{"text":"            response.getWriter().println(\"Your results are: \" + results);"},"startColumn":13,"startLine":62}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00199.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":49,"endLine":64,"snippet":{"text":"            Integer results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Integer.class);"},"startColumn":13,"startLine":62}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00199.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":73,"endLine":65,"snippet":{"text":"            response.getWriter().println(\"Your results are: \" + results);"},"startColumn":13,"startLine":65}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00203.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":93,"endLine":63,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            int count = statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"});"},"startColumn":13,"startLine":61}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00204.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":93,"endLine":60,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            int count = statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"});"},"startColumn":13,"startLine":58}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00207.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":65,"endLine":75,"snippet":{"text":"            String result = xp.evaluate(expression, xmlDocument);"},"startColumn":29,"startLine":75}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a XPath evaluate or compile command. This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized. Xpath injection could lead to unauthorized access to sensitive information in XML documents. Instead, thoroughly sanitize user input or use parameterized xpath queries if you can."},"properties":{},"ruleId":"java.lang.security.audit.tainted-xpath-from-http-request.tainted-xpath-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00207.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":88,"endLine":77,"snippet":{"text":"            response.getWriter().println(\"Your query results are: \" + result + \"<br/>\");"},"startColumn":13,"startLine":77}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00208.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":82,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":82}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00208.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":82,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":82}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00210.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":77,"snippet":{"text":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},"startColumn":69,"startLine":77}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00210.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":80,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":80}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00210.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":80,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":80}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00215.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":65,"snippet":{"text":"        java.io.File fileTarget =\n                new java.io.File(\n                        new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR), bar);"},"startColumn":22,"startLine":63}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00216.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":87,"endLine":69,"snippet":{"text":"        java.io.File fileTarget =\n                new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar);"},"startColumn":22,"startLine":68}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00218.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":64,"endLine":102,"snippet":{"text":"            java.io.File fileTarget = new java.io.File(fileURI);"},"startColumn":26,"startLine":102}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00219.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":74,"endLine":73,"snippet":{"text":"            fis = new java.io.FileInputStream(new java.io.File(fileName));"},"startColumn":19,"startLine":73}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00221.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":64,"endLine":74,"snippet":{"text":"            fos = new java.io.FileOutputStream(fileName, false);"},"startColumn":13,"startLine":74}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00221.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":87,"snippet":{"text":"                    fos = null;"},"startColumn":21,"startLine":87}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00222.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":88,"snippet":{"text":"            fos = new java.io.FileOutputStream(fileName);"},"startColumn":13,"startLine":88}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00222.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":101,"snippet":{"text":"                    fos = null;"},"startColumn":21,"startLine":101}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00223.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":83,"endLine":74,"snippet":{"text":"                md = java.security.MessageDigest.getInstance(\"SHA1\", provider[0]);"},"startColumn":17,"startLine":74}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00223.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":77,"endLine":76,"snippet":{"text":"                md = java.security.MessageDigest.getInstance(\"SHA1\", \"SUN\");"},"startColumn":17,"startLine":76}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00250.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":89,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' with value: 10340 saved in session.\");"},"startColumn":9,"startLine":85}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00251.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":52,"endLine":65,"snippet":{"text":"        request.getSession().putValue(\"userid\", bar);"},"startColumn":49,"startLine":65}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"properties":{},"ruleId":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00251.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":71,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: 'userid' with value: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' saved in session.\");"},"startColumn":9,"startLine":67}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00253.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":83,"snippet":{"text":"        request.getSession().setAttribute(\"userid\", bar);"},"startColumn":53,"startLine":83}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"properties":{},"ruleId":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00253.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":89,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: 'userid' with value: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' saved in session.\");"},"startColumn":9,"startLine":85}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00254.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":78,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":78}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00254.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":78,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":78}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00256.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":79,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":79}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00256.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":79,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":79}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00257.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":70,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":70}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00257.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":70,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":70}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00258.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":69,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":69}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00258.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":69,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":69}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00262.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":74,"snippet":{"text":"        java.io.File fileTarget = new java.io.File(bar);"},"startColumn":22,"startLine":74}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00263.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":74,"endLine":79,"snippet":{"text":"            fis = new java.io.FileInputStream(new java.io.File(fileName));"},"startColumn":19,"startLine":79}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00264.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":74,"endLine":65,"snippet":{"text":"            fis = new java.io.FileInputStream(new java.io.File(fileName));"},"startColumn":19,"startLine":65}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00266.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":83,"endLine":66,"snippet":{"text":"                md = java.security.MessageDigest.getInstance(\"SHA1\", provider[0]);"},"startColumn":17,"startLine":66}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00266.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":77,"endLine":68,"snippet":{"text":"                md = java.security.MessageDigest.getInstance(\"SHA1\", \"SUN\");"},"startColumn":17,"startLine":68}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00267.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":83,"endLine":62,"snippet":{"text":"                md = java.security.MessageDigest.getInstance(\"SHA1\", provider[0]);"},"startColumn":17,"startLine":62}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00267.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":77,"endLine":64,"snippet":{"text":"                md = java.security.MessageDigest.getInstance(\"SHA1\", \"SUN\");"},"startColumn":17,"startLine":64}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00268.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":101,"endLine":61,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"SHA1\", \"SUN\");"},"startColumn":13,"startLine":61}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00269.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":101,"endLine":61,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"SHA1\", \"SUN\");"},"startColumn":13,"startLine":61}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00272.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":75,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"MD5\");"},"startColumn":86,"startLine":75}}}],"message":{"text":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-md5.use-of-md5"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00276.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":40,"endLine":61,"snippet":{"text":"        response.getWriter().print(bar);"},"startColumn":9,"startLine":61}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00280.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":40,"endLine":75,"snippet":{"text":"        response.getWriter().print(bar);"},"startColumn":9,"startLine":75}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00281.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":67,"endLine":62,"snippet":{"text":"        response.getWriter().printf(java.util.Locale.US, bar, obj);"},"startColumn":9,"startLine":62}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00284.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":42,"endLine":56,"snippet":{"text":"        response.getWriter().println(bar);"},"startColumn":9,"startLine":56}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00287.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":69,"endLine":59,"snippet":{"text":"            response.getWriter().write(bar.toCharArray(), 0, length);"},"startColumn":13,"startLine":59}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00290.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":40,"endLine":57,"snippet":{"text":"        response.getWriter().write(bar);"},"startColumn":9,"startLine":57}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00291.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":40,"endLine":59,"snippet":{"text":"        response.getWriter().write(bar);"},"startColumn":9,"startLine":59}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00292.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":55,"endLine":62,"snippet":{"text":"            response.getWriter().write(bar, 0, length);"},"startColumn":13,"startLine":62}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00293.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":36,"endLine":72,"snippet":{"text":"        argList.add(\"echo \" + bar);"},"startColumn":9,"startLine":72}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00294.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":36,"endLine":70,"snippet":{"text":"        argList.add(\"echo \" + bar);"},"startColumn":9,"startLine":70}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00295.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":72,"snippet":{"text":"        ProcessBuilder pb = new ProcessBuilder(args);"},"startColumn":9,"startLine":72}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00295.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":36,"endLine":75,"snippet":{"text":"            Process p = pb.start();"},"startColumn":13,"startLine":75}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00302.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":43,"endLine":69,"snippet":{"text":"            Process p = r.exec(cmd + bar);"},"startColumn":13,"startLine":69}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00303.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":38,"endLine":83,"snippet":{"text":"            Process p = r.exec(args);"},"startColumn":13,"startLine":83}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00306.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":97,"endLine":69,"snippet":{"text":"            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":69}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00308.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":52,"endLine":70,"snippet":{"text":"            Process p = r.exec(cmd + bar, argsEnv);"},"startColumn":13,"startLine":70}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00310.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":98,"endLine":85,"snippet":{"text":"            Process p =\n                    r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":84}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00311.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":80,"snippet":{"text":"            Process p = r.exec(cmd, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":80}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00323.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":52,"endLine":61,"snippet":{"text":"        request.getSession().putValue(\"userid\", bar);"},"startColumn":49,"startLine":61}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"properties":{},"ruleId":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00323.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":67,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: 'userid' with value: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' saved in session.\");"},"startColumn":9,"startLine":63}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00324.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":52,"endLine":56,"snippet":{"text":"        request.getSession().putValue(\"userid\", bar);"},"startColumn":49,"startLine":56}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"properties":{},"ruleId":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00325.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":52,"endLine":56,"snippet":{"text":"        request.getSession().putValue(\"userid\", bar);"},"startColumn":49,"startLine":56}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"properties":{},"ruleId":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00326.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":77,"endLine":67,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' with value: '10340' saved in session.\");"},"startColumn":9,"startLine":63}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00327.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":58,"snippet":{"text":"        request.getSession().setAttribute(\"userid\", bar);"},"startColumn":53,"startLine":58}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"properties":{},"ruleId":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00327.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":64,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: 'userid' with value: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' saved in session.\");"},"startColumn":9,"startLine":60}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00328.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":80,"endLine":65,"snippet":{"text":"            java.sql.CallableStatement statement = connection.prepareCall(sql);"},"startColumn":13,"startLine":65}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00329.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":80,"endLine":65,"snippet":{"text":"            java.sql.CallableStatement statement = connection.prepareCall(sql);"},"startColumn":13,"startLine":65}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00333.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":65,"snippet":{"text":"            java.sql.PreparedStatement statement = connection.prepareStatement(sql);"},"startColumn":13,"startLine":65}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00335.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":72,"endLine":66,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(sql, new int[] {1, 2});"},"startColumn":13,"startLine":65}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00336.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":66,"snippet":{"text":"            Long results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class);"},"startColumn":13,"startLine":64}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00336.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":89,"endLine":67,"snippet":{"text":"            response.getWriter().println(\"Your results are: \" + String.valueOf(results));"},"startColumn":13,"startLine":67}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00338.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":65,"endLine":65,"snippet":{"text":"            Object results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, new Object[] {}, String.class);"},"startColumn":13,"startLine":63}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00339.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":97,"endLine":63,"snippet":{"text":"            org.springframework.jdbc.support.rowset.SqlRowSet results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql);"},"startColumn":13,"startLine":62}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00340.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":77,"snippet":{"text":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);"},"startColumn":13,"startLine":77}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00341.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":63,"snippet":{"text":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);"},"startColumn":13,"startLine":63}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00343.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":65,"snippet":{"text":"            statement.execute(sql, new String[] {\"username\", \"password\"});"},"startColumn":13,"startLine":65}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00344.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":65,"endLine":65,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            java.sql.ResultSet rs = statement.executeQuery(sql);"},"startColumn":13,"startLine":63}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00344.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":65,"endLine":65,"snippet":{"text":"            java.sql.ResultSet rs = statement.executeQuery(sql);"},"startColumn":13,"startLine":65}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00346.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":83,"endLine":53,"snippet":{"text":"                md = java.security.MessageDigest.getInstance(\"SHA1\", provider[0]);"},"startColumn":17,"startLine":53}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00346.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":77,"endLine":55,"snippet":{"text":"                md = java.security.MessageDigest.getInstance(\"SHA1\", \"SUN\");"},"startColumn":17,"startLine":55}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00354.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":63,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":63}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00354.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":63,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":63}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00355.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":76,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":76}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00355.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":76,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":76}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00356.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":61,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":61}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00356.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":61,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":61}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00359.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":53,"snippet":{"text":"        java.io.File fileTarget = new java.io.File(bar);"},"startColumn":22,"startLine":53}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00360.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":74,"endLine":60,"snippet":{"text":"            fis = new java.io.FileInputStream(new java.io.File(fileName));"},"startColumn":19,"startLine":60}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00361.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":72,"snippet":{"text":"            fis = new java.io.FileInputStream(fileName);"},"startColumn":19,"startLine":72}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00362.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":54,"snippet":{"text":"            fos = new java.io.FileOutputStream(new java.io.File(fileName));"},"startColumn":13,"startLine":54}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00362.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":67,"snippet":{"text":"                    fos = null;"},"startColumn":21,"startLine":67}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00363.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":92,"endLine":60,"snippet":{"text":"        java.io.FileOutputStream fos =\n                new java.io.FileOutputStream(new java.io.FileInputStream(fileName).getFD()); ) {"},"startColumn":34,"startLine":59}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00371.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":101,"endLine":54,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"SHA1\", \"SUN\");"},"startColumn":13,"startLine":54}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00372.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":54,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"MD5\");"},"startColumn":86,"startLine":54}}}],"message":{"text":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-md5.use-of-md5"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00375.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":67,"endLine":51,"snippet":{"text":"        response.getWriter().format(java.util.Locale.US, bar, obj);"},"startColumn":9,"startLine":51}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00376.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":55,"snippet":{"text":"        response.getWriter().format(\"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":55}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00378.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":51,"snippet":{"text":"        response.getWriter().format(bar, obj);"},"startColumn":9,"startLine":51}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00380.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":40,"endLine":68,"snippet":{"text":"        response.getWriter().print(bar);"},"startColumn":9,"startLine":68}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00384.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":67,"endLine":52,"snippet":{"text":"        response.getWriter().printf(java.util.Locale.US, bar, obj);"},"startColumn":9,"startLine":52}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00387.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":54,"snippet":{"text":"        response.getWriter().println(bar.toCharArray());"},"startColumn":9,"startLine":54}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00388.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":50,"snippet":{"text":"        response.getWriter().println(bar.toCharArray());"},"startColumn":9,"startLine":50}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00390.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":42,"endLine":56,"snippet":{"text":"        response.getWriter().println(bar);"},"startColumn":9,"startLine":56}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00392.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":69,"endLine":56,"snippet":{"text":"            response.getWriter().write(bar.toCharArray(), 0, length);"},"startColumn":13,"startLine":56}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00393.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":40,"endLine":54,"snippet":{"text":"        response.getWriter().write(bar);"},"startColumn":9,"startLine":54}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00395.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":55,"endLine":53,"snippet":{"text":"            response.getWriter().write(bar, 0, length);"},"startColumn":13,"startLine":53}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00406.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":38,"endLine":74,"snippet":{"text":"            Process p = r.exec(args);"},"startColumn":13,"startLine":74}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00408.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":47,"endLine":76,"snippet":{"text":"            Process p = r.exec(args, argsEnv);"},"startColumn":13,"startLine":76}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00409.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":97,"endLine":90,"snippet":{"text":"            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":90}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00424.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":52,"endLine":56,"snippet":{"text":"        request.getSession().putValue(\"userid\", bar);"},"startColumn":49,"startLine":56}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"properties":{},"ruleId":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00424.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":62,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: 'userid' with value: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' saved in session.\");"},"startColumn":9,"startLine":58}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00425.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":52,"endLine":50,"snippet":{"text":"        request.getSession().putValue(\"userid\", bar);"},"startColumn":49,"startLine":50}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"properties":{},"ruleId":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00425.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":56,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: 'userid' with value: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' saved in session.\");"},"startColumn":9,"startLine":52}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00426.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":77,"endLine":60,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' with value: '10340' saved in session.\");"},"startColumn":9,"startLine":56}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00429.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":73,"endLine":63,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},"startColumn":13,"startLine":58}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00430.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":73,"endLine":63,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},"startColumn":13,"startLine":58}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00431.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":32,"endLine":71,"snippet":{"text":"            java.util.List<String> results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(\n                            sql,\n                            new org.springframework.jdbc.core.RowMapper<String>() {\n                                @Override\n                                public String mapRow(java.sql.ResultSet rs, int rowNum)\n                                        throws java.sql.SQLException {\n                                    try {\n                                        return rs.getString(\"USERNAME\");\n                                    } catch (java.sql.SQLException e) {\n                                        if (org.owasp.benchmark.helpers.DatabaseHelper\n                                                .hideSQLErrors) {\n                                            return \"Error processing query.\";\n                                        } else throw e;\n                                    }\n                                }\n                            });"},"startColumn":13,"startLine":55}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00433.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":95,"endLine":56,"snippet":{"text":"            java.util.List<java.util.Map<String, Object>> list =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql);"},"startColumn":13,"startLine":55}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00434.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":53,"snippet":{"text":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);"},"startColumn":13,"startLine":53}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00436.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":36,"endLine":58,"snippet":{"text":"            statement.execute(sql);"},"startColumn":13,"startLine":58}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00437.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":58,"snippet":{"text":"            statement.execute(sql, new int[] {1, 2});"},"startColumn":13,"startLine":58}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00438.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":58,"snippet":{"text":"            statement.execute(sql, new String[] {\"username\", \"password\"});"},"startColumn":13,"startLine":58}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00439.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":65,"endLine":53,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            java.sql.ResultSet rs = statement.executeQuery(sql);"},"startColumn":13,"startLine":51}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00439.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":65,"endLine":53,"snippet":{"text":"            java.sql.ResultSet rs = statement.executeQuery(sql);"},"startColumn":13,"startLine":53}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00441.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":72,"endLine":55,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            int count = statement.executeUpdate(sql, new int[] {1, 2});"},"startColumn":13,"startLine":53}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00442.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":65,"endLine":68,"snippet":{"text":"            String result = xp.evaluate(expression, xmlDocument);"},"startColumn":29,"startLine":68}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a XPath evaluate or compile command. This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized. Xpath injection could lead to unauthorized access to sensitive information in XML documents. Instead, thoroughly sanitize user input or use parameterized xpath queries if you can."},"properties":{},"ruleId":"java.lang.security.audit.tainted-xpath-from-http-request.tainted-xpath-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00442.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":88,"endLine":70,"snippet":{"text":"            response.getWriter().println(\"Your query results are: \" + result + \"<br/>\");"},"startColumn":13,"startLine":70}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00445.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":83,"snippet":{"text":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},"startColumn":69,"startLine":83}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00445.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":86,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":86}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00445.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":86,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":86}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00446.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":68,"snippet":{"text":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},"startColumn":69,"startLine":68}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00446.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":71,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":71}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00446.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":71,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":71}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00448.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":65,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":65}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00448.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":65,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":65}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00449.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":63,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":63}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00449.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":63,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":63}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00452.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":61,"snippet":{"text":"        java.io.File fileTarget =\n                new java.io.File(\n                        new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR), bar);"},"startColumn":22,"startLine":59}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00453.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":64,"endLine":79,"snippet":{"text":"            java.io.File fileTarget = new java.io.File(fileURI);"},"startColumn":26,"startLine":79}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00454.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":74,"endLine":62,"snippet":{"text":"            fis = new java.io.FileInputStream(new java.io.File(fileName));"},"startColumn":19,"startLine":62}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00455.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":64,"snippet":{"text":"            fis = new java.io.FileInputStream(fileName);"},"startColumn":19,"startLine":64}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00458.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":77,"snippet":{"text":"            fos = new java.io.FileOutputStream(new java.io.File(fileName));"},"startColumn":13,"startLine":77}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00458.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":90,"snippet":{"text":"                    fos = null;"},"startColumn":21,"startLine":90}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00459.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":65,"snippet":{"text":"            fos = new java.io.FileOutputStream(fileName);"},"startColumn":13,"startLine":65}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00459.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":78,"snippet":{"text":"                    fos = null;"},"startColumn":21,"startLine":78}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00462.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":83,"endLine":68,"snippet":{"text":"                md = java.security.MessageDigest.getInstance(\"SHA1\", provider[0]);"},"startColumn":17,"startLine":68}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00462.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":77,"endLine":70,"snippet":{"text":"                md = java.security.MessageDigest.getInstance(\"SHA1\", \"SUN\");"},"startColumn":17,"startLine":70}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00464.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":101,"endLine":56,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"SHA1\", \"SUN\");"},"startColumn":13,"startLine":56}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00465.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":56,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"MD5\");"},"startColumn":86,"startLine":56}}}],"message":{"text":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-md5.use-of-md5"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00469.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":59,"snippet":{"text":"        response.getWriter().format(bar, obj);"},"startColumn":9,"startLine":59}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00472.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":59,"snippet":{"text":"        response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":59}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00473.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":61,"snippet":{"text":"        response.getWriter().printf(bar, obj);"},"startColumn":9,"startLine":61}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00475.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":42,"endLine":58,"snippet":{"text":"        response.getWriter().println(bar);"},"startColumn":9,"startLine":58}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00476.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":42,"endLine":58,"snippet":{"text":"        response.getWriter().println(bar);"},"startColumn":9,"startLine":58}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00477.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":42,"endLine":54,"snippet":{"text":"        response.getWriter().println(bar);"},"startColumn":9,"startLine":54}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00478.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":60,"snippet":{"text":"        response.getWriter().write(bar.toCharArray());"},"startColumn":9,"startLine":60}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00480.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":36,"endLine":67,"snippet":{"text":"        argList.add(\"echo \" + bar);"},"startColumn":9,"startLine":67}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00481.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":36,"endLine":67,"snippet":{"text":"        argList.add(\"echo \" + bar);"},"startColumn":9,"startLine":67}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00492.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":62,"endLine":55,"snippet":{"text":"        response.getWriter().write(\"Parameter value: \" + bar);"},"startColumn":9,"startLine":55}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00496.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":47,"endLine":68,"snippet":{"text":"            Process p = r.exec(args, argsEnv);"},"startColumn":13,"startLine":68}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00497.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":47,"endLine":80,"snippet":{"text":"            Process p = r.exec(args, argsEnv);"},"startColumn":13,"startLine":80}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00498.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":97,"endLine":68,"snippet":{"text":"            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":68}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00499.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":52,"endLine":62,"snippet":{"text":"            Process p = r.exec(cmd + bar, argsEnv);"},"startColumn":13,"startLine":62}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00500.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":98,"endLine":68,"snippet":{"text":"            Process p =\n                    r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":67}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00508.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":54,"snippet":{"text":"        request.getSession().setAttribute(\"userid\", bar);"},"startColumn":53,"startLine":54}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"properties":{},"ruleId":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00508.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":60,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: 'userid' with value: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' saved in session.\");"},"startColumn":9,"startLine":56}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00510.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":73,"endLine":81,"snippet":{"text":"            java.sql.CallableStatement statement =\n                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},"startColumn":13,"startLine":76}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00512.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":36,"endLine":57,"snippet":{"text":"            statement.execute(sql);"},"startColumn":13,"startLine":57}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00514.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":36,"endLine":62,"snippet":{"text":"            statement.execute(sql);"},"startColumn":13,"startLine":62}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00516.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":76,"snippet":{"text":"            statement.execute(sql, new int[] {1, 2});"},"startColumn":13,"startLine":76}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00517.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":62,"snippet":{"text":"            statement.execute(sql, new String[] {\"username\", \"password\"});"},"startColumn":13,"startLine":62}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00518.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":72,"endLine":59,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            int count = statement.executeUpdate(sql, new int[] {1, 2});"},"startColumn":13,"startLine":57}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00520.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":65,"endLine":72,"snippet":{"text":"            String result = xp.evaluate(expression, xmlDocument);"},"startColumn":29,"startLine":72}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a XPath evaluate or compile command. This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized. Xpath injection could lead to unauthorized access to sensitive information in XML documents. Instead, thoroughly sanitize user input or use parameterized xpath queries if you can."},"properties":{},"ruleId":"java.lang.security.audit.tainted-xpath-from-http-request.tainted-xpath-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00520.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":88,"endLine":74,"snippet":{"text":"            response.getWriter().println(\"Your query results are: \" + result + \"<br/>\");"},"startColumn":13,"startLine":74}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00521.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":83,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":83}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00521.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":83,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":83}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00522.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":81,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":81}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00522.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":81,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":81}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00526.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":69,"endLine":62,"snippet":{"text":"        java.io.File fileTarget = new java.io.File(bar, \"/Test.txt\");"},"startColumn":22,"startLine":62}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00527.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":69,"endLine":64,"snippet":{"text":"        java.io.File fileTarget = new java.io.File(bar, \"/Test.txt\");"},"startColumn":22,"startLine":64}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00529.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":67,"snippet":{"text":"            fis = new java.io.FileInputStream(fileName);"},"startColumn":19,"startLine":67}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00530.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":49,"endLine":94,"snippet":{"text":"                    idc.search(base, filter, sc);"},"startColumn":21,"startLine":94}}}],"message":{"text":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data."},"properties":{},"ruleId":"java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00530.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":112,"snippet":{"text":"                    response.getWriter()\n                            .println(\n                                    \"LDAP query results:<br>\"\n                                            + \"Record found with name \"\n                                            + attr.get()\n                                            + \"<br>\"\n                                            + \"Address: \"\n                                            + attr2.get()\n                                            + \"<br>\");"},"startColumn":21,"startLine":104}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00531.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":83,"endLine":73,"snippet":{"text":"                md = java.security.MessageDigest.getInstance(\"SHA1\", provider[0]);"},"startColumn":17,"startLine":73}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00531.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":77,"endLine":75,"snippet":{"text":"                md = java.security.MessageDigest.getInstance(\"SHA1\", \"SUN\");"},"startColumn":17,"startLine":75}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00532.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":101,"endLine":83,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"SHA1\", \"SUN\");"},"startColumn":13,"startLine":83}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00533.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":101,"endLine":73,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"SHA1\", \"SUN\");"},"startColumn":13,"startLine":73}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00534.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":101,"endLine":82,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"SHA1\", \"SUN\");"},"startColumn":13,"startLine":82}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00536.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":68,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"MD5\");"},"startColumn":86,"startLine":68}}}],"message":{"text":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-md5.use-of-md5"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00537.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":63,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"MD5\");"},"startColumn":86,"startLine":63}}}],"message":{"text":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-md5.use-of-md5"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00541.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":67,"endLine":71,"snippet":{"text":"        response.getWriter().format(java.util.Locale.US, bar, obj);"},"startColumn":9,"startLine":71}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00542.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":67,"endLine":83,"snippet":{"text":"        response.getWriter().format(java.util.Locale.US, bar, obj);"},"startColumn":9,"startLine":83}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00547.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":67,"endLine":65,"snippet":{"text":"        response.getWriter().printf(java.util.Locale.US, bar, obj);"},"startColumn":9,"startLine":65}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00549.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":68,"snippet":{"text":"        response.getWriter().println(bar.toCharArray());"},"startColumn":9,"startLine":68}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00551.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":42,"endLine":63,"snippet":{"text":"        response.getWriter().println(bar);"},"startColumn":9,"startLine":63}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00553.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":42,"endLine":82,"snippet":{"text":"        response.getWriter().println(bar);"},"startColumn":9,"startLine":82}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00554.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":42,"endLine":68,"snippet":{"text":"        response.getWriter().println(bar);"},"startColumn":9,"startLine":68}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00555.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":68,"snippet":{"text":"        response.getWriter().write(bar.toCharArray());"},"startColumn":9,"startLine":68}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00556.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":40,"endLine":82,"snippet":{"text":"        response.getWriter().write(bar);"},"startColumn":9,"startLine":82}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00557.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":55,"endLine":67,"snippet":{"text":"            response.getWriter().write(bar, 0, length);"},"startColumn":13,"startLine":67}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00567.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":43,"endLine":78,"snippet":{"text":"            Process p = r.exec(cmd + bar);"},"startColumn":13,"startLine":78}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00568.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":47,"endLine":87,"snippet":{"text":"            Process p = r.exec(args, argsEnv);"},"startColumn":13,"startLine":87}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00571.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":97,"endLine":76,"snippet":{"text":"            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":76}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00572.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":52,"endLine":77,"snippet":{"text":"            Process p = r.exec(cmd + bar, argsEnv);"},"startColumn":13,"startLine":77}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00573.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":70,"snippet":{"text":"            Process p = r.exec(cmd, argsEnv);"},"startColumn":13,"startLine":70}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00574.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":75,"snippet":{"text":"            Process p = r.exec(cmd, argsEnv);"},"startColumn":13,"startLine":75}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00576.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":98,"endLine":75,"snippet":{"text":"            Process p =\n                    r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":74}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00588.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":77,"endLine":72,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' with value: '10340' saved in session.\");"},"startColumn":9,"startLine":68}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00590.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":73,"endLine":77,"snippet":{"text":"            java.sql.CallableStatement statement =\n                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},"startColumn":13,"startLine":72}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00591.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":70,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},"startColumn":13,"startLine":69}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00593.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":73,"endLine":91,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},"startColumn":13,"startLine":86}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00595.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":73,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"});"},"startColumn":13,"startLine":72}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00597.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":95,"endLine":67,"snippet":{"text":"            java.util.List<java.util.Map<String, Object>> list =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql);"},"startColumn":13,"startLine":66}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00598.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":94,"endLine":73,"snippet":{"text":"            java.util.Map<String, Object> results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForMap(sql);"},"startColumn":13,"startLine":72}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00600.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":84,"snippet":{"text":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);"},"startColumn":13,"startLine":84}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00601.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":53,"endLine":73,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            statement.addBatch(sql);\n            int[] counts = statement.executeBatch();"},"startColumn":13,"startLine":70}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00603.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":78,"endLine":69,"snippet":{"text":"            statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},"startColumn":13,"startLine":69}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00604.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":65,"endLine":74,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            java.sql.ResultSet rs = statement.executeQuery(sql);"},"startColumn":13,"startLine":72}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00604.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":65,"endLine":74,"snippet":{"text":"            java.sql.ResultSet rs = statement.executeQuery(sql);"},"startColumn":13,"startLine":74}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00605.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":72,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            int count = statement.executeUpdate(sql);"},"startColumn":13,"startLine":70}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00606.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":72,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            int count = statement.executeUpdate(sql);"},"startColumn":13,"startLine":70}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00607.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":65,"endLine":79,"snippet":{"text":"            String result = xp.evaluate(expression, xmlDocument);"},"startColumn":29,"startLine":79}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a XPath evaluate or compile command. This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized. Xpath injection could lead to unauthorized access to sensitive information in XML documents. Instead, thoroughly sanitize user input or use parameterized xpath queries if you can."},"properties":{},"ruleId":"java.lang.security.audit.tainted-xpath-from-http-request.tainted-xpath-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00607.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":88,"endLine":81,"snippet":{"text":"            response.getWriter().println(\"Your query results are: \" + result + \"<br/>\");"},"startColumn":13,"startLine":81}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00608.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":76,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":76}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00608.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":76,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":76}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00609.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":68,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":68}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00609.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":68,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":68}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00610.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":87,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":87}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00610.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":87,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":87}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00611.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":71,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":71}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00611.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":71,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":71}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00614.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":71,"snippet":{"text":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},"startColumn":69,"startLine":71}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00614.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":74,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":74}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00614.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":74,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":74}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00615.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":67,"snippet":{"text":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},"startColumn":69,"startLine":67}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00615.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":70,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":70}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00615.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":70,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":70}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00616.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":58,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":58}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00616.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":58,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":58}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00617.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":59,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":59}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00617.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":59,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":59}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00622.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":87,"endLine":70,"snippet":{"text":"        java.io.File fileTarget =\n                new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar);"},"startColumn":22,"startLine":69}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00623.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":69,"endLine":57,"snippet":{"text":"        java.io.File fileTarget = new java.io.File(bar, \"/Test.txt\");"},"startColumn":22,"startLine":57}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00624.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":82,"endLine":58,"snippet":{"text":"            fos = new java.io.FileOutputStream(new java.io.File(fileName), false);"},"startColumn":13,"startLine":58}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00624.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":71,"snippet":{"text":"                    fos = null;"},"startColumn":21,"startLine":71}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00625.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":82,"endLine":61,"snippet":{"text":"            fos = new java.io.FileOutputStream(new java.io.File(fileName), false);"},"startColumn":13,"startLine":61}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00625.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":74,"snippet":{"text":"                    fos = null;"},"startColumn":21,"startLine":74}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00627.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":64,"endLine":63,"snippet":{"text":"            fos = new java.io.FileOutputStream(fileName, false);"},"startColumn":13,"startLine":63}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00627.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":76,"snippet":{"text":"                    fos = null;"},"startColumn":21,"startLine":76}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00630.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":49,"endLine":82,"snippet":{"text":"                    idc.search(base, filter, sc);"},"startColumn":21,"startLine":82}}}],"message":{"text":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data."},"properties":{},"ruleId":"java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00631.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":83,"endLine":57,"snippet":{"text":"                md = java.security.MessageDigest.getInstance(\"SHA1\", provider[0]);"},"startColumn":17,"startLine":57}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00631.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":77,"endLine":59,"snippet":{"text":"                md = java.security.MessageDigest.getInstance(\"SHA1\", \"SUN\");"},"startColumn":17,"startLine":59}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00634.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":101,"endLine":61,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"SHA1\", \"SUN\");"},"startColumn":13,"startLine":61}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00635.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":101,"endLine":51,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"SHA1\", \"SUN\");"},"startColumn":13,"startLine":51}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00636.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":101,"endLine":51,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"SHA1\", \"SUN\");"},"startColumn":13,"startLine":51}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00637.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":56,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"MD5\");"},"startColumn":86,"startLine":56}}}],"message":{"text":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-md5.use-of-md5"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00658.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":43,"endLine":64,"snippet":{"text":"            Process p = r.exec(cmd + bar);"},"startColumn":13,"startLine":64}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00659.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":98,"endLine":80,"snippet":{"text":"            Process p =\n                    r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":79}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00684.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":66,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":66}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00684.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":66,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":66}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00685.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":70,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":70}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00685.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":70,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":70}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00688.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":71,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":71}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00688.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":71,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":71}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00691.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":71,"snippet":{"text":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},"startColumn":69,"startLine":71}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00691.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":74,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":74}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00691.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":74,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":74}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00692.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":61,"snippet":{"text":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},"startColumn":69,"startLine":61}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00692.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":64,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":64}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00692.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":64,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":64}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00693.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":64,"snippet":{"text":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},"startColumn":69,"startLine":64}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00693.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":67,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":67}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00693.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":67,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":67}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00694.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":49,"endLine":61,"snippet":{"text":"                    ctx.search(base, filter, sc);"},"startColumn":21,"startLine":61}}}],"message":{"text":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data."},"properties":{},"ruleId":"java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00694.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":78,"snippet":{"text":"                    response.getWriter()\n                            .println(\n                                    \"LDAP query results:<br>\"\n                                            + \"Record found with name \"\n                                            + attr.get()\n                                            + \"<br>\"\n                                            + \"Address: \"\n                                            + attr2.get()\n                                            + \"<br>\");"},"startColumn":21,"startLine":70}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00696.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":87,"endLine":70,"snippet":{"text":"        java.io.File fileTarget =\n                new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar);"},"startColumn":22,"startLine":69}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00697.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":57,"snippet":{"text":"        java.io.File fileTarget = new java.io.File(bar);"},"startColumn":22,"startLine":57}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00698.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":69,"endLine":52,"snippet":{"text":"        java.io.File fileTarget = new java.io.File(bar, \"/Test.txt\");"},"startColumn":22,"startLine":52}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00699.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":69,"endLine":69,"snippet":{"text":"        java.io.File fileTarget = new java.io.File(bar, \"/Test.txt\");"},"startColumn":22,"startLine":69}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00700.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":63,"snippet":{"text":"            fos = new java.io.FileOutputStream(new java.io.File(fileName));"},"startColumn":13,"startLine":63}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00700.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":76,"snippet":{"text":"                    fos = null;"},"startColumn":21,"startLine":76}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00703.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":83,"endLine":66,"snippet":{"text":"                md = java.security.MessageDigest.getInstance(\"SHA1\", provider[0]);"},"startColumn":17,"startLine":66}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00703.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":77,"endLine":68,"snippet":{"text":"                md = java.security.MessageDigest.getInstance(\"SHA1\", \"SUN\");"},"startColumn":17,"startLine":68}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00704.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":83,"endLine":59,"snippet":{"text":"                md = java.security.MessageDigest.getInstance(\"SHA1\", provider[0]);"},"startColumn":17,"startLine":59}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00704.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":77,"endLine":61,"snippet":{"text":"                md = java.security.MessageDigest.getInstance(\"SHA1\", \"SUN\");"},"startColumn":17,"startLine":61}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00705.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":101,"endLine":57,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"SHA1\", \"SUN\");"},"startColumn":13,"startLine":57}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00708.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":53,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"MD5\");"},"startColumn":86,"startLine":53}}}],"message":{"text":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-md5.use-of-md5"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00712.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":79,"endLine":59,"snippet":{"text":"        out.format(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":59}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00715.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":40,"endLine":52,"snippet":{"text":"        response.getWriter().print(bar);"},"startColumn":9,"startLine":52}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00719.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":67,"endLine":54,"snippet":{"text":"        response.getWriter().printf(java.util.Locale.US, bar, obj);"},"startColumn":9,"startLine":54}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00720.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":67,"endLine":71,"snippet":{"text":"        response.getWriter().printf(java.util.Locale.US, bar, obj);"},"startColumn":9,"startLine":71}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00723.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":57,"snippet":{"text":"        response.getWriter().printf(bar, obj);"},"startColumn":9,"startLine":57}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00724.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":42,"endLine":70,"snippet":{"text":"        response.getWriter().println(bar);"},"startColumn":9,"startLine":70}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00727.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":42,"endLine":54,"snippet":{"text":"        response.getWriter().println(bar);"},"startColumn":9,"startLine":54}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00728.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":42,"endLine":56,"snippet":{"text":"        response.getWriter().println(bar);"},"startColumn":9,"startLine":56}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00729.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":53,"snippet":{"text":"        response.getWriter().write(bar.toCharArray());"},"startColumn":9,"startLine":53}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00731.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":36,"endLine":60,"snippet":{"text":"        argList.add(\"echo \" + bar);"},"startColumn":9,"startLine":60}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00738.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":47,"endLine":78,"snippet":{"text":"            Process p = r.exec(args, argsEnv);"},"startColumn":13,"startLine":78}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00739.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":47,"endLine":78,"snippet":{"text":"            Process p = r.exec(args, argsEnv);"},"startColumn":13,"startLine":78}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00743.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":75,"snippet":{"text":"            Process p = r.exec(cmd, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":75}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00755.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":52,"endLine":56,"snippet":{"text":"        request.getSession().putValue(\"userid\", bar);"},"startColumn":49,"startLine":56}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"properties":{},"ruleId":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00755.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":62,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: 'userid' with value: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' saved in session.\");"},"startColumn":9,"startLine":58}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00756.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":52,"endLine":51,"snippet":{"text":"        request.getSession().putValue(\"userid\", bar);"},"startColumn":49,"startLine":51}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"properties":{},"ruleId":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00757.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":77,"endLine":76,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' with value: '10340' saved in session.\");"},"startColumn":9,"startLine":72}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00759.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":54,"snippet":{"text":"        request.getSession().setAttribute(\"userid\", bar);"},"startColumn":53,"startLine":54}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"properties":{},"ruleId":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00759.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":60,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: 'userid' with value: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' saved in session.\");"},"startColumn":9,"startLine":56}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00761.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":80,"endLine":74,"snippet":{"text":"            java.sql.CallableStatement statement = connection.prepareCall(sql);"},"startColumn":13,"startLine":74}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00762.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":73,"endLine":65,"snippet":{"text":"            java.sql.CallableStatement statement =\n                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},"startColumn":13,"startLine":60}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00763.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":72,"endLine":75,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(sql, new int[] {1, 2});"},"startColumn":13,"startLine":74}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00764.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":56,"snippet":{"text":"            Long results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class);"},"startColumn":13,"startLine":54}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00764.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":89,"endLine":57,"snippet":{"text":"            response.getWriter().println(\"Your results are: \" + String.valueOf(results));"},"startColumn":13,"startLine":57}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00765.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":58,"snippet":{"text":"            Long results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class);"},"startColumn":13,"startLine":56}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00765.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":89,"endLine":59,"snippet":{"text":"            response.getWriter().println(\"Your results are: \" + String.valueOf(results));"},"startColumn":13,"startLine":59}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00766.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":61,"snippet":{"text":"            Long results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class);"},"startColumn":13,"startLine":59}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00766.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":89,"endLine":62,"snippet":{"text":"            response.getWriter().println(\"Your results are: \" + String.valueOf(results));"},"startColumn":13,"startLine":62}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00767.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":75,"snippet":{"text":"            Long results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class);"},"startColumn":13,"startLine":73}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00767.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":89,"endLine":76,"snippet":{"text":"            response.getWriter().println(\"Your results are: \" + String.valueOf(results));"},"startColumn":13,"startLine":76}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00768.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":94,"endLine":56,"snippet":{"text":"            java.util.Map<String, Object> results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForMap(sql);"},"startColumn":13,"startLine":55}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00772.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":36,"endLine":74,"snippet":{"text":"            statement.execute(sql);"},"startColumn":13,"startLine":74}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00774.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":74,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            int count = statement.executeUpdate(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},"startColumn":13,"startLine":72}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00779.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":86,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":86}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00779.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":86,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":86}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00781.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":83,"snippet":{"text":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},"startColumn":69,"startLine":83}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00781.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":86,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":86}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00781.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":86,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":86}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00784.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":96,"snippet":{"text":"            fis = new java.io.FileInputStream(fileName);"},"startColumn":19,"startLine":96}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00787.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":85,"snippet":{"text":"            fos = new java.io.FileOutputStream(fileName);"},"startColumn":13,"startLine":85}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00787.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":98,"snippet":{"text":"                    fos = null;"},"startColumn":21,"startLine":98}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00788.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":80,"snippet":{"text":"            fos = new java.io.FileOutputStream(fileName);"},"startColumn":13,"startLine":80}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00788.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":93,"snippet":{"text":"                    fos = null;"},"startColumn":21,"startLine":93}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00789.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":101,"endLine":80,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"SHA1\", \"SUN\");"},"startColumn":13,"startLine":80}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00790.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":101,"endLine":73,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"SHA1\", \"SUN\");"},"startColumn":13,"startLine":73}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00794.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":76,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"MD5\");"},"startColumn":86,"startLine":76}}}],"message":{"text":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-md5.use-of-md5"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00800.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":93,"snippet":{"text":"        response.getWriter().format(\"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":93}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00801.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":74,"snippet":{"text":"        response.getWriter().format(bar, obj);"},"startColumn":9,"startLine":74}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00802.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":80,"snippet":{"text":"        response.getWriter().print(bar.toCharArray());"},"startColumn":9,"startLine":80}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00803.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":40,"endLine":73,"snippet":{"text":"        response.getWriter().print(bar);"},"startColumn":9,"startLine":73}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00804.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":40,"endLine":74,"snippet":{"text":"        response.getWriter().print(bar);"},"startColumn":9,"startLine":74}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00807.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":67,"endLine":75,"snippet":{"text":"        response.getWriter().printf(java.util.Locale.US, bar, obj);"},"startColumn":9,"startLine":75}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00809.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":79,"snippet":{"text":"        response.getWriter().printf(bar, obj);"},"startColumn":9,"startLine":79}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00810.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":74,"snippet":{"text":"        response.getWriter().println(bar.toCharArray());"},"startColumn":9,"startLine":74}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00811.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":92,"snippet":{"text":"        response.getWriter().println(bar.toCharArray());"},"startColumn":9,"startLine":92}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00812.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":42,"endLine":78,"snippet":{"text":"        response.getWriter().println(bar);"},"startColumn":9,"startLine":78}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00813.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":55,"endLine":81,"snippet":{"text":"            response.getWriter().write(bar, 0, length);"},"startColumn":13,"startLine":81}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00814.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":36,"endLine":87,"snippet":{"text":"        argList.add(\"echo \" + bar);"},"startColumn":9,"startLine":87}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00822.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":62,"endLine":78,"snippet":{"text":"        response.getWriter().write(\"Parameter value: \" + bar);"},"startColumn":9,"startLine":78}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00825.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":97,"endLine":83,"snippet":{"text":"            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":83}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00826.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":98,"endLine":88,"snippet":{"text":"            Process p =\n                    r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":87}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00833.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":52,"endLine":78,"snippet":{"text":"        request.getSession().putValue(\"userid\", bar);"},"startColumn":49,"startLine":78}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"properties":{},"ruleId":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00833.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":84,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: 'userid' with value: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' saved in session.\");"},"startColumn":9,"startLine":80}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00834.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":80,"snippet":{"text":"        request.getSession().setAttribute(\"userid\", bar);"},"startColumn":53,"startLine":80}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"properties":{},"ruleId":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00834.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":86,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: 'userid' with value: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' saved in session.\");"},"startColumn":9,"startLine":82}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00836.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":74,"snippet":{"text":"        request.getSession().setAttribute(\"userid\", bar);"},"startColumn":53,"startLine":74}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"properties":{},"ruleId":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00836.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":80,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: 'userid' with value: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' saved in session.\");"},"startColumn":9,"startLine":76}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00838.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":73,"endLine":101,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},"startColumn":13,"startLine":96}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00839.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":83,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"});"},"startColumn":13,"startLine":82}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00840.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":80,"snippet":{"text":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);"},"startColumn":13,"startLine":80}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00841.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":94,"snippet":{"text":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);"},"startColumn":13,"startLine":94}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00845.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":97,"endLine":80,"snippet":{"text":"            org.springframework.jdbc.support.rowset.SqlRowSet results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql);"},"startColumn":13,"startLine":79}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00846.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":75,"snippet":{"text":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);"},"startColumn":13,"startLine":75}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00848.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":53,"endLine":78,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            statement.addBatch(sql);\n            int[] counts = statement.executeBatch();"},"startColumn":13,"startLine":75}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00851.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":93,"endLine":82,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            int count = statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"});"},"startColumn":13,"startLine":80}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00853.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":66,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":66}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00853.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":66,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":66}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00855.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":73,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":73}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00855.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":73,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":73}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00856.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":80,"snippet":{"text":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},"startColumn":69,"startLine":80}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00856.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":83,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":83}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00856.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":83,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":83}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00857.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":79,"snippet":{"text":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},"startColumn":69,"startLine":79}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00857.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":82,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":82}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00857.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":82,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":82}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00859.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":62,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":62}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00859.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":62,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":62}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00861.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":49,"endLine":79,"snippet":{"text":"                    ctx.search(base, filter, sc);"},"startColumn":21,"startLine":79}}}],"message":{"text":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data."},"properties":{},"ruleId":"java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00862.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":87,"endLine":55,"snippet":{"text":"        java.io.File fileTarget =\n                new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar);"},"startColumn":22,"startLine":54}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00863.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":69,"endLine":51,"snippet":{"text":"        java.io.File fileTarget = new java.io.File(bar, \"/Test.txt\");"},"startColumn":22,"startLine":51}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00866.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":57,"snippet":{"text":"            fos = new java.io.FileOutputStream(new java.io.File(fileName));"},"startColumn":13,"startLine":57}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00866.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":70,"snippet":{"text":"                    fos = null;"},"startColumn":21,"startLine":70}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00868.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":83,"endLine":75,"snippet":{"text":"                md = java.security.MessageDigest.getInstance(\"SHA1\", provider[0]);"},"startColumn":17,"startLine":75}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00868.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":77,"endLine":77,"snippet":{"text":"                md = java.security.MessageDigest.getInstance(\"SHA1\", \"SUN\");"},"startColumn":17,"startLine":77}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00869.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":83,"endLine":74,"snippet":{"text":"                md = java.security.MessageDigest.getInstance(\"SHA1\", provider[0]);"},"startColumn":17,"startLine":74}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00869.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":77,"endLine":76,"snippet":{"text":"                md = java.security.MessageDigest.getInstance(\"SHA1\", \"SUN\");"},"startColumn":17,"startLine":76}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00870.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":101,"endLine":50,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"SHA1\", \"SUN\");"},"startColumn":13,"startLine":50}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00871.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":101,"endLine":55,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"SHA1\", \"SUN\");"},"startColumn":13,"startLine":55}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00872.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":101,"endLine":51,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"SHA1\", \"SUN\");"},"startColumn":13,"startLine":51}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00896.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":36,"endLine":64,"snippet":{"text":"        argList.add(\"echo \" + bar);"},"startColumn":9,"startLine":64}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00897.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":80,"snippet":{"text":"        ProcessBuilder pb = new ProcessBuilder(args);"},"startColumn":9,"startLine":80}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00897.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":36,"endLine":83,"snippet":{"text":"            Process p = pb.start();"},"startColumn":13,"startLine":83}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00905.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":38,"endLine":70,"snippet":{"text":"            Process p = r.exec(args);"},"startColumn":13,"startLine":70}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00906.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":38,"endLine":77,"snippet":{"text":"            Process p = r.exec(args);"},"startColumn":13,"startLine":77}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00907.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":38,"endLine":75,"snippet":{"text":"            Process p = r.exec(args);"},"startColumn":13,"startLine":75}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00908.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":47,"endLine":77,"snippet":{"text":"            Process p = r.exec(args, argsEnv);"},"startColumn":13,"startLine":77}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00909.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":97,"endLine":63,"snippet":{"text":"            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":63}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00910.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":98,"endLine":65,"snippet":{"text":"            Process p =\n                    r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":64}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00945.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":75,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":75}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00945.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":75,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":75}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00946.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":75,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":75}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00946.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":75,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":75}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00947.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":58,"endLine":79,"snippet":{"text":"                    ctx.search(base, filter, filters, sc);"},"startColumn":21,"startLine":79}}}],"message":{"text":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data."},"properties":{},"ruleId":"java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00947.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":96,"snippet":{"text":"                    response.getWriter()\n                            .println(\n                                    \"LDAP query results:<br>\"\n                                            + \"Record found with name \"\n                                            + attr.get()\n                                            + \"<br>\"\n                                            + \"Address: \"\n                                            + attr2.get()\n                                            + \"<br>\");"},"startColumn":21,"startLine":88}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00948.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":49,"endLine":78,"snippet":{"text":"                    ctx.search(base, filter, sc);"},"startColumn":21,"startLine":78}}}],"message":{"text":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data."},"properties":{},"ruleId":"java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00948.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":95,"snippet":{"text":"                    response.getWriter()\n                            .println(\n                                    \"LDAP query results:<br>\"\n                                            + \"Record found with name \"\n                                            + attr.get()\n                                            + \"<br>\"\n                                            + \"Address: \"\n                                            + attr2.get()\n                                            + \"<br>\");"},"startColumn":21,"startLine":87}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00949.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":87,"endLine":68,"snippet":{"text":"        java.io.File fileTarget =\n                new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar);"},"startColumn":22,"startLine":67}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00950.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":69,"endLine":67,"snippet":{"text":"        java.io.File fileTarget = new java.io.File(bar, \"/Test.txt\");"},"startColumn":22,"startLine":67}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00951.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":64,"endLine":84,"snippet":{"text":"            java.io.File fileTarget = new java.io.File(fileURI);"},"startColumn":26,"startLine":84}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00952.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":64,"endLine":87,"snippet":{"text":"            java.io.File fileTarget = new java.io.File(fileURI);"},"startColumn":26,"startLine":87}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00953.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":92,"endLine":79,"snippet":{"text":"        java.io.FileOutputStream fos =\n                new java.io.FileOutputStream(new java.io.FileInputStream(fileName).getFD()); ) {"},"startColumn":34,"startLine":78}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00954.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":92,"endLine":79,"snippet":{"text":"        java.io.FileOutputStream fos =\n                new java.io.FileOutputStream(new java.io.FileInputStream(fileName).getFD()); ) {"},"startColumn":34,"startLine":78}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00955.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":92,"endLine":79,"snippet":{"text":"        java.io.FileOutputStream fos =\n                new java.io.FileOutputStream(new java.io.FileInputStream(fileName).getFD()); ) {"},"startColumn":34,"startLine":78}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00956.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":92,"endLine":79,"snippet":{"text":"        java.io.FileOutputStream fos =\n                new java.io.FileOutputStream(new java.io.FileInputStream(fileName).getFD()); ) {"},"startColumn":34,"startLine":78}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00959.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":58,"endLine":81,"snippet":{"text":"                    idc.search(base, filter, filters, sc);"},"startColumn":21,"startLine":81}}}],"message":{"text":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data."},"properties":{},"ruleId":"java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00959.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":98,"snippet":{"text":"                    response.getWriter()\n                            .println(\n                                    \"LDAP query results:<br>\"\n                                            + \"Record found with name \"\n                                            + attr.get()\n                                            + \"<br>\"\n                                            + \"Address: \"\n                                            + attr2.get()\n                                            + \"<br>\");"},"startColumn":21,"startLine":90}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00961.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":101,"endLine":68,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"SHA1\", \"SUN\");"},"startColumn":13,"startLine":68}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00963.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":68,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"MD5\");"},"startColumn":86,"startLine":68}}}],"message":{"text":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-md5.use-of-md5"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00968.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":36,"endLine":77,"snippet":{"text":"        argList.add(\"echo \" + bar);"},"startColumn":9,"startLine":77}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00969.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":36,"endLine":77,"snippet":{"text":"        argList.add(\"echo \" + bar);"},"startColumn":9,"startLine":77}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00970.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":36,"endLine":77,"snippet":{"text":"        argList.add(\"echo \" + bar);"},"startColumn":9,"startLine":77}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00978.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":38,"endLine":88,"snippet":{"text":"            Process p = r.exec(args);"},"startColumn":13,"startLine":88}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00979.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":47,"endLine":90,"snippet":{"text":"            Process p = r.exec(args, argsEnv);"},"startColumn":13,"startLine":90}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00980.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":47,"endLine":76,"snippet":{"text":"            Process p = r.exec(args, argsEnv);"},"startColumn":13,"startLine":76}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00981.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":97,"endLine":90,"snippet":{"text":"            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":90}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00982.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":97,"endLine":76,"snippet":{"text":"            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":76}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00983.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":75,"snippet":{"text":"            Process p = r.exec(cmd, argsEnv);"},"startColumn":13,"startLine":75}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00991.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":74,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' with value: 10340 saved in session.\");"},"startColumn":9,"startLine":70}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00992.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":74,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' with value: 10340 saved in session.\");"},"startColumn":9,"startLine":70}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00993.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":52,"endLine":68,"snippet":{"text":"        request.getSession().putValue(\"userid\", bar);"},"startColumn":49,"startLine":68}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"properties":{},"ruleId":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00993.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":74,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: 'userid' with value: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' saved in session.\");"},"startColumn":9,"startLine":70}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00994.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":52,"endLine":68,"snippet":{"text":"        request.getSession().putValue(\"userid\", bar);"},"startColumn":49,"startLine":68}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"properties":{},"ruleId":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00994.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":74,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: 'userid' with value: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' saved in session.\");"},"startColumn":9,"startLine":70}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00995.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":77,"endLine":74,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' with value: '10340' saved in session.\");"},"startColumn":9,"startLine":70}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00996.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":80,"endLine":73,"snippet":{"text":"            java.sql.CallableStatement statement = connection.prepareCall(sql);"},"startColumn":13,"startLine":73}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00997.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":66,"endLine":77,"snippet":{"text":"            java.sql.CallableStatement statement =\n                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);"},"startColumn":13,"startLine":73}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00998.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":66,"endLine":77,"snippet":{"text":"            java.sql.CallableStatement statement =\n                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);"},"startColumn":13,"startLine":73}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00999.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":66,"endLine":77,"snippet":{"text":"            java.sql.CallableStatement statement =\n                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);"},"startColumn":13,"startLine":73}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01000.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":73,"endLine":78,"snippet":{"text":"            java.sql.CallableStatement statement =\n                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},"startColumn":13,"startLine":73}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01001.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":72,"snippet":{"text":"            java.sql.PreparedStatement statement = connection.prepareStatement(sql);"},"startColumn":13,"startLine":72}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01002.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":72,"endLine":73,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(sql, new int[] {1, 2});"},"startColumn":13,"startLine":72}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01003.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":73,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"});"},"startColumn":13,"startLine":72}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01004.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":73,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"});"},"startColumn":13,"startLine":72}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01005.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":70,"snippet":{"text":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);"},"startColumn":13,"startLine":70}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01006.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":73,"snippet":{"text":"            Long results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class);"},"startColumn":13,"startLine":71}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01006.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":89,"endLine":74,"snippet":{"text":"            response.getWriter().println(\"Your results are: \" + String.valueOf(results));"},"startColumn":13,"startLine":74}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01007.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":94,"endLine":71,"snippet":{"text":"            java.util.Map<String, Object> results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForMap(sql);"},"startColumn":13,"startLine":70}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01008.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":97,"endLine":70,"snippet":{"text":"            org.springframework.jdbc.support.rowset.SqlRowSet results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql);"},"startColumn":13,"startLine":69}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01009.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":97,"endLine":70,"snippet":{"text":"            org.springframework.jdbc.support.rowset.SqlRowSet results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql);"},"startColumn":13,"startLine":69}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01010.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":70,"snippet":{"text":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);"},"startColumn":13,"startLine":70}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01011.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":53,"endLine":73,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            statement.addBatch(sql);\n            int[] counts = statement.executeBatch();"},"startColumn":13,"startLine":70}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01012.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":78,"endLine":72,"snippet":{"text":"            statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},"startColumn":13,"startLine":72}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01013.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":99,"endLine":85,"snippet":{"text":"                            xp.compile(expression)\n                                    .evaluate(xmlDocument, javax.xml.xpath.XPathConstants.NODESET);"},"startColumn":29,"startLine":84}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a XPath evaluate or compile command. This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized. Xpath injection could lead to unauthorized access to sensitive information in XML documents. Instead, thoroughly sanitize user input or use parameterized xpath queries if you can."},"properties":{},"ruleId":"java.lang.security.audit.tainted-xpath-from-http-request.tainted-xpath-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01013.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":79,"endLine":91,"snippet":{"text":"                response.getWriter().println(value.getTextContent() + \"<br/>\");"},"startColumn":17,"startLine":91}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01014.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":65,"endLine":82,"snippet":{"text":"            String result = xp.evaluate(expression, xmlDocument);"},"startColumn":29,"startLine":82}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a XPath evaluate or compile command. This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized. Xpath injection could lead to unauthorized access to sensitive information in XML documents. Instead, thoroughly sanitize user input or use parameterized xpath queries if you can."},"properties":{},"ruleId":"java.lang.security.audit.tainted-xpath-from-http-request.tainted-xpath-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01014.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":88,"endLine":84,"snippet":{"text":"            response.getWriter().println(\"Your query results are: \" + result + \"<br/>\");"},"startColumn":13,"startLine":84}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01015.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":69,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":69}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01015.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":69,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":69}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01016.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":67,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":67}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01016.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":67,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":67}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01017.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":67,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":67}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01017.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":67,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":67}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01018.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":64,"snippet":{"text":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},"startColumn":69,"startLine":64}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01018.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":67,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":67}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01018.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":67,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":67}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01020.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":61,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":61}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01020.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":61,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":61}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01023.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":58,"endLine":65,"snippet":{"text":"                    ctx.search(base, filter, filters, sc);"},"startColumn":21,"startLine":65}}}],"message":{"text":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data."},"properties":{},"ruleId":"java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01023.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":82,"snippet":{"text":"                    response.getWriter()\n                            .println(\n                                    \"LDAP query results:<br>\"\n                                            + \"Record found with name \"\n                                            + attr.get()\n                                            + \"<br>\"\n                                            + \"Address: \"\n                                            + attr2.get()\n                                            + \"<br>\");"},"startColumn":21,"startLine":74}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01024.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":58,"endLine":65,"snippet":{"text":"                    ctx.search(base, filter, filters, sc);"},"startColumn":21,"startLine":65}}}],"message":{"text":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data."},"properties":{},"ruleId":"java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01024.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":82,"snippet":{"text":"                    response.getWriter()\n                            .println(\n                                    \"LDAP query results:<br>\"\n                                            + \"Record found with name \"\n                                            + attr.get()\n                                            + \"<br>\"\n                                            + \"Address: \"\n                                            + attr2.get()\n                                            + \"<br>\");"},"startColumn":21,"startLine":74}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01025.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":87,"endLine":54,"snippet":{"text":"        java.io.File fileTarget =\n                new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar);"},"startColumn":22,"startLine":53}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01026.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":53,"snippet":{"text":"        java.io.File fileTarget = new java.io.File(bar);"},"startColumn":22,"startLine":53}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01027.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":53,"snippet":{"text":"        java.io.File fileTarget = new java.io.File(bar);"},"startColumn":22,"startLine":53}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01028.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":64,"endLine":70,"snippet":{"text":"            java.io.File fileTarget = new java.io.File(fileURI);"},"startColumn":26,"startLine":70}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01029.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":64,"endLine":73,"snippet":{"text":"            java.io.File fileTarget = new java.io.File(fileURI);"},"startColumn":26,"startLine":73}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01030.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":64,"endLine":73,"snippet":{"text":"            java.io.File fileTarget = new java.io.File(fileURI);"},"startColumn":26,"startLine":73}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01031.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":58,"snippet":{"text":"            fis = new java.io.FileInputStream(fileName);"},"startColumn":19,"startLine":58}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01032.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":82,"endLine":59,"snippet":{"text":"            fos = new java.io.FileOutputStream(new java.io.File(fileName), false);"},"startColumn":13,"startLine":59}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01032.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":72,"snippet":{"text":"                    fos = null;"},"startColumn":21,"startLine":72}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01033.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":59,"snippet":{"text":"            fos = new java.io.FileOutputStream(new java.io.File(fileName));"},"startColumn":13,"startLine":59}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01033.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":72,"snippet":{"text":"                    fos = null;"},"startColumn":21,"startLine":72}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01034.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":59,"snippet":{"text":"            fos = new java.io.FileOutputStream(fileName);"},"startColumn":13,"startLine":59}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01034.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":72,"snippet":{"text":"                    fos = null;"},"startColumn":21,"startLine":72}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01035.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":59,"snippet":{"text":"            fos = new java.io.FileOutputStream(fileName);"},"startColumn":13,"startLine":59}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01035.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":72,"snippet":{"text":"                    fos = null;"},"startColumn":21,"startLine":72}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01038.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":54,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"MD5\");"},"startColumn":86,"startLine":54}}}],"message":{"text":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-md5.use-of-md5"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01046.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":79,"endLine":57,"snippet":{"text":"        out.format(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":57}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01047.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":79,"endLine":57,"snippet":{"text":"        out.format(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":57}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01048.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":67,"endLine":55,"snippet":{"text":"        response.getWriter().format(java.util.Locale.US, bar, obj);"},"startColumn":9,"startLine":55}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01049.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":55,"snippet":{"text":"        response.getWriter().format(\"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":55}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01050.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":40,"endLine":54,"snippet":{"text":"        response.getWriter().print(bar);"},"startColumn":9,"startLine":54}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01051.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":55,"snippet":{"text":"        response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":55}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01052.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":55,"snippet":{"text":"        response.getWriter().printf(bar, obj);"},"startColumn":9,"startLine":55}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01053.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":42,"endLine":54,"snippet":{"text":"        response.getWriter().println(bar);"},"startColumn":9,"startLine":54}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01054.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":42,"endLine":54,"snippet":{"text":"        response.getWriter().println(bar);"},"startColumn":9,"startLine":54}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01055.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":42,"endLine":54,"snippet":{"text":"        response.getWriter().println(bar);"},"startColumn":9,"startLine":54}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01056.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":69,"endLine":57,"snippet":{"text":"            response.getWriter().write(bar.toCharArray(), 0, length);"},"startColumn":13,"startLine":57}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01057.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":40,"endLine":54,"snippet":{"text":"        response.getWriter().write(bar);"},"startColumn":9,"startLine":54}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01063.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":62,"endLine":54,"snippet":{"text":"        response.getWriter().write(\"Parameter value: \" + bar);"},"startColumn":9,"startLine":54}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01064.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":43,"endLine":62,"snippet":{"text":"            Process p = r.exec(cmd + bar);"},"startColumn":13,"startLine":62}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01065.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":38,"endLine":74,"snippet":{"text":"            Process p = r.exec(args);"},"startColumn":13,"startLine":74}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01066.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":47,"endLine":62,"snippet":{"text":"            Process p = r.exec(args, argsEnv);"},"startColumn":13,"startLine":62}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01067.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":61,"snippet":{"text":"            Process p = r.exec(cmd, argsEnv);"},"startColumn":13,"startLine":61}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01068.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":98,"endLine":64,"snippet":{"text":"            Process p =\n                    r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":63}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01080.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":60,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' with value: 10340 saved in session.\");"},"startColumn":9,"startLine":56}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01081.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":77,"endLine":60,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' with value: '10340' saved in session.\");"},"startColumn":9,"startLine":56}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01082.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":77,"endLine":60,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' with value: '10340' saved in session.\");"},"startColumn":9,"startLine":56}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01083.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":66,"endLine":62,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);"},"startColumn":13,"startLine":58}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01084.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":59,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"});"},"startColumn":13,"startLine":58}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01085.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":82,"endLine":56,"snippet":{"text":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql);"},"startColumn":13,"startLine":56}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01086.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":82,"endLine":56,"snippet":{"text":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql);"},"startColumn":13,"startLine":56}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01087.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":49,"endLine":59,"snippet":{"text":"            Integer results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Integer.class);"},"startColumn":13,"startLine":57}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01087.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":73,"endLine":60,"snippet":{"text":"            response.getWriter().println(\"Your results are: \" + results);"},"startColumn":13,"startLine":60}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01088.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":59,"snippet":{"text":"            Long results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class);"},"startColumn":13,"startLine":57}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01088.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":89,"endLine":60,"snippet":{"text":"            response.getWriter().println(\"Your results are: \" + String.valueOf(results));"},"startColumn":13,"startLine":60}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01089.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":65,"endLine":58,"snippet":{"text":"            Object results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, new Object[] {}, String.class);"},"startColumn":13,"startLine":56}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01090.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":53,"endLine":59,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            statement.addBatch(sql);\n            int[] counts = statement.executeBatch();"},"startColumn":13,"startLine":56}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01091.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":36,"endLine":58,"snippet":{"text":"            statement.execute(sql);"},"startColumn":13,"startLine":58}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01092.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":36,"endLine":58,"snippet":{"text":"            statement.execute(sql);"},"startColumn":13,"startLine":58}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01093.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":58,"snippet":{"text":"            statement.execute(sql, new int[] {1, 2});"},"startColumn":13,"startLine":58}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01094.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":58,"snippet":{"text":"            statement.execute(sql, new String[] {\"username\", \"password\"});"},"startColumn":13,"startLine":58}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01095.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":58,"snippet":{"text":"            statement.execute(sql, new String[] {\"username\", \"password\"});"},"startColumn":13,"startLine":58}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01096.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":58,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            int count = statement.executeUpdate(sql);"},"startColumn":13,"startLine":56}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01097.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":58,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            int count = statement.executeUpdate(sql);"},"startColumn":13,"startLine":56}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01098.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":72,"endLine":58,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            int count = statement.executeUpdate(sql, new int[] {1, 2});"},"startColumn":13,"startLine":56}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01099.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":79,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":79}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01099.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":79,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":79}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01102.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":74,"snippet":{"text":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},"startColumn":69,"startLine":74}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01102.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":77,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":77}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01102.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":77,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":77}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01103.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":74,"snippet":{"text":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},"startColumn":69,"startLine":74}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01103.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":77,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":77}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01103.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":77,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":77}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01105.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":71,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":71}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01105.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":71,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":71}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01106.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":71,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":71}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01106.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":71,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":71}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01107.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":71,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":71}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01107.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":71,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":71}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01109.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":69,"endLine":63,"snippet":{"text":"        java.io.File fileTarget = new java.io.File(bar, \"/Test.txt\");"},"startColumn":22,"startLine":63}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01110.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":64,"endLine":80,"snippet":{"text":"            java.io.File fileTarget = new java.io.File(fileURI);"},"startColumn":26,"startLine":80}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01111.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":68,"snippet":{"text":"            fis = new java.io.FileInputStream(fileName);"},"startColumn":19,"startLine":68}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01112.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":68,"snippet":{"text":"            fis = new java.io.FileInputStream(fileName);"},"startColumn":19,"startLine":68}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01113.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":82,"endLine":69,"snippet":{"text":"            fos = new java.io.FileOutputStream(new java.io.File(fileName), false);"},"startColumn":13,"startLine":69}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01113.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":82,"snippet":{"text":"                    fos = null;"},"startColumn":21,"startLine":82}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01114.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":82,"endLine":69,"snippet":{"text":"            fos = new java.io.FileOutputStream(new java.io.File(fileName), false);"},"startColumn":13,"startLine":69}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01114.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":82,"snippet":{"text":"                    fos = null;"},"startColumn":21,"startLine":82}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01115.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":69,"snippet":{"text":"            fos = new java.io.FileOutputStream(new java.io.File(fileName));"},"startColumn":13,"startLine":69}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01115.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":82,"snippet":{"text":"                    fos = null;"},"startColumn":21,"startLine":82}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01116.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":92,"endLine":75,"snippet":{"text":"        java.io.FileOutputStream fos =\n                new java.io.FileOutputStream(new java.io.FileInputStream(fileName).getFD()); ) {"},"startColumn":34,"startLine":74}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01117.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":92,"endLine":75,"snippet":{"text":"        java.io.FileOutputStream fos =\n                new java.io.FileOutputStream(new java.io.FileInputStream(fileName).getFD()); ) {"},"startColumn":34,"startLine":74}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01123.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":101,"endLine":64,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"SHA1\", \"SUN\");"},"startColumn":13,"startLine":64}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01142.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":52,"endLine":64,"snippet":{"text":"        request.getSession().putValue(\"userid\", bar);"},"startColumn":49,"startLine":64}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"properties":{},"ruleId":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01142.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":70,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: 'userid' with value: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' saved in session.\");"},"startColumn":9,"startLine":66}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01143.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":52,"endLine":64,"snippet":{"text":"        request.getSession().putValue(\"userid\", bar);"},"startColumn":49,"startLine":64}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"properties":{},"ruleId":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01143.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":70,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: 'userid' with value: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' saved in session.\");"},"startColumn":9,"startLine":66}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01144.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":64,"snippet":{"text":"        request.getSession().setAttribute(\"userid\", bar);"},"startColumn":53,"startLine":64}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"properties":{},"ruleId":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01144.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":70,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: 'userid' with value: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' saved in session.\");"},"startColumn":9,"startLine":66}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01145.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":64,"snippet":{"text":"        request.getSession().setAttribute(\"userid\", bar);"},"startColumn":53,"startLine":64}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"properties":{},"ruleId":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01145.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":70,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: 'userid' with value: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' saved in session.\");"},"startColumn":9,"startLine":66}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01146.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":64,"snippet":{"text":"        request.getSession().setAttribute(\"userid\", bar);"},"startColumn":53,"startLine":64}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"properties":{},"ruleId":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01146.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":70,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: 'userid' with value: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' saved in session.\");"},"startColumn":9,"startLine":66}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01148.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":69,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":69}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01148.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":69,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":69}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01149.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":69,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":69}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01149.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":69,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":69}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01150.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":66,"snippet":{"text":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},"startColumn":69,"startLine":66}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01150.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":69,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":69}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01150.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":69,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":69}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01154.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":58,"endLine":67,"snippet":{"text":"                    ctx.search(base, filter, filters, sc);"},"startColumn":21,"startLine":67}}}],"message":{"text":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data."},"properties":{},"ruleId":"java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01154.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":84,"snippet":{"text":"                    response.getWriter()\n                            .println(\n                                    \"LDAP query results:<br>\"\n                                            + \"Record found with name \"\n                                            + attr.get()\n                                            + \"<br>\"\n                                            + \"Address: \"\n                                            + attr2.get()\n                                            + \"<br>\");"},"startColumn":21,"startLine":76}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01155.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":55,"snippet":{"text":"        java.io.File fileTarget = new java.io.File(bar);"},"startColumn":22,"startLine":55}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01156.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":64,"endLine":72,"snippet":{"text":"            java.io.File fileTarget = new java.io.File(fileURI);"},"startColumn":26,"startLine":72}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01157.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":64,"endLine":72,"snippet":{"text":"            java.io.File fileTarget = new java.io.File(fileURI);"},"startColumn":26,"startLine":72}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01158.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":60,"snippet":{"text":"            fis = new java.io.FileInputStream(fileName);"},"startColumn":19,"startLine":60}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01159.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":60,"snippet":{"text":"            fis = new java.io.FileInputStream(fileName);"},"startColumn":19,"startLine":60}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01160.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":82,"endLine":61,"snippet":{"text":"            fos = new java.io.FileOutputStream(new java.io.File(fileName), false);"},"startColumn":13,"startLine":61}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01160.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":74,"snippet":{"text":"                    fos = null;"},"startColumn":21,"startLine":74}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01161.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":64,"endLine":61,"snippet":{"text":"            fos = new java.io.FileOutputStream(fileName, false);"},"startColumn":13,"startLine":61}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01161.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":74,"snippet":{"text":"                    fos = null;"},"startColumn":21,"startLine":74}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01165.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":101,"endLine":56,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"SHA1\", \"SUN\");"},"startColumn":13,"startLine":56}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01166.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":101,"endLine":56,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"SHA1\", \"SUN\");"},"startColumn":13,"startLine":56}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01167.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":56,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"MD5\");"},"startColumn":86,"startLine":56}}}],"message":{"text":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-md5.use-of-md5"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01171.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":67,"endLine":57,"snippet":{"text":"        response.getWriter().format(java.util.Locale.US, bar, obj);"},"startColumn":9,"startLine":57}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01172.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":57,"snippet":{"text":"        response.getWriter().format(\"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":57}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01173.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":40,"endLine":56,"snippet":{"text":"        response.getWriter().print(bar);"},"startColumn":9,"startLine":56}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01174.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":40,"endLine":56,"snippet":{"text":"        response.getWriter().print(bar);"},"startColumn":9,"startLine":56}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01175.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":57,"snippet":{"text":"        response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":57}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01176.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":57,"snippet":{"text":"        response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":57}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01177.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":57,"snippet":{"text":"        response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":57}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01178.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":56,"snippet":{"text":"        response.getWriter().println(bar.toCharArray());"},"startColumn":9,"startLine":56}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01179.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":42,"endLine":56,"snippet":{"text":"        response.getWriter().println(bar);"},"startColumn":9,"startLine":56}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01180.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":42,"endLine":56,"snippet":{"text":"        response.getWriter().println(bar);"},"startColumn":9,"startLine":56}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01181.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":56,"snippet":{"text":"        response.getWriter().write(bar.toCharArray());"},"startColumn":9,"startLine":56}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01182.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":36,"endLine":65,"snippet":{"text":"        argList.add(\"echo \" + bar);"},"startColumn":9,"startLine":65}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01188.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":62,"endLine":56,"snippet":{"text":"        response.getWriter().write(\"Parameter value: \" + bar);"},"startColumn":9,"startLine":56}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01189.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":38,"endLine":76,"snippet":{"text":"            Process p = r.exec(args);"},"startColumn":13,"startLine":76}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01190.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":47,"endLine":64,"snippet":{"text":"            Process p = r.exec(args, argsEnv);"},"startColumn":13,"startLine":64}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01191.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":47,"endLine":64,"snippet":{"text":"            Process p = r.exec(args, argsEnv);"},"startColumn":13,"startLine":64}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01192.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":47,"endLine":64,"snippet":{"text":"            Process p = r.exec(args, argsEnv);"},"startColumn":13,"startLine":64}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01193.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":97,"endLine":78,"snippet":{"text":"            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":78}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01194.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":52,"endLine":65,"snippet":{"text":"            Process p = r.exec(cmd + bar, argsEnv);"},"startColumn":13,"startLine":65}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01203.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":52,"endLine":56,"snippet":{"text":"        request.getSession().putValue(\"userid\", bar);"},"startColumn":49,"startLine":56}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"properties":{},"ruleId":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01203.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":62,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: 'userid' with value: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' saved in session.\");"},"startColumn":9,"startLine":58}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01204.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":52,"endLine":56,"snippet":{"text":"        request.getSession().putValue(\"userid\", bar);"},"startColumn":49,"startLine":56}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"properties":{},"ruleId":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01204.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":62,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: 'userid' with value: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' saved in session.\");"},"startColumn":9,"startLine":58}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01205.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":52,"endLine":56,"snippet":{"text":"        request.getSession().putValue(\"userid\", bar);"},"startColumn":49,"startLine":56}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"properties":{},"ruleId":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01205.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":62,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: 'userid' with value: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' saved in session.\");"},"startColumn":9,"startLine":58}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01206.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":52,"endLine":56,"snippet":{"text":"        request.getSession().putValue(\"userid\", bar);"},"startColumn":49,"startLine":56}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"properties":{},"ruleId":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01206.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":62,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: 'userid' with value: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' saved in session.\");"},"startColumn":9,"startLine":58}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01207.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":77,"endLine":62,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' with value: '10340' saved in session.\");"},"startColumn":9,"startLine":58}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01208.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":73,"endLine":65,"snippet":{"text":"            java.sql.CallableStatement statement =\n                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},"startColumn":13,"startLine":60}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01209.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":61,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},"startColumn":13,"startLine":60}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01210.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":66,"endLine":64,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);"},"startColumn":13,"startLine":60}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01211.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":73,"endLine":65,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},"startColumn":13,"startLine":60}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01212.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":72,"endLine":61,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(sql, new int[] {1, 2});"},"startColumn":13,"startLine":60}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01213.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":61,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"});"},"startColumn":13,"startLine":60}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01214.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":58,"snippet":{"text":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);"},"startColumn":13,"startLine":58}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01215.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":61,"snippet":{"text":"            Long results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class);"},"startColumn":13,"startLine":59}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01215.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":89,"endLine":62,"snippet":{"text":"            response.getWriter().println(\"Your results are: \" + String.valueOf(results));"},"startColumn":13,"startLine":62}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01216.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":53,"endLine":61,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            statement.addBatch(sql);\n            int[] counts = statement.executeBatch();"},"startColumn":13,"startLine":58}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01217.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":53,"endLine":61,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            statement.addBatch(sql);\n            int[] counts = statement.executeBatch();"},"startColumn":13,"startLine":58}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01218.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":53,"endLine":61,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            statement.addBatch(sql);\n            int[] counts = statement.executeBatch();"},"startColumn":13,"startLine":58}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01219.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":65,"endLine":60,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            java.sql.ResultSet rs = statement.executeQuery(sql);"},"startColumn":13,"startLine":58}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01219.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":65,"endLine":60,"snippet":{"text":"            java.sql.ResultSet rs = statement.executeQuery(sql);"},"startColumn":13,"startLine":60}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01220.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":60,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            int count = statement.executeUpdate(sql);"},"startColumn":13,"startLine":58}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01221.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":60,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            int count = statement.executeUpdate(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},"startColumn":13,"startLine":58}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01222.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":60,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            int count = statement.executeUpdate(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},"startColumn":13,"startLine":58}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01223.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":99,"endLine":73,"snippet":{"text":"                            xp.compile(expression)\n                                    .evaluate(xmlDocument, javax.xml.xpath.XPathConstants.NODESET);"},"startColumn":29,"startLine":72}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a XPath evaluate or compile command. This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized. Xpath injection could lead to unauthorized access to sensitive information in XML documents. Instead, thoroughly sanitize user input or use parameterized xpath queries if you can."},"properties":{},"ruleId":"java.lang.security.audit.tainted-xpath-from-http-request.tainted-xpath-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01223.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":79,"endLine":79,"snippet":{"text":"                response.getWriter().println(value.getTextContent() + \"<br/>\");"},"startColumn":17,"startLine":79}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01224.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":65,"endLine":70,"snippet":{"text":"            String result = xp.evaluate(expression, xmlDocument);"},"startColumn":29,"startLine":70}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a XPath evaluate or compile command. This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized. Xpath injection could lead to unauthorized access to sensitive information in XML documents. Instead, thoroughly sanitize user input or use parameterized xpath queries if you can."},"properties":{},"ruleId":"java.lang.security.audit.tainted-xpath-from-http-request.tainted-xpath-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01224.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":88,"endLine":72,"snippet":{"text":"            response.getWriter().println(\"Your query results are: \" + result + \"<br/>\");"},"startColumn":13,"startLine":72}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01225.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":65,"endLine":70,"snippet":{"text":"            String result = xp.evaluate(expression, xmlDocument);"},"startColumn":29,"startLine":70}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a XPath evaluate or compile command. This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized. Xpath injection could lead to unauthorized access to sensitive information in XML documents. Instead, thoroughly sanitize user input or use parameterized xpath queries if you can."},"properties":{},"ruleId":"java.lang.security.audit.tainted-xpath-from-http-request.tainted-xpath-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01225.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":88,"endLine":72,"snippet":{"text":"            response.getWriter().println(\"Your query results are: \" + result + \"<br/>\");"},"startColumn":13,"startLine":72}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01228.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":59,"snippet":{"text":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},"startColumn":69,"startLine":59}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01228.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":62,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":62}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01228.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":62,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":62}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01229.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":59,"snippet":{"text":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},"startColumn":69,"startLine":59}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01229.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":62,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":62}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01229.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":62,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":62}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01230.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":56,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":56}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01230.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":56,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":56}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01231.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":50,"snippet":{"text":"        java.io.File fileTarget =\n                new java.io.File(\n                        new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR), bar);"},"startColumn":22,"startLine":48}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01232.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":50,"snippet":{"text":"        java.io.File fileTarget =\n                new java.io.File(\n                        new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR), bar);"},"startColumn":22,"startLine":48}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01233.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":50,"snippet":{"text":"        java.io.File fileTarget =\n                new java.io.File(\n                        new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR), bar);"},"startColumn":22,"startLine":48}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01234.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":87,"endLine":49,"snippet":{"text":"        java.io.File fileTarget =\n                new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar);"},"startColumn":22,"startLine":48}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01235.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":64,"endLine":65,"snippet":{"text":"            java.io.File fileTarget = new java.io.File(fileURI);"},"startColumn":26,"startLine":65}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01236.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":64,"endLine":65,"snippet":{"text":"            java.io.File fileTarget = new java.io.File(fileURI);"},"startColumn":26,"startLine":65}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01237.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":64,"endLine":65,"snippet":{"text":"            java.io.File fileTarget = new java.io.File(fileURI);"},"startColumn":26,"startLine":65}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01238.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":82,"endLine":54,"snippet":{"text":"            fos = new java.io.FileOutputStream(new java.io.File(fileName), false);"},"startColumn":13,"startLine":54}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01238.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":67,"snippet":{"text":"                    fos = null;"},"startColumn":21,"startLine":67}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01239.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":92,"endLine":60,"snippet":{"text":"        java.io.FileOutputStream fos =\n                new java.io.FileOutputStream(new java.io.FileInputStream(fileName).getFD()); ) {"},"startColumn":34,"startLine":59}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01240.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":54,"snippet":{"text":"            fos = new java.io.FileOutputStream(fileName);"},"startColumn":13,"startLine":54}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01240.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":67,"snippet":{"text":"                    fos = null;"},"startColumn":21,"startLine":67}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01241.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":58,"endLine":62,"snippet":{"text":"                    idc.search(base, filter, filters, sc);"},"startColumn":21,"startLine":62}}}],"message":{"text":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data."},"properties":{},"ruleId":"java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01241.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":79,"snippet":{"text":"                    response.getWriter()\n                            .println(\n                                    \"LDAP query results:<br>\"\n                                            + \"Record found with name \"\n                                            + attr.get()\n                                            + \"<br>\"\n                                            + \"Address: \"\n                                            + attr2.get()\n                                            + \"<br>\");"},"startColumn":21,"startLine":71}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01242.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":58,"endLine":62,"snippet":{"text":"                    idc.search(base, filter, filters, sc);"},"startColumn":21,"startLine":62}}}],"message":{"text":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data."},"properties":{},"ruleId":"java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01242.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":79,"snippet":{"text":"                    response.getWriter()\n                            .println(\n                                    \"LDAP query results:<br>\"\n                                            + \"Record found with name \"\n                                            + attr.get()\n                                            + \"<br>\"\n                                            + \"Address: \"\n                                            + attr2.get()\n                                            + \"<br>\");"},"startColumn":21,"startLine":71}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01243.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":49,"endLine":61,"snippet":{"text":"                    idc.search(base, filter, sc);"},"startColumn":21,"startLine":61}}}],"message":{"text":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data."},"properties":{},"ruleId":"java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01243.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":79,"snippet":{"text":"                    response.getWriter()\n                            .println(\n                                    \"LDAP query results:<br>\"\n                                            + \"Record found with name \"\n                                            + attr.get()\n                                            + \"<br>\"\n                                            + \"Address: \"\n                                            + attr2.get()\n                                            + \"<br>\");"},"startColumn":21,"startLine":71}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01244.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":83,"endLine":54,"snippet":{"text":"                md = java.security.MessageDigest.getInstance(\"SHA1\", provider[0]);"},"startColumn":17,"startLine":54}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01244.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":77,"endLine":56,"snippet":{"text":"                md = java.security.MessageDigest.getInstance(\"SHA1\", \"SUN\");"},"startColumn":17,"startLine":56}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01246.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":101,"endLine":49,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"SHA1\", \"SUN\");"},"startColumn":13,"startLine":49}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01247.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":49,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"MD5\");"},"startColumn":86,"startLine":49}}}],"message":{"text":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-md5.use-of-md5"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01251.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":79,"endLine":52,"snippet":{"text":"        out.format(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":52}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01252.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":67,"endLine":50,"snippet":{"text":"        response.getWriter().format(java.util.Locale.US, bar, obj);"},"startColumn":9,"startLine":50}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01253.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":50,"snippet":{"text":"        response.getWriter().format(bar, obj);"},"startColumn":9,"startLine":50}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01254.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":49,"snippet":{"text":"        response.getWriter().print(bar.toCharArray());"},"startColumn":9,"startLine":49}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01255.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":49,"snippet":{"text":"        response.getWriter().print(bar.toCharArray());"},"startColumn":9,"startLine":49}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01256.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":49,"snippet":{"text":"        response.getWriter().print(bar.toCharArray());"},"startColumn":9,"startLine":49}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01257.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":40,"endLine":49,"snippet":{"text":"        response.getWriter().print(bar);"},"startColumn":9,"startLine":49}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01258.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":50,"snippet":{"text":"        response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":50}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01259.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":50,"snippet":{"text":"        response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":50}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01260.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":50,"snippet":{"text":"        response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":50}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01261.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":49,"snippet":{"text":"        response.getWriter().println(bar.toCharArray());"},"startColumn":9,"startLine":49}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01262.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":49,"snippet":{"text":"        response.getWriter().println(bar.toCharArray());"},"startColumn":9,"startLine":49}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01263.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":49,"snippet":{"text":"        response.getWriter().println(bar.toCharArray());"},"startColumn":9,"startLine":49}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01264.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":42,"endLine":49,"snippet":{"text":"        response.getWriter().println(bar);"},"startColumn":9,"startLine":49}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01265.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":69,"endLine":52,"snippet":{"text":"            response.getWriter().write(bar.toCharArray(), 0, length);"},"startColumn":13,"startLine":52}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01266.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":69,"endLine":52,"snippet":{"text":"            response.getWriter().write(bar.toCharArray(), 0, length);"},"startColumn":13,"startLine":52}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01267.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":40,"endLine":49,"snippet":{"text":"        response.getWriter().write(bar);"},"startColumn":9,"startLine":49}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01268.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":55,"endLine":52,"snippet":{"text":"            response.getWriter().write(bar, 0, length);"},"startColumn":13,"startLine":52}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01270.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":60,"snippet":{"text":"        ProcessBuilder pb = new ProcessBuilder(args);"},"startColumn":9,"startLine":60}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01270.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":36,"endLine":63,"snippet":{"text":"            Process p = pb.start();"},"startColumn":13,"startLine":63}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01284.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":62,"endLine":49,"snippet":{"text":"        response.getWriter().write(\"Parameter value: \" + bar);"},"startColumn":9,"startLine":49}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01285.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":43,"endLine":57,"snippet":{"text":"            Process p = r.exec(cmd + bar);"},"startColumn":13,"startLine":57}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01286.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":38,"endLine":69,"snippet":{"text":"            Process p = r.exec(args);"},"startColumn":13,"startLine":69}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01287.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":47,"endLine":57,"snippet":{"text":"            Process p = r.exec(args, argsEnv);"},"startColumn":13,"startLine":57}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01288.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":97,"endLine":57,"snippet":{"text":"            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":57}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01289.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":52,"endLine":58,"snippet":{"text":"            Process p = r.exec(cmd + bar, argsEnv);"},"startColumn":13,"startLine":58}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01290.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":56,"snippet":{"text":"            Process p = r.exec(cmd, argsEnv);"},"startColumn":13,"startLine":56}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01299.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":52,"endLine":49,"snippet":{"text":"        request.getSession().putValue(\"userid\", bar);"},"startColumn":49,"startLine":49}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"properties":{},"ruleId":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01299.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":55,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: 'userid' with value: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' saved in session.\");"},"startColumn":9,"startLine":51}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01300.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":52,"endLine":49,"snippet":{"text":"        request.getSession().putValue(\"userid\", bar);"},"startColumn":49,"startLine":49}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"properties":{},"ruleId":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01300.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":55,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: 'userid' with value: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' saved in session.\");"},"startColumn":9,"startLine":51}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01301.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":66,"endLine":57,"snippet":{"text":"            java.sql.CallableStatement statement =\n                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);"},"startColumn":13,"startLine":53}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01302.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":73,"endLine":58,"snippet":{"text":"            java.sql.CallableStatement statement =\n                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},"startColumn":13,"startLine":53}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01303.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":54,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},"startColumn":13,"startLine":53}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01304.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":73,"endLine":58,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},"startColumn":13,"startLine":53}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01305.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":72,"endLine":54,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(sql, new int[] {1, 2});"},"startColumn":13,"startLine":53}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01306.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":54,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"});"},"startColumn":13,"startLine":53}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01307.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":54,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"});"},"startColumn":13,"startLine":53}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01308.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":54,"snippet":{"text":"            Long results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class);"},"startColumn":13,"startLine":52}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01308.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":89,"endLine":55,"snippet":{"text":"            response.getWriter().println(\"Your results are: \" + String.valueOf(results));"},"startColumn":13,"startLine":55}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01309.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":65,"endLine":53,"snippet":{"text":"            Object results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, new Object[] {}, String.class);"},"startColumn":13,"startLine":51}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01310.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":36,"endLine":53,"snippet":{"text":"            statement.execute(sql);"},"startColumn":13,"startLine":53}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01311.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":36,"endLine":53,"snippet":{"text":"            statement.execute(sql);"},"startColumn":13,"startLine":53}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01312.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":53,"snippet":{"text":"            statement.execute(sql, new String[] {\"username\", \"password\"});"},"startColumn":13,"startLine":53}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01313.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":53,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            int count = statement.executeUpdate(sql);"},"startColumn":13,"startLine":51}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01314.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":53,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            int count = statement.executeUpdate(sql);"},"startColumn":13,"startLine":51}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01315.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":53,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            int count = statement.executeUpdate(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},"startColumn":13,"startLine":51}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01316.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":65,"endLine":63,"snippet":{"text":"            String result = xp.evaluate(expression, xmlDocument);"},"startColumn":29,"startLine":63}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a XPath evaluate or compile command. This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized. Xpath injection could lead to unauthorized access to sensitive information in XML documents. Instead, thoroughly sanitize user input or use parameterized xpath queries if you can."},"properties":{},"ruleId":"java.lang.security.audit.tainted-xpath-from-http-request.tainted-xpath-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01316.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":88,"endLine":65,"snippet":{"text":"            response.getWriter().println(\"Your query results are: \" + result + \"<br/>\");"},"startColumn":13,"startLine":65}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01317.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":68,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":68}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01317.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":68,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":68}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01318.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":68,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":68}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01318.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":68,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":68}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01320.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":66,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":66}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01320.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":66,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":66}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01322.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":63,"snippet":{"text":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},"startColumn":69,"startLine":63}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01322.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":66,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":66}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01322.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":66,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":66}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01323.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":63,"snippet":{"text":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},"startColumn":69,"startLine":63}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01323.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":66,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":66}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01323.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":66,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":66}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01325.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":60,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":60}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01325.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":60,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":60}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01326.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":58,"endLine":64,"snippet":{"text":"                    ctx.search(base, filter, filters, sc);"},"startColumn":21,"startLine":64}}}],"message":{"text":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data."},"properties":{},"ruleId":"java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01326.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":81,"snippet":{"text":"                    response.getWriter()\n                            .println(\n                                    \"LDAP query results:<br>\"\n                                            + \"Record found with name \"\n                                            + attr.get()\n                                            + \"<br>\"\n                                            + \"Address: \"\n                                            + attr2.get()\n                                            + \"<br>\");"},"startColumn":21,"startLine":73}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01327.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":58,"endLine":64,"snippet":{"text":"                    ctx.search(base, filter, filters, sc);"},"startColumn":21,"startLine":64}}}],"message":{"text":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data."},"properties":{},"ruleId":"java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01327.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":81,"snippet":{"text":"                    response.getWriter()\n                            .println(\n                                    \"LDAP query results:<br>\"\n                                            + \"Record found with name \"\n                                            + attr.get()\n                                            + \"<br>\"\n                                            + \"Address: \"\n                                            + attr2.get()\n                                            + \"<br>\");"},"startColumn":21,"startLine":73}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01328.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":64,"endLine":69,"snippet":{"text":"            java.io.File fileTarget = new java.io.File(fileURI);"},"startColumn":26,"startLine":69}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01329.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":64,"endLine":72,"snippet":{"text":"            java.io.File fileTarget = new java.io.File(fileURI);"},"startColumn":26,"startLine":72}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01330.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":58,"snippet":{"text":"            fos = new java.io.FileOutputStream(new java.io.File(fileName));"},"startColumn":13,"startLine":58}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01330.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":71,"snippet":{"text":"                    fos = null;"},"startColumn":21,"startLine":71}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01331.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":58,"snippet":{"text":"            fos = new java.io.FileOutputStream(fileName);"},"startColumn":13,"startLine":58}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01331.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":71,"snippet":{"text":"                    fos = null;"},"startColumn":21,"startLine":71}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01333.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":53,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"MD5\");"},"startColumn":86,"startLine":53}}}],"message":{"text":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-md5.use-of-md5"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01334.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":53,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"MD5\");"},"startColumn":86,"startLine":53}}}],"message":{"text":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-md5.use-of-md5"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01335.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":79,"endLine":56,"snippet":{"text":"        out.format(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":56}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01336.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":67,"endLine":54,"snippet":{"text":"        response.getWriter().format(java.util.Locale.US, bar, obj);"},"startColumn":9,"startLine":54}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01337.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":54,"snippet":{"text":"        response.getWriter().format(bar, obj);"},"startColumn":9,"startLine":54}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01338.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":53,"snippet":{"text":"        response.getWriter().print(bar.toCharArray());"},"startColumn":9,"startLine":53}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01339.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":53,"snippet":{"text":"        response.getWriter().print(bar.toCharArray());"},"startColumn":9,"startLine":53}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01340.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":40,"endLine":53,"snippet":{"text":"        response.getWriter().print(bar);"},"startColumn":9,"startLine":53}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01341.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":54,"snippet":{"text":"        response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":54}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01342.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":54,"snippet":{"text":"        response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":54}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01343.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":67,"endLine":54,"snippet":{"text":"        response.getWriter().printf(java.util.Locale.US, bar, obj);"},"startColumn":9,"startLine":54}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01344.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":67,"endLine":54,"snippet":{"text":"        response.getWriter().printf(java.util.Locale.US, bar, obj);"},"startColumn":9,"startLine":54}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01345.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":42,"endLine":53,"snippet":{"text":"        response.getWriter().println(bar);"},"startColumn":9,"startLine":53}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01346.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":42,"endLine":53,"snippet":{"text":"        response.getWriter().println(bar);"},"startColumn":9,"startLine":53}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01347.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":42,"endLine":53,"snippet":{"text":"        response.getWriter().println(bar);"},"startColumn":9,"startLine":53}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01348.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":42,"endLine":53,"snippet":{"text":"        response.getWriter().println(bar);"},"startColumn":9,"startLine":53}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01349.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":42,"endLine":53,"snippet":{"text":"        response.getWriter().println(bar);"},"startColumn":9,"startLine":53}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01350.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":69,"endLine":56,"snippet":{"text":"            response.getWriter().write(bar.toCharArray(), 0, length);"},"startColumn":13,"startLine":56}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01351.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":69,"endLine":56,"snippet":{"text":"            response.getWriter().write(bar.toCharArray(), 0, length);"},"startColumn":13,"startLine":56}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01352.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":40,"endLine":53,"snippet":{"text":"        response.getWriter().write(bar);"},"startColumn":9,"startLine":53}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01353.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":36,"endLine":62,"snippet":{"text":"        argList.add(\"echo \" + bar);"},"startColumn":9,"startLine":62}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01360.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":43,"endLine":61,"snippet":{"text":"            Process p = r.exec(cmd + bar);"},"startColumn":13,"startLine":61}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01361.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":47,"endLine":61,"snippet":{"text":"            Process p = r.exec(args, argsEnv);"},"startColumn":13,"startLine":61}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01362.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":97,"endLine":75,"snippet":{"text":"            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":75}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01363.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":60,"snippet":{"text":"            Process p = r.exec(cmd, argsEnv);"},"startColumn":13,"startLine":60}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01364.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":60,"snippet":{"text":"            Process p = r.exec(cmd, argsEnv);"},"startColumn":13,"startLine":60}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01365.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":98,"endLine":63,"snippet":{"text":"            Process p =\n                    r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":62}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01374.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":59,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' with value: 10340 saved in session.\");"},"startColumn":9,"startLine":55}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01375.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":52,"endLine":53,"snippet":{"text":"        request.getSession().putValue(\"userid\", bar);"},"startColumn":49,"startLine":53}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"properties":{},"ruleId":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01375.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":59,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: 'userid' with value: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' saved in session.\");"},"startColumn":9,"startLine":55}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01376.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":53,"snippet":{"text":"        request.getSession().setAttribute(\"userid\", bar);"},"startColumn":53,"startLine":53}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"properties":{},"ruleId":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01376.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":59,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: 'userid' with value: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' saved in session.\");"},"startColumn":9,"startLine":55}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01377.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":53,"snippet":{"text":"        request.getSession().setAttribute(\"userid\", bar);"},"startColumn":53,"startLine":53}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"properties":{},"ruleId":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01377.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":59,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: 'userid' with value: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' saved in session.\");"},"startColumn":9,"startLine":55}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01378.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":66,"endLine":61,"snippet":{"text":"            java.sql.CallableStatement statement =\n                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);"},"startColumn":13,"startLine":57}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01379.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":73,"endLine":62,"snippet":{"text":"            java.sql.CallableStatement statement =\n                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},"startColumn":13,"startLine":57}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01380.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":73,"endLine":62,"snippet":{"text":"            java.sql.CallableStatement statement =\n                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},"startColumn":13,"startLine":57}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01381.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":58,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},"startColumn":13,"startLine":57}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01382.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":58,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},"startColumn":13,"startLine":57}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01383.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":66,"endLine":61,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);"},"startColumn":13,"startLine":57}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01384.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":72,"endLine":58,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(sql, new int[] {1, 2});"},"startColumn":13,"startLine":57}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01385.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":58,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"});"},"startColumn":13,"startLine":57}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01386.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":49,"endLine":58,"snippet":{"text":"            Integer results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Integer.class);"},"startColumn":13,"startLine":56}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01386.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":73,"endLine":59,"snippet":{"text":"            response.getWriter().println(\"Your results are: \" + results);"},"startColumn":13,"startLine":59}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01387.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":49,"endLine":58,"snippet":{"text":"            Integer results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Integer.class);"},"startColumn":13,"startLine":56}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01387.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":73,"endLine":59,"snippet":{"text":"            response.getWriter().println(\"Your results are: \" + results);"},"startColumn":13,"startLine":59}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01388.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":49,"endLine":58,"snippet":{"text":"            Integer results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Integer.class);"},"startColumn":13,"startLine":56}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01388.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":73,"endLine":59,"snippet":{"text":"            response.getWriter().println(\"Your results are: \" + results);"},"startColumn":13,"startLine":59}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01389.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":95,"endLine":55,"snippet":{"text":"            java.util.List<java.util.Map<String, Object>> list =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql);"},"startColumn":13,"startLine":54}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01390.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":58,"snippet":{"text":"            Long results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class);"},"startColumn":13,"startLine":56}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01390.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":89,"endLine":59,"snippet":{"text":"            response.getWriter().println(\"Your results are: \" + String.valueOf(results));"},"startColumn":13,"startLine":59}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01391.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":65,"endLine":57,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            java.sql.ResultSet rs = statement.executeQuery(sql);"},"startColumn":13,"startLine":55}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01391.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":65,"endLine":57,"snippet":{"text":"            java.sql.ResultSet rs = statement.executeQuery(sql);"},"startColumn":13,"startLine":57}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01392.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":65,"endLine":57,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            java.sql.ResultSet rs = statement.executeQuery(sql);"},"startColumn":13,"startLine":55}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01392.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":65,"endLine":57,"snippet":{"text":"            java.sql.ResultSet rs = statement.executeQuery(sql);"},"startColumn":13,"startLine":57}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01393.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":72,"endLine":57,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            int count = statement.executeUpdate(sql, new int[] {1, 2});"},"startColumn":13,"startLine":55}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01394.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":72,"endLine":57,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            int count = statement.executeUpdate(sql, new int[] {1, 2});"},"startColumn":13,"startLine":55}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01395.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":93,"endLine":57,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            int count = statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"});"},"startColumn":13,"startLine":55}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01396.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":93,"endLine":57,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            int count = statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"});"},"startColumn":13,"startLine":55}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01397.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":65,"endLine":67,"snippet":{"text":"            String result = xp.evaluate(expression, xmlDocument);"},"startColumn":29,"startLine":67}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a XPath evaluate or compile command. This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized. Xpath injection could lead to unauthorized access to sensitive information in XML documents. Instead, thoroughly sanitize user input or use parameterized xpath queries if you can."},"properties":{},"ruleId":"java.lang.security.audit.tainted-xpath-from-http-request.tainted-xpath-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01397.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":88,"endLine":69,"snippet":{"text":"            response.getWriter().println(\"Your query results are: \" + result + \"<br/>\");"},"startColumn":13,"startLine":69}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01398.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":76,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":76}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01398.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":76,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":76}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01402.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":58,"endLine":74,"snippet":{"text":"                    ctx.search(base, filter, filters, sc);"},"startColumn":21,"startLine":74}}}],"message":{"text":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data."},"properties":{},"ruleId":"java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01402.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":91,"snippet":{"text":"                    response.getWriter()\n                            .println(\n                                    \"LDAP query results:<br>\"\n                                            + \"Record found with name \"\n                                            + attr.get()\n                                            + \"<br>\"\n                                            + \"Address: \"\n                                            + attr2.get()\n                                            + \"<br>\");"},"startColumn":21,"startLine":83}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01403.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":64,"snippet":{"text":"        java.io.File fileTarget =\n                new java.io.File(\n                        new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR), bar);"},"startColumn":22,"startLine":62}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01404.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":69,"endLine":62,"snippet":{"text":"        java.io.File fileTarget = new java.io.File(bar, \"/Test.txt\");"},"startColumn":22,"startLine":62}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01405.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":74,"endLine":67,"snippet":{"text":"            fis = new java.io.FileInputStream(new java.io.File(fileName));"},"startColumn":19,"startLine":67}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01406.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":67,"snippet":{"text":"            fis = new java.io.FileInputStream(fileName);"},"startColumn":19,"startLine":67}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01407.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":92,"endLine":74,"snippet":{"text":"        java.io.FileOutputStream fos =\n                new java.io.FileOutputStream(new java.io.FileInputStream(fileName).getFD()); ) {"},"startColumn":34,"startLine":73}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01408.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":64,"endLine":68,"snippet":{"text":"            fos = new java.io.FileOutputStream(fileName, false);"},"startColumn":13,"startLine":68}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01408.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":81,"snippet":{"text":"                    fos = null;"},"startColumn":21,"startLine":81}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01411.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":101,"endLine":63,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"SHA1\", \"SUN\");"},"startColumn":13,"startLine":63}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01417.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":79,"endLine":66,"snippet":{"text":"        out.format(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":66}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01418.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":67,"endLine":64,"snippet":{"text":"        response.getWriter().format(java.util.Locale.US, bar, obj);"},"startColumn":9,"startLine":64}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01419.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":64,"snippet":{"text":"        response.getWriter().format(\"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":64}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01420.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":63,"snippet":{"text":"        response.getWriter().print(bar.toCharArray());"},"startColumn":9,"startLine":63}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01421.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":64,"snippet":{"text":"        response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":64}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01422.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":67,"endLine":64,"snippet":{"text":"        response.getWriter().printf(java.util.Locale.US, bar, obj);"},"startColumn":9,"startLine":64}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01423.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":64,"snippet":{"text":"        response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":64}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01424.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":64,"snippet":{"text":"        response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":64}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01425.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":42,"endLine":63,"snippet":{"text":"        response.getWriter().println(bar);"},"startColumn":9,"startLine":63}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01426.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":42,"endLine":63,"snippet":{"text":"        response.getWriter().println(bar);"},"startColumn":9,"startLine":63}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01427.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":42,"endLine":63,"snippet":{"text":"        response.getWriter().println(bar);"},"startColumn":9,"startLine":63}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01428.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":63,"snippet":{"text":"        response.getWriter().write(bar.toCharArray());"},"startColumn":9,"startLine":63}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01429.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":63,"snippet":{"text":"        response.getWriter().write(bar.toCharArray());"},"startColumn":9,"startLine":63}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01430.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":74,"snippet":{"text":"        ProcessBuilder pb = new ProcessBuilder(args);"},"startColumn":9,"startLine":74}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01430.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":36,"endLine":77,"snippet":{"text":"            Process p = pb.start();"},"startColumn":13,"startLine":77}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01437.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":62,"endLine":63,"snippet":{"text":"        response.getWriter().write(\"Parameter value: \" + bar);"},"startColumn":9,"startLine":63}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01438.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":62,"endLine":63,"snippet":{"text":"        response.getWriter().write(\"Parameter value: \" + bar);"},"startColumn":9,"startLine":63}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01439.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":62,"endLine":63,"snippet":{"text":"        response.getWriter().write(\"Parameter value: \" + bar);"},"startColumn":9,"startLine":63}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01440.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":43,"endLine":71,"snippet":{"text":"            Process p = r.exec(cmd + bar);"},"startColumn":13,"startLine":71}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01441.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":38,"endLine":83,"snippet":{"text":"            Process p = r.exec(args);"},"startColumn":13,"startLine":83}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01442.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":47,"endLine":71,"snippet":{"text":"            Process p = r.exec(args, argsEnv);"},"startColumn":13,"startLine":71}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01443.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":52,"endLine":72,"snippet":{"text":"            Process p = r.exec(cmd + bar, argsEnv);"},"startColumn":13,"startLine":72}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01444.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":70,"snippet":{"text":"            Process p = r.exec(cmd, argsEnv);"},"startColumn":13,"startLine":70}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01445.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":70,"snippet":{"text":"            Process p = r.exec(cmd, argsEnv);"},"startColumn":13,"startLine":70}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01446.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":98,"endLine":73,"snippet":{"text":"            Process p =\n                    r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":72}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01454.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":52,"endLine":63,"snippet":{"text":"        request.getSession().putValue(\"userid\", bar);"},"startColumn":49,"startLine":63}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"properties":{},"ruleId":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01454.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":69,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: 'userid' with value: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' saved in session.\");"},"startColumn":9,"startLine":65}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01455.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":52,"endLine":63,"snippet":{"text":"        request.getSession().putValue(\"userid\", bar);"},"startColumn":49,"startLine":63}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"properties":{},"ruleId":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01455.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":69,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: 'userid' with value: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' saved in session.\");"},"startColumn":9,"startLine":65}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01456.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":52,"endLine":63,"snippet":{"text":"        request.getSession().putValue(\"userid\", bar);"},"startColumn":49,"startLine":63}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"properties":{},"ruleId":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01456.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":69,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: 'userid' with value: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' saved in session.\");"},"startColumn":9,"startLine":65}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01457.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":52,"endLine":63,"snippet":{"text":"        request.getSession().putValue(\"userid\", bar);"},"startColumn":49,"startLine":63}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"properties":{},"ruleId":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01457.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":69,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: 'userid' with value: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' saved in session.\");"},"startColumn":9,"startLine":65}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01458.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":77,"endLine":69,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' with value: '10340' saved in session.\");"},"startColumn":9,"startLine":65}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01459.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":80,"endLine":67,"snippet":{"text":"            java.sql.CallableStatement statement = connection.prepareCall(sql);"},"startColumn":13,"startLine":67}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01460.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":66,"endLine":71,"snippet":{"text":"            java.sql.CallableStatement statement =\n                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);"},"startColumn":13,"startLine":67}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01461.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":66,"endLine":71,"snippet":{"text":"            java.sql.CallableStatement statement =\n                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);"},"startColumn":13,"startLine":67}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01462.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":73,"endLine":72,"snippet":{"text":"            java.sql.CallableStatement statement =\n                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},"startColumn":13,"startLine":67}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01463.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":73,"endLine":72,"snippet":{"text":"            java.sql.CallableStatement statement =\n                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},"startColumn":13,"startLine":67}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01464.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":73,"endLine":72,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},"startColumn":13,"startLine":67}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01465.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":82,"endLine":65,"snippet":{"text":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql);"},"startColumn":13,"startLine":65}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01466.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":32,"endLine":80,"snippet":{"text":"            java.util.List<String> results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(\n                            sql,\n                            new org.springframework.jdbc.core.RowMapper<String>() {\n                                @Override\n                                public String mapRow(java.sql.ResultSet rs, int rowNum)\n                                        throws java.sql.SQLException {\n                                    try {\n                                        return rs.getString(\"USERNAME\");\n                                    } catch (java.sql.SQLException e) {\n                                        if (org.owasp.benchmark.helpers.DatabaseHelper\n                                                .hideSQLErrors) {\n                                            return \"Error processing query.\";\n                                        } else throw e;\n                                    }\n                                }\n                            });"},"startColumn":13,"startLine":64}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01467.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":95,"endLine":65,"snippet":{"text":"            java.util.List<java.util.Map<String, Object>> list =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql);"},"startColumn":13,"startLine":64}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01468.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":95,"endLine":65,"snippet":{"text":"            java.util.List<java.util.Map<String, Object>> list =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql);"},"startColumn":13,"startLine":64}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01469.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":95,"endLine":65,"snippet":{"text":"            java.util.List<java.util.Map<String, Object>> list =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql);"},"startColumn":13,"startLine":64}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01470.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":94,"endLine":66,"snippet":{"text":"            java.util.Map<String, Object> results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForMap(sql);"},"startColumn":13,"startLine":65}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01471.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":65,"snippet":{"text":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);"},"startColumn":13,"startLine":65}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01472.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":53,"endLine":68,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            statement.addBatch(sql);\n            int[] counts = statement.executeBatch();"},"startColumn":13,"startLine":65}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01473.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":67,"snippet":{"text":"            statement.execute(sql, new int[] {1, 2});"},"startColumn":13,"startLine":67}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01474.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":67,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            int count = statement.executeUpdate(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},"startColumn":13,"startLine":65}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01475.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":67,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            int count = statement.executeUpdate(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},"startColumn":13,"startLine":65}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01476.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":93,"endLine":67,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            int count = statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"});"},"startColumn":13,"startLine":65}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01477.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":93,"endLine":67,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            int count = statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"});"},"startColumn":13,"startLine":65}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01478.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":99,"endLine":80,"snippet":{"text":"                            xp.compile(expression)\n                                    .evaluate(xmlDocument, javax.xml.xpath.XPathConstants.NODESET);"},"startColumn":29,"startLine":79}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a XPath evaluate or compile command. This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized. Xpath injection could lead to unauthorized access to sensitive information in XML documents. Instead, thoroughly sanitize user input or use parameterized xpath queries if you can."},"properties":{},"ruleId":"java.lang.security.audit.tainted-xpath-from-http-request.tainted-xpath-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01478.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":79,"endLine":86,"snippet":{"text":"                response.getWriter().println(value.getTextContent() + \"<br/>\");"},"startColumn":17,"startLine":86}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01479.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":99,"endLine":80,"snippet":{"text":"                            xp.compile(expression)\n                                    .evaluate(xmlDocument, javax.xml.xpath.XPathConstants.NODESET);"},"startColumn":29,"startLine":79}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a XPath evaluate or compile command. This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized. Xpath injection could lead to unauthorized access to sensitive information in XML documents. Instead, thoroughly sanitize user input or use parameterized xpath queries if you can."},"properties":{},"ruleId":"java.lang.security.audit.tainted-xpath-from-http-request.tainted-xpath-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01479.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":79,"endLine":86,"snippet":{"text":"                response.getWriter().println(value.getTextContent() + \"<br/>\");"},"startColumn":17,"startLine":86}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01480.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":66,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":66}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01480.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":66,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":66}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01483.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":64,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":64}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01483.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":64,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":64}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01484.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":64,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":64}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01484.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":64,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":64}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01486.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":61,"snippet":{"text":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},"startColumn":69,"startLine":61}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01486.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":64,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":64}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01486.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":64,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":64}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01489.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":58,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":58}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01489.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":58,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":58}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01490.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":58,"endLine":62,"snippet":{"text":"                    ctx.search(base, filter, filters, sc);"},"startColumn":21,"startLine":62}}}],"message":{"text":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data."},"properties":{},"ruleId":"java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01491.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":49,"endLine":61,"snippet":{"text":"                    ctx.search(base, filter, sc);"},"startColumn":21,"startLine":61}}}],"message":{"text":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data."},"properties":{},"ruleId":"java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01492.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":49,"endLine":61,"snippet":{"text":"                    ctx.search(base, filter, sc);"},"startColumn":21,"startLine":61}}}],"message":{"text":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data."},"properties":{},"ruleId":"java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01493.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":52,"snippet":{"text":"        java.io.File fileTarget =\n                new java.io.File(\n                        new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR), bar);"},"startColumn":22,"startLine":50}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01494.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":87,"endLine":51,"snippet":{"text":"        java.io.File fileTarget =\n                new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar);"},"startColumn":22,"startLine":50}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01495.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":64,"endLine":70,"snippet":{"text":"            java.io.File fileTarget = new java.io.File(fileURI);"},"startColumn":26,"startLine":70}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01496.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":55,"snippet":{"text":"            fis = new java.io.FileInputStream(fileName);"},"startColumn":19,"startLine":55}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01497.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":56,"snippet":{"text":"            fos = new java.io.FileOutputStream(new java.io.File(fileName));"},"startColumn":13,"startLine":56}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01497.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":69,"snippet":{"text":"                    fos = null;"},"startColumn":21,"startLine":69}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01498.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":92,"endLine":62,"snippet":{"text":"        java.io.FileOutputStream fos =\n                new java.io.FileOutputStream(new java.io.FileInputStream(fileName).getFD()); ) {"},"startColumn":34,"startLine":61}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01499.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":64,"endLine":56,"snippet":{"text":"            fos = new java.io.FileOutputStream(fileName, false);"},"startColumn":13,"startLine":56}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01499.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":69,"snippet":{"text":"                    fos = null;"},"startColumn":21,"startLine":69}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01501.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":49,"endLine":63,"snippet":{"text":"                    idc.search(base, filter, sc);"},"startColumn":21,"startLine":63}}}],"message":{"text":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data."},"properties":{},"ruleId":"java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01503.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":83,"endLine":56,"snippet":{"text":"                md = java.security.MessageDigest.getInstance(\"SHA1\", provider[0]);"},"startColumn":17,"startLine":56}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01503.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":77,"endLine":58,"snippet":{"text":"                md = java.security.MessageDigest.getInstance(\"SHA1\", \"SUN\");"},"startColumn":17,"startLine":58}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01504.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":51,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"MD5\");"},"startColumn":86,"startLine":51}}}],"message":{"text":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-md5.use-of-md5"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01517.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":62,"snippet":{"text":"        ProcessBuilder pb = new ProcessBuilder(args);"},"startColumn":9,"startLine":62}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01517.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":36,"endLine":65,"snippet":{"text":"            Process p = pb.start();"},"startColumn":13,"startLine":65}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01526.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":43,"endLine":59,"snippet":{"text":"            Process p = r.exec(cmd + bar);"},"startColumn":13,"startLine":59}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01527.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":43,"endLine":59,"snippet":{"text":"            Process p = r.exec(cmd + bar);"},"startColumn":13,"startLine":59}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01528.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":43,"endLine":59,"snippet":{"text":"            Process p = r.exec(cmd + bar);"},"startColumn":13,"startLine":59}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01529.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":38,"endLine":71,"snippet":{"text":"            Process p = r.exec(args);"},"startColumn":13,"startLine":71}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01530.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":47,"endLine":73,"snippet":{"text":"            Process p = r.exec(args, argsEnv);"},"startColumn":13,"startLine":73}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01531.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":47,"endLine":59,"snippet":{"text":"            Process p = r.exec(args, argsEnv);"},"startColumn":13,"startLine":59}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01532.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":98,"endLine":61,"snippet":{"text":"            Process p =\n                    r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":60}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01533.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":56,"snippet":{"text":"            Process p = r.exec(cmd, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":56}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01565.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":61,"snippet":{"text":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},"startColumn":69,"startLine":61}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01565.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":64,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":64}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01565.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":64,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":64}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01566.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":58,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":58}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01566.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":58,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":58}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01568.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":49,"endLine":61,"snippet":{"text":"                    ctx.search(base, filter, sc);"},"startColumn":21,"startLine":61}}}],"message":{"text":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data."},"properties":{},"ruleId":"java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01568.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":78,"snippet":{"text":"                    response.getWriter()\n                            .println(\n                                    \"LDAP query results:<br>\"\n                                            + \"Record found with name \"\n                                            + attr.get()\n                                            + \"<br>\"\n                                            + \"Address: \"\n                                            + attr2.get()\n                                            + \"<br>\");"},"startColumn":21,"startLine":70}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01569.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":49,"endLine":61,"snippet":{"text":"                    ctx.search(base, filter, sc);"},"startColumn":21,"startLine":61}}}],"message":{"text":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data."},"properties":{},"ruleId":"java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01569.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":78,"snippet":{"text":"                    response.getWriter()\n                            .println(\n                                    \"LDAP query results:<br>\"\n                                            + \"Record found with name \"\n                                            + attr.get()\n                                            + \"<br>\"\n                                            + \"Address: \"\n                                            + attr2.get()\n                                            + \"<br>\");"},"startColumn":21,"startLine":70}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01570.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":52,"snippet":{"text":"        java.io.File fileTarget =\n                new java.io.File(\n                        new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR), bar);"},"startColumn":22,"startLine":50}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01571.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":69,"endLine":50,"snippet":{"text":"        java.io.File fileTarget = new java.io.File(bar, \"/Test.txt\");"},"startColumn":22,"startLine":50}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01572.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":74,"endLine":55,"snippet":{"text":"            fis = new java.io.FileInputStream(new java.io.File(fileName));"},"startColumn":19,"startLine":55}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01573.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":74,"endLine":55,"snippet":{"text":"            fis = new java.io.FileInputStream(new java.io.File(fileName));"},"startColumn":19,"startLine":55}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01574.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":64,"endLine":56,"snippet":{"text":"            fos = new java.io.FileOutputStream(fileName, false);"},"startColumn":13,"startLine":56}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01574.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":69,"snippet":{"text":"                    fos = null;"},"startColumn":21,"startLine":69}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01577.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":51,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"MD5\");"},"startColumn":86,"startLine":51}}}],"message":{"text":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-md5.use-of-md5"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01583.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":79,"endLine":54,"snippet":{"text":"        out.format(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":54}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01584.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":67,"endLine":52,"snippet":{"text":"        response.getWriter().format(java.util.Locale.US, bar, obj);"},"startColumn":9,"startLine":52}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01585.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":52,"snippet":{"text":"        response.getWriter().format(bar, obj);"},"startColumn":9,"startLine":52}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01586.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":40,"endLine":51,"snippet":{"text":"        response.getWriter().print(bar);"},"startColumn":9,"startLine":51}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01587.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":67,"endLine":52,"snippet":{"text":"        response.getWriter().printf(java.util.Locale.US, bar, obj);"},"startColumn":9,"startLine":52}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01588.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":67,"endLine":52,"snippet":{"text":"        response.getWriter().printf(java.util.Locale.US, bar, obj);"},"startColumn":9,"startLine":52}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01589.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":52,"snippet":{"text":"        response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":52}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01590.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":52,"snippet":{"text":"        response.getWriter().printf(bar, obj);"},"startColumn":9,"startLine":52}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01591.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":52,"snippet":{"text":"        response.getWriter().printf(bar, obj);"},"startColumn":9,"startLine":52}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01592.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":42,"endLine":51,"snippet":{"text":"        response.getWriter().println(bar);"},"startColumn":9,"startLine":51}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01593.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":42,"endLine":51,"snippet":{"text":"        response.getWriter().println(bar);"},"startColumn":9,"startLine":51}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01594.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":42,"endLine":51,"snippet":{"text":"        response.getWriter().println(bar);"},"startColumn":9,"startLine":51}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01595.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":51,"snippet":{"text":"        response.getWriter().write(bar.toCharArray());"},"startColumn":9,"startLine":51}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01596.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":69,"endLine":54,"snippet":{"text":"            response.getWriter().write(bar.toCharArray(), 0, length);"},"startColumn":13,"startLine":54}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01597.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":69,"endLine":54,"snippet":{"text":"            response.getWriter().write(bar.toCharArray(), 0, length);"},"startColumn":13,"startLine":54}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01598.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":40,"endLine":51,"snippet":{"text":"        response.getWriter().write(bar);"},"startColumn":9,"startLine":51}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01599.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":40,"endLine":51,"snippet":{"text":"        response.getWriter().write(bar);"},"startColumn":9,"startLine":51}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01600.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":36,"endLine":60,"snippet":{"text":"        argList.add(\"echo \" + bar);"},"startColumn":9,"startLine":60}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01601.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":36,"endLine":60,"snippet":{"text":"        argList.add(\"echo \" + bar);"},"startColumn":9,"startLine":60}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01606.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":43,"endLine":59,"snippet":{"text":"            Process p = r.exec(cmd + bar);"},"startColumn":13,"startLine":59}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01607.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":38,"endLine":71,"snippet":{"text":"            Process p = r.exec(args);"},"startColumn":13,"startLine":71}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01608.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":97,"endLine":59,"snippet":{"text":"            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":59}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01609.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":98,"endLine":61,"snippet":{"text":"            Process p =\n                    r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":60}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01610.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":98,"endLine":61,"snippet":{"text":"            Process p =\n                    r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":60}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01615.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":57,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' with value: 10340 saved in session.\");"},"startColumn":9,"startLine":53}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01616.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":52,"endLine":51,"snippet":{"text":"        request.getSession().putValue(\"userid\", bar);"},"startColumn":49,"startLine":51}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"properties":{},"ruleId":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01616.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":57,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: 'userid' with value: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' saved in session.\");"},"startColumn":9,"startLine":53}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01617.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":77,"endLine":57,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' with value: '10340' saved in session.\");"},"startColumn":9,"startLine":53}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01618.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":51,"snippet":{"text":"        request.getSession().setAttribute(\"userid\", bar);"},"startColumn":53,"startLine":51}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"properties":{},"ruleId":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01618.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":57,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: 'userid' with value: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' saved in session.\");"},"startColumn":9,"startLine":53}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01619.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":51,"snippet":{"text":"        request.getSession().setAttribute(\"userid\", bar);"},"startColumn":53,"startLine":51}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"properties":{},"ruleId":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01619.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":57,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: 'userid' with value: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' saved in session.\");"},"startColumn":9,"startLine":53}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01620.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":80,"endLine":55,"snippet":{"text":"            java.sql.CallableStatement statement = connection.prepareCall(sql);"},"startColumn":13,"startLine":55}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01621.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":66,"endLine":59,"snippet":{"text":"            java.sql.CallableStatement statement =\n                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);"},"startColumn":13,"startLine":55}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01622.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":73,"endLine":60,"snippet":{"text":"            java.sql.CallableStatement statement =\n                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},"startColumn":13,"startLine":55}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01623.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":73,"endLine":60,"snippet":{"text":"            java.sql.CallableStatement statement =\n                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},"startColumn":13,"startLine":55}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01624.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":53,"snippet":{"text":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);"},"startColumn":13,"startLine":53}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01625.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":56,"snippet":{"text":"            Long results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class);"},"startColumn":13,"startLine":54}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01625.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":89,"endLine":57,"snippet":{"text":"            response.getWriter().println(\"Your results are: \" + String.valueOf(results));"},"startColumn":13,"startLine":57}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01626.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":53,"endLine":56,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            statement.addBatch(sql);\n            int[] counts = statement.executeBatch();"},"startColumn":13,"startLine":53}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01627.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":55,"snippet":{"text":"            statement.execute(sql, new String[] {\"username\", \"password\"});"},"startColumn":13,"startLine":55}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01628.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":55,"snippet":{"text":"            statement.execute(sql, new String[] {\"username\", \"password\"});"},"startColumn":13,"startLine":55}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01629.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":55,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            int count = statement.executeUpdate(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},"startColumn":13,"startLine":53}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01630.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":72,"endLine":55,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            int count = statement.executeUpdate(sql, new int[] {1, 2});"},"startColumn":13,"startLine":53}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01631.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":93,"endLine":55,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            int count = statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"});"},"startColumn":13,"startLine":53}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01632.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":99,"endLine":68,"snippet":{"text":"                            xp.compile(expression)\n                                    .evaluate(xmlDocument, javax.xml.xpath.XPathConstants.NODESET);"},"startColumn":29,"startLine":67}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a XPath evaluate or compile command. This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized. Xpath injection could lead to unauthorized access to sensitive information in XML documents. Instead, thoroughly sanitize user input or use parameterized xpath queries if you can."},"properties":{},"ruleId":"java.lang.security.audit.tainted-xpath-from-http-request.tainted-xpath-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01632.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":79,"endLine":74,"snippet":{"text":"                response.getWriter().println(value.getTextContent() + \"<br/>\");"},"startColumn":17,"startLine":74}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01633.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":65,"endLine":65,"snippet":{"text":"            String result = xp.evaluate(expression, xmlDocument);"},"startColumn":29,"startLine":65}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a XPath evaluate or compile command. This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized. Xpath injection could lead to unauthorized access to sensitive information in XML documents. Instead, thoroughly sanitize user input or use parameterized xpath queries if you can."},"properties":{},"ruleId":"java.lang.security.audit.tainted-xpath-from-http-request.tainted-xpath-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01633.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":88,"endLine":67,"snippet":{"text":"            response.getWriter().println(\"Your query results are: \" + result + \"<br/>\");"},"startColumn":13,"startLine":67}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01634.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":88,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":88}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01634.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":88,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":88}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01637.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":86,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":86}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01637.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":86,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":86}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01638.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":83,"snippet":{"text":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},"startColumn":69,"startLine":83}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01638.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":86,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":86}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01638.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":86,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":86}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01639.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":83,"snippet":{"text":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},"startColumn":69,"startLine":83}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01639.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":86,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":86}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01639.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":86,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":86}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01641.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":80,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":80}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01641.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":80,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":80}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01642.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":87,"endLine":73,"snippet":{"text":"        java.io.File fileTarget =\n                new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar);"},"startColumn":22,"startLine":72}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01643.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":64,"endLine":89,"snippet":{"text":"            java.io.File fileTarget = new java.io.File(fileURI);"},"startColumn":26,"startLine":89}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01644.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":74,"endLine":77,"snippet":{"text":"            fis = new java.io.FileInputStream(new java.io.File(fileName));"},"startColumn":19,"startLine":77}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01645.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":77,"snippet":{"text":"            fis = new java.io.FileInputStream(fileName);"},"startColumn":19,"startLine":77}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01646.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":78,"snippet":{"text":"            fos = new java.io.FileOutputStream(new java.io.File(fileName));"},"startColumn":13,"startLine":78}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01646.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":91,"snippet":{"text":"                    fos = null;"},"startColumn":21,"startLine":91}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01647.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":64,"endLine":78,"snippet":{"text":"            fos = new java.io.FileOutputStream(fileName, false);"},"startColumn":13,"startLine":78}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01647.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":91,"snippet":{"text":"                    fos = null;"},"startColumn":21,"startLine":91}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01649.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":101,"endLine":73,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"SHA1\", \"SUN\");"},"startColumn":13,"startLine":73}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01650.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":101,"endLine":73,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"SHA1\", \"SUN\");"},"startColumn":13,"startLine":73}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01651.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":101,"endLine":73,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"SHA1\", \"SUN\");"},"startColumn":13,"startLine":73}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01653.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":73,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"MD5\");"},"startColumn":86,"startLine":73}}}],"message":{"text":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-md5.use-of-md5"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01657.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":79,"endLine":76,"snippet":{"text":"        out.format(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":76}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01658.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":74,"snippet":{"text":"        response.getWriter().format(\"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":74}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01659.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":40,"endLine":73,"snippet":{"text":"        response.getWriter().print(bar);"},"startColumn":9,"startLine":73}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01660.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":40,"endLine":73,"snippet":{"text":"        response.getWriter().print(bar);"},"startColumn":9,"startLine":73}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01661.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":74,"snippet":{"text":"        response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":74}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01662.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":74,"snippet":{"text":"        response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":74}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01663.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":74,"snippet":{"text":"        response.getWriter().printf(bar, obj);"},"startColumn":9,"startLine":74}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01664.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":73,"snippet":{"text":"        response.getWriter().println(bar.toCharArray());"},"startColumn":9,"startLine":73}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01665.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":73,"snippet":{"text":"        response.getWriter().println(bar.toCharArray());"},"startColumn":9,"startLine":73}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01666.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":73,"snippet":{"text":"        response.getWriter().println(bar.toCharArray());"},"startColumn":9,"startLine":73}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01667.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":42,"endLine":73,"snippet":{"text":"        response.getWriter().println(bar);"},"startColumn":9,"startLine":73}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01668.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":42,"endLine":73,"snippet":{"text":"        response.getWriter().println(bar);"},"startColumn":9,"startLine":73}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01669.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":42,"endLine":73,"snippet":{"text":"        response.getWriter().println(bar);"},"startColumn":9,"startLine":73}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01670.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":73,"snippet":{"text":"        response.getWriter().write(bar.toCharArray());"},"startColumn":9,"startLine":73}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01671.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":40,"endLine":73,"snippet":{"text":"        response.getWriter().write(bar);"},"startColumn":9,"startLine":73}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01673.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":36,"endLine":82,"snippet":{"text":"        argList.add(\"echo \" + bar);"},"startColumn":9,"startLine":82}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01674.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":84,"snippet":{"text":"        ProcessBuilder pb = new ProcessBuilder(args);"},"startColumn":9,"startLine":84}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01674.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":36,"endLine":87,"snippet":{"text":"            Process p = pb.start();"},"startColumn":13,"startLine":87}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01685.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":47,"endLine":95,"snippet":{"text":"            Process p = r.exec(args, argsEnv);"},"startColumn":13,"startLine":95}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01686.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":47,"endLine":81,"snippet":{"text":"            Process p = r.exec(args, argsEnv);"},"startColumn":13,"startLine":81}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01687.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":97,"endLine":95,"snippet":{"text":"            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":95}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01688.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":52,"endLine":82,"snippet":{"text":"            Process p = r.exec(cmd + bar, argsEnv);"},"startColumn":13,"startLine":82}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01689.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":52,"endLine":82,"snippet":{"text":"            Process p = r.exec(cmd + bar, argsEnv);"},"startColumn":13,"startLine":82}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01690.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":80,"snippet":{"text":"            Process p = r.exec(cmd, argsEnv);"},"startColumn":13,"startLine":80}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01691.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":80,"snippet":{"text":"            Process p = r.exec(cmd, argsEnv);"},"startColumn":13,"startLine":80}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01692.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":98,"endLine":83,"snippet":{"text":"            Process p =\n                    r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":82}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01693.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":98,"endLine":83,"snippet":{"text":"            Process p =\n                    r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":82}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01708.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":79,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' with value: 10340 saved in session.\");"},"startColumn":9,"startLine":75}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01709.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":52,"endLine":73,"snippet":{"text":"        request.getSession().putValue(\"userid\", bar);"},"startColumn":49,"startLine":73}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"properties":{},"ruleId":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01709.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":79,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: 'userid' with value: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' saved in session.\");"},"startColumn":9,"startLine":75}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01710.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":73,"snippet":{"text":"        request.getSession().setAttribute(\"userid\", bar);"},"startColumn":53,"startLine":73}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"properties":{},"ruleId":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01710.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":79,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: 'userid' with value: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' saved in session.\");"},"startColumn":9,"startLine":75}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01711.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":73,"snippet":{"text":"        request.getSession().setAttribute(\"userid\", bar);"},"startColumn":53,"startLine":73}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"properties":{},"ruleId":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01711.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":79,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: 'userid' with value: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' saved in session.\");"},"startColumn":9,"startLine":75}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01712.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":80,"endLine":77,"snippet":{"text":"            java.sql.CallableStatement statement = connection.prepareCall(sql);"},"startColumn":13,"startLine":77}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01713.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":80,"endLine":77,"snippet":{"text":"            java.sql.CallableStatement statement = connection.prepareCall(sql);"},"startColumn":13,"startLine":77}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01714.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":66,"endLine":81,"snippet":{"text":"            java.sql.CallableStatement statement =\n                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);"},"startColumn":13,"startLine":77}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01715.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":66,"endLine":81,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);"},"startColumn":13,"startLine":77}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01716.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":66,"endLine":81,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);"},"startColumn":13,"startLine":77}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01717.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":73,"endLine":82,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},"startColumn":13,"startLine":77}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01718.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":73,"endLine":82,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},"startColumn":13,"startLine":77}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01719.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":78,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"});"},"startColumn":13,"startLine":77}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01720.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":82,"endLine":75,"snippet":{"text":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql);"},"startColumn":13,"startLine":75}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01721.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":32,"endLine":90,"snippet":{"text":"            java.util.List<String> results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(\n                            sql,\n                            new org.springframework.jdbc.core.RowMapper<String>() {\n                                @Override\n                                public String mapRow(java.sql.ResultSet rs, int rowNum)\n                                        throws java.sql.SQLException {\n                                    try {\n                                        return rs.getString(\"USERNAME\");\n                                    } catch (java.sql.SQLException e) {\n                                        if (org.owasp.benchmark.helpers.DatabaseHelper\n                                                .hideSQLErrors) {\n                                            return \"Error processing query.\";\n                                        } else throw e;\n                                    }\n                                }\n                            });"},"startColumn":13,"startLine":74}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01722.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":32,"endLine":90,"snippet":{"text":"            java.util.List<String> results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(\n                            sql,\n                            new org.springframework.jdbc.core.RowMapper<String>() {\n                                @Override\n                                public String mapRow(java.sql.ResultSet rs, int rowNum)\n                                        throws java.sql.SQLException {\n                                    try {\n                                        return rs.getString(\"USERNAME\");\n                                    } catch (java.sql.SQLException e) {\n                                        if (org.owasp.benchmark.helpers.DatabaseHelper\n                                                .hideSQLErrors) {\n                                            return \"Error processing query.\";\n                                        } else throw e;\n                                    }\n                                }\n                            });"},"startColumn":13,"startLine":74}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01723.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":49,"endLine":78,"snippet":{"text":"            Integer results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Integer.class);"},"startColumn":13,"startLine":76}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01723.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":73,"endLine":79,"snippet":{"text":"            response.getWriter().println(\"Your results are: \" + results);"},"startColumn":13,"startLine":79}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01724.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":95,"endLine":75,"snippet":{"text":"            java.util.List<java.util.Map<String, Object>> list =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql);"},"startColumn":13,"startLine":74}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01725.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":65,"endLine":77,"snippet":{"text":"            Object results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, new Object[] {}, String.class);"},"startColumn":13,"startLine":75}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01726.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":97,"endLine":75,"snippet":{"text":"            org.springframework.jdbc.support.rowset.SqlRowSet results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql);"},"startColumn":13,"startLine":74}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01727.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":75,"snippet":{"text":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);"},"startColumn":13,"startLine":75}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01728.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":53,"endLine":78,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            statement.addBatch(sql);\n            int[] counts = statement.executeBatch();"},"startColumn":13,"startLine":75}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01729.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":53,"endLine":78,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            statement.addBatch(sql);\n            int[] counts = statement.executeBatch();"},"startColumn":13,"startLine":75}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01730.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":78,"endLine":77,"snippet":{"text":"            statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},"startColumn":13,"startLine":77}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01731.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":77,"snippet":{"text":"            statement.execute(sql, new String[] {\"username\", \"password\"});"},"startColumn":13,"startLine":77}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01732.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":65,"endLine":77,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            java.sql.ResultSet rs = statement.executeQuery(sql);"},"startColumn":13,"startLine":75}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01732.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":65,"endLine":77,"snippet":{"text":"            java.sql.ResultSet rs = statement.executeQuery(sql);"},"startColumn":13,"startLine":77}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01733.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":93,"endLine":77,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            int count = statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"});"},"startColumn":13,"startLine":75}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01734.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":99,"endLine":90,"snippet":{"text":"                            xp.compile(expression)\n                                    .evaluate(xmlDocument, javax.xml.xpath.XPathConstants.NODESET);"},"startColumn":29,"startLine":89}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a XPath evaluate or compile command. This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized. Xpath injection could lead to unauthorized access to sensitive information in XML documents. Instead, thoroughly sanitize user input or use parameterized xpath queries if you can."},"properties":{},"ruleId":"java.lang.security.audit.tainted-xpath-from-http-request.tainted-xpath-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01734.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":79,"endLine":96,"snippet":{"text":"                response.getWriter().println(value.getTextContent() + \"<br/>\");"},"startColumn":17,"startLine":96}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01735.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":99,"endLine":90,"snippet":{"text":"                            xp.compile(expression)\n                                    .evaluate(xmlDocument, javax.xml.xpath.XPathConstants.NODESET);"},"startColumn":29,"startLine":89}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a XPath evaluate or compile command. This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized. Xpath injection could lead to unauthorized access to sensitive information in XML documents. Instead, thoroughly sanitize user input or use parameterized xpath queries if you can."},"properties":{},"ruleId":"java.lang.security.audit.tainted-xpath-from-http-request.tainted-xpath-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01735.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":79,"endLine":96,"snippet":{"text":"                response.getWriter().println(value.getTextContent() + \"<br/>\");"},"startColumn":17,"startLine":96}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01736.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":65,"endLine":87,"snippet":{"text":"            String result = xp.evaluate(expression, xmlDocument);"},"startColumn":29,"startLine":87}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a XPath evaluate or compile command. This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized. Xpath injection could lead to unauthorized access to sensitive information in XML documents. Instead, thoroughly sanitize user input or use parameterized xpath queries if you can."},"properties":{},"ruleId":"java.lang.security.audit.tainted-xpath-from-http-request.tainted-xpath-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01736.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":88,"endLine":89,"snippet":{"text":"            response.getWriter().println(\"Your query results are: \" + result + \"<br/>\");"},"startColumn":13,"startLine":89}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01740.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":57,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":57}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01740.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":57,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":57}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01741.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":57,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":57}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01741.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":57,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":57}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01742.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":57,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":57}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01742.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":57,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":57}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01743.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":58,"endLine":61,"snippet":{"text":"                    ctx.search(base, filter, filters, sc);"},"startColumn":21,"startLine":61}}}],"message":{"text":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data."},"properties":{},"ruleId":"java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01744.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":87,"endLine":50,"snippet":{"text":"        java.io.File fileTarget =\n                new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar);"},"startColumn":22,"startLine":49}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01745.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":69,"endLine":49,"snippet":{"text":"        java.io.File fileTarget = new java.io.File(bar, \"/Test.txt\");"},"startColumn":22,"startLine":49}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01746.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":64,"endLine":66,"snippet":{"text":"            java.io.File fileTarget = new java.io.File(fileURI);"},"startColumn":26,"startLine":66}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01747.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":64,"endLine":69,"snippet":{"text":"            java.io.File fileTarget = new java.io.File(fileURI);"},"startColumn":26,"startLine":69}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01748.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":74,"endLine":54,"snippet":{"text":"            fis = new java.io.FileInputStream(new java.io.File(fileName));"},"startColumn":19,"startLine":54}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01749.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":74,"endLine":54,"snippet":{"text":"            fis = new java.io.FileInputStream(new java.io.File(fileName));"},"startColumn":19,"startLine":54}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01750.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":54,"snippet":{"text":"            fis = new java.io.FileInputStream(fileName);"},"startColumn":19,"startLine":54}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01751.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":82,"endLine":55,"snippet":{"text":"            fos = new java.io.FileOutputStream(new java.io.File(fileName), false);"},"startColumn":13,"startLine":55}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01751.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":68,"snippet":{"text":"                    fos = null;"},"startColumn":21,"startLine":68}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01752.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":92,"endLine":61,"snippet":{"text":"        java.io.FileOutputStream fos =\n                new java.io.FileOutputStream(new java.io.FileInputStream(fileName).getFD()); ) {"},"startColumn":34,"startLine":60}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01753.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":58,"endLine":63,"snippet":{"text":"                    idc.search(base, filter, filters, sc);"},"startColumn":21,"startLine":63}}}],"message":{"text":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data."},"properties":{},"ruleId":"java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01754.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":58,"endLine":63,"snippet":{"text":"                    idc.search(base, filter, filters, sc);"},"startColumn":21,"startLine":63}}}],"message":{"text":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data."},"properties":{},"ruleId":"java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01755.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":49,"endLine":62,"snippet":{"text":"                    idc.search(base, filter, sc);"},"startColumn":21,"startLine":62}}}],"message":{"text":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data."},"properties":{},"ruleId":"java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01756.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":49,"endLine":62,"snippet":{"text":"                    idc.search(base, filter, sc);"},"startColumn":21,"startLine":62}}}],"message":{"text":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data."},"properties":{},"ruleId":"java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01757.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":83,"endLine":55,"snippet":{"text":"                md = java.security.MessageDigest.getInstance(\"SHA1\", provider[0]);"},"startColumn":17,"startLine":55}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01757.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":77,"endLine":57,"snippet":{"text":"                md = java.security.MessageDigest.getInstance(\"SHA1\", \"SUN\");"},"startColumn":17,"startLine":57}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01761.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":101,"endLine":50,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"SHA1\", \"SUN\");"},"startColumn":13,"startLine":50}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01780.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":61,"snippet":{"text":"        ProcessBuilder pb = new ProcessBuilder(args);"},"startColumn":9,"startLine":61}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01780.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":36,"endLine":64,"snippet":{"text":"            Process p = pb.start();"},"startColumn":13,"startLine":64}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01791.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":43,"endLine":58,"snippet":{"text":"            Process p = r.exec(cmd + bar);"},"startColumn":13,"startLine":58}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01792.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":47,"endLine":72,"snippet":{"text":"            Process p = r.exec(args, argsEnv);"},"startColumn":13,"startLine":72}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01793.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":47,"endLine":58,"snippet":{"text":"            Process p = r.exec(args, argsEnv);"},"startColumn":13,"startLine":58}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01794.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":97,"endLine":72,"snippet":{"text":"            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":72}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01795.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":97,"endLine":58,"snippet":{"text":"            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":58}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01796.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":97,"endLine":58,"snippet":{"text":"            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":58}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01822.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":83,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":83}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01822.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":83,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":83}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01823.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":83,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":83}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01823.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":83,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":83}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01829.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":75,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":75}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01829.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":75,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":75}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01830.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":75,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":75}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01830.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":75,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":75}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01831.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":58,"endLine":79,"snippet":{"text":"                    ctx.search(base, filter, filters, sc);"},"startColumn":21,"startLine":79}}}],"message":{"text":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data."},"properties":{},"ruleId":"java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01831.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":96,"snippet":{"text":"                    response.getWriter()\n                            .println(\n                                    \"LDAP query results:<br>\"\n                                            + \"Record found with name \"\n                                            + attr.get()\n                                            + \"<br>\"\n                                            + \"Address: \"\n                                            + attr2.get()\n                                            + \"<br>\");"},"startColumn":21,"startLine":88}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01832.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":58,"endLine":79,"snippet":{"text":"                    ctx.search(base, filter, filters, sc);"},"startColumn":21,"startLine":79}}}],"message":{"text":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data."},"properties":{},"ruleId":"java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01832.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":96,"snippet":{"text":"                    response.getWriter()\n                            .println(\n                                    \"LDAP query results:<br>\"\n                                            + \"Record found with name \"\n                                            + attr.get()\n                                            + \"<br>\"\n                                            + \"Address: \"\n                                            + attr2.get()\n                                            + \"<br>\");"},"startColumn":21,"startLine":88}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01833.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":87,"endLine":68,"snippet":{"text":"        java.io.File fileTarget =\n                new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar);"},"startColumn":22,"startLine":67}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01834.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":87,"endLine":68,"snippet":{"text":"        java.io.File fileTarget =\n                new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar);"},"startColumn":22,"startLine":67}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01835.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":87,"endLine":68,"snippet":{"text":"        java.io.File fileTarget =\n                new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar);"},"startColumn":22,"startLine":67}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01836.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":64,"endLine":84,"snippet":{"text":"            java.io.File fileTarget = new java.io.File(fileURI);"},"startColumn":26,"startLine":84}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01837.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":64,"endLine":87,"snippet":{"text":"            java.io.File fileTarget = new java.io.File(fileURI);"},"startColumn":26,"startLine":87}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01838.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":74,"endLine":72,"snippet":{"text":"            fis = new java.io.FileInputStream(new java.io.File(fileName));"},"startColumn":19,"startLine":72}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01839.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":82,"endLine":73,"snippet":{"text":"            fos = new java.io.FileOutputStream(new java.io.File(fileName), false);"},"startColumn":13,"startLine":73}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01839.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":86,"snippet":{"text":"                    fos = null;"},"startColumn":21,"startLine":86}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01840.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":73,"snippet":{"text":"            fos = new java.io.FileOutputStream(new java.io.File(fileName));"},"startColumn":13,"startLine":73}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01840.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":86,"snippet":{"text":"                    fos = null;"},"startColumn":21,"startLine":86}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01841.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":92,"endLine":79,"snippet":{"text":"        java.io.FileOutputStream fos =\n                new java.io.FileOutputStream(new java.io.FileInputStream(fileName).getFD()); ) {"},"startColumn":34,"startLine":78}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01844.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":83,"endLine":73,"snippet":{"text":"                md = java.security.MessageDigest.getInstance(\"SHA1\", provider[0]);"},"startColumn":17,"startLine":73}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01844.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":77,"endLine":75,"snippet":{"text":"                md = java.security.MessageDigest.getInstance(\"SHA1\", \"SUN\");"},"startColumn":17,"startLine":75}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01845.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":83,"endLine":73,"snippet":{"text":"                md = java.security.MessageDigest.getInstance(\"SHA1\", provider[0]);"},"startColumn":17,"startLine":73}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01845.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":77,"endLine":75,"snippet":{"text":"                md = java.security.MessageDigest.getInstance(\"SHA1\", \"SUN\");"},"startColumn":17,"startLine":75}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01846.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":83,"endLine":73,"snippet":{"text":"                md = java.security.MessageDigest.getInstance(\"SHA1\", provider[0]);"},"startColumn":17,"startLine":73}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01846.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":77,"endLine":75,"snippet":{"text":"                md = java.security.MessageDigest.getInstance(\"SHA1\", \"SUN\");"},"startColumn":17,"startLine":75}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01850.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":36,"endLine":77,"snippet":{"text":"        argList.add(\"echo \" + bar);"},"startColumn":9,"startLine":77}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01851.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":36,"endLine":77,"snippet":{"text":"        argList.add(\"echo \" + bar);"},"startColumn":9,"startLine":77}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01852.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":79,"snippet":{"text":"        ProcessBuilder pb = new ProcessBuilder(args);"},"startColumn":9,"startLine":79}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01852.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":36,"endLine":82,"snippet":{"text":"            Process p = pb.start();"},"startColumn":13,"startLine":82}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01864.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":52,"endLine":77,"snippet":{"text":"            Process p = r.exec(cmd + bar, argsEnv);"},"startColumn":13,"startLine":77}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01865.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":52,"endLine":77,"snippet":{"text":"            Process p = r.exec(cmd + bar, argsEnv);"},"startColumn":13,"startLine":77}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01872.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":74,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' with value: 10340 saved in session.\");"},"startColumn":9,"startLine":70}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01873.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":52,"endLine":68,"snippet":{"text":"        request.getSession().putValue(\"userid\", bar);"},"startColumn":49,"startLine":68}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"properties":{},"ruleId":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01873.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":74,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: 'userid' with value: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' saved in session.\");"},"startColumn":9,"startLine":70}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01874.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":77,"endLine":74,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' with value: '10340' saved in session.\");"},"startColumn":9,"startLine":70}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01875.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":77,"endLine":74,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' with value: '10340' saved in session.\");"},"startColumn":9,"startLine":70}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01876.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":68,"snippet":{"text":"        request.getSession().setAttribute(\"userid\", bar);"},"startColumn":53,"startLine":68}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"properties":{},"ruleId":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01876.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":74,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: 'userid' with value: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' saved in session.\");"},"startColumn":9,"startLine":70}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01877.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":66,"endLine":77,"snippet":{"text":"            java.sql.CallableStatement statement =\n                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);"},"startColumn":13,"startLine":73}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01878.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":73,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},"startColumn":13,"startLine":72}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01879.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":66,"endLine":76,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);"},"startColumn":13,"startLine":72}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01880.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":73,"endLine":77,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},"startColumn":13,"startLine":72}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01881.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":70,"snippet":{"text":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);"},"startColumn":13,"startLine":70}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01882.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":32,"endLine":85,"snippet":{"text":"            java.util.List<String> results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(\n                            sql,\n                            new org.springframework.jdbc.core.RowMapper<String>() {\n                                @Override\n                                public String mapRow(java.sql.ResultSet rs, int rowNum)\n                                        throws java.sql.SQLException {\n                                    try {\n                                        return rs.getString(\"USERNAME\");\n                                    } catch (java.sql.SQLException e) {\n                                        if (org.owasp.benchmark.helpers.DatabaseHelper\n                                                .hideSQLErrors) {\n                                            return \"Error processing query.\";\n                                        } else throw e;\n                                    }\n                                }\n                            });"},"startColumn":13,"startLine":69}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01883.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":97,"endLine":70,"snippet":{"text":"            org.springframework.jdbc.support.rowset.SqlRowSet results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql);"},"startColumn":13,"startLine":69}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01884.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":70,"snippet":{"text":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);"},"startColumn":13,"startLine":70}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01885.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":78,"endLine":72,"snippet":{"text":"            statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},"startColumn":13,"startLine":72}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01886.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":72,"snippet":{"text":"            statement.execute(sql, new String[] {\"username\", \"password\"});"},"startColumn":13,"startLine":72}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01887.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":72,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            int count = statement.executeUpdate(sql);"},"startColumn":13,"startLine":70}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01888.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":72,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            int count = statement.executeUpdate(sql);"},"startColumn":13,"startLine":70}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01889.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":72,"endLine":72,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            int count = statement.executeUpdate(sql, new int[] {1, 2});"},"startColumn":13,"startLine":70}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01890.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":93,"endLine":72,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            int count = statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"});"},"startColumn":13,"startLine":70}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01891.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":93,"endLine":72,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            int count = statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"});"},"startColumn":13,"startLine":70}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01892.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":99,"endLine":85,"snippet":{"text":"                            xp.compile(expression)\n                                    .evaluate(xmlDocument, javax.xml.xpath.XPathConstants.NODESET);"},"startColumn":29,"startLine":84}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a XPath evaluate or compile command. This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized. Xpath injection could lead to unauthorized access to sensitive information in XML documents. Instead, thoroughly sanitize user input or use parameterized xpath queries if you can."},"properties":{},"ruleId":"java.lang.security.audit.tainted-xpath-from-http-request.tainted-xpath-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01892.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":79,"endLine":91,"snippet":{"text":"                response.getWriter().println(value.getTextContent() + \"<br/>\");"},"startColumn":17,"startLine":91}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01893.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":99,"endLine":85,"snippet":{"text":"                            xp.compile(expression)\n                                    .evaluate(xmlDocument, javax.xml.xpath.XPathConstants.NODESET);"},"startColumn":29,"startLine":84}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a XPath evaluate or compile command. This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized. Xpath injection could lead to unauthorized access to sensitive information in XML documents. Instead, thoroughly sanitize user input or use parameterized xpath queries if you can."},"properties":{},"ruleId":"java.lang.security.audit.tainted-xpath-from-http-request.tainted-xpath-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01893.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":79,"endLine":91,"snippet":{"text":"                response.getWriter().println(value.getTextContent() + \"<br/>\");"},"startColumn":17,"startLine":91}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01894.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":65,"endLine":82,"snippet":{"text":"            String result = xp.evaluate(expression, xmlDocument);"},"startColumn":29,"startLine":82}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a XPath evaluate or compile command. This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized. Xpath injection could lead to unauthorized access to sensitive information in XML documents. Instead, thoroughly sanitize user input or use parameterized xpath queries if you can."},"properties":{},"ruleId":"java.lang.security.audit.tainted-xpath-from-http-request.tainted-xpath-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01894.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":88,"endLine":84,"snippet":{"text":"            response.getWriter().println(\"Your query results are: \" + result + \"<br/>\");"},"startColumn":13,"startLine":84}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01895.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":67,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":67}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01895.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":67,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":67}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01897.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":64,"snippet":{"text":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},"startColumn":69,"startLine":64}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01897.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":67,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":67}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01897.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":67,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":67}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01898.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":64,"snippet":{"text":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},"startColumn":69,"startLine":64}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01898.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":67,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":67}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01898.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":67,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":67}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01900.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":61,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":61}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01900.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":61,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":61}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01902.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":49,"endLine":64,"snippet":{"text":"                    ctx.search(base, filter, sc);"},"startColumn":21,"startLine":64}}}],"message":{"text":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data."},"properties":{},"ruleId":"java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01902.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":81,"snippet":{"text":"                    response.getWriter()\n                            .println(\n                                    \"LDAP query results:<br>\"\n                                            + \"Record found with name \"\n                                            + attr.get()\n                                            + \"<br>\"\n                                            + \"Address: \"\n                                            + attr2.get()\n                                            + \"<br>\");"},"startColumn":21,"startLine":73}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01903.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":49,"endLine":64,"snippet":{"text":"                    ctx.search(base, filter, sc);"},"startColumn":21,"startLine":64}}}],"message":{"text":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data."},"properties":{},"ruleId":"java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01903.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":81,"snippet":{"text":"                    response.getWriter()\n                            .println(\n                                    \"LDAP query results:<br>\"\n                                            + \"Record found with name \"\n                                            + attr.get()\n                                            + \"<br>\"\n                                            + \"Address: \"\n                                            + attr2.get()\n                                            + \"<br>\");"},"startColumn":21,"startLine":73}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01904.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":53,"snippet":{"text":"        java.io.File fileTarget = new java.io.File(bar);"},"startColumn":22,"startLine":53}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01905.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":58,"snippet":{"text":"            fis = new java.io.FileInputStream(fileName);"},"startColumn":19,"startLine":58}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01906.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":59,"snippet":{"text":"            fos = new java.io.FileOutputStream(new java.io.File(fileName));"},"startColumn":13,"startLine":59}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01906.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":72,"snippet":{"text":"                    fos = null;"},"startColumn":21,"startLine":72}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01907.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":59,"snippet":{"text":"            fos = new java.io.FileOutputStream(new java.io.File(fileName));"},"startColumn":13,"startLine":59}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01907.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":72,"snippet":{"text":"                    fos = null;"},"startColumn":21,"startLine":72}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01909.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":49,"endLine":66,"snippet":{"text":"                    idc.search(base, filter, sc);"},"startColumn":21,"startLine":66}}}],"message":{"text":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data."},"properties":{},"ruleId":"java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01909.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":84,"snippet":{"text":"                    response.getWriter()\n                            .println(\n                                    \"LDAP query results:<br>\"\n                                            + \"Record found with name \"\n                                            + attr.get()\n                                            + \"<br>\"\n                                            + \"Address: \"\n                                            + attr2.get()\n                                            + \"<br>\");"},"startColumn":21,"startLine":76}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01911.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":83,"endLine":59,"snippet":{"text":"                md = java.security.MessageDigest.getInstance(\"SHA1\", provider[0]);"},"startColumn":17,"startLine":59}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01911.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":77,"endLine":61,"snippet":{"text":"                md = java.security.MessageDigest.getInstance(\"SHA1\", \"SUN\");"},"startColumn":17,"startLine":61}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01914.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":79,"endLine":57,"snippet":{"text":"        out.format(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":57}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01915.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":55,"snippet":{"text":"        response.getWriter().format(\"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":55}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01916.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":54,"snippet":{"text":"        response.getWriter().print(bar.toCharArray());"},"startColumn":9,"startLine":54}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01917.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":40,"endLine":54,"snippet":{"text":"        response.getWriter().print(bar);"},"startColumn":9,"startLine":54}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01918.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":55,"snippet":{"text":"        response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":55}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01919.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":67,"endLine":55,"snippet":{"text":"        response.getWriter().printf(java.util.Locale.US, bar, obj);"},"startColumn":9,"startLine":55}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01920.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":55,"snippet":{"text":"        response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":55}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01921.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":55,"snippet":{"text":"        response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":55}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01922.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":55,"snippet":{"text":"        response.getWriter().printf(bar, obj);"},"startColumn":9,"startLine":55}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01923.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":55,"snippet":{"text":"        response.getWriter().printf(bar, obj);"},"startColumn":9,"startLine":55}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01924.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":55,"snippet":{"text":"        response.getWriter().printf(bar, obj);"},"startColumn":9,"startLine":55}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01925.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":42,"endLine":54,"snippet":{"text":"        response.getWriter().println(bar);"},"startColumn":9,"startLine":54}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01926.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":42,"endLine":54,"snippet":{"text":"        response.getWriter().println(bar);"},"startColumn":9,"startLine":54}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01927.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":40,"endLine":54,"snippet":{"text":"        response.getWriter().write(bar);"},"startColumn":9,"startLine":54}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01928.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":36,"endLine":63,"snippet":{"text":"        argList.add(\"echo \" + bar);"},"startColumn":9,"startLine":63}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01929.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":65,"snippet":{"text":"        ProcessBuilder pb = new ProcessBuilder(args);"},"startColumn":9,"startLine":65}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01929.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":36,"endLine":68,"snippet":{"text":"            Process p = pb.start();"},"startColumn":13,"startLine":68}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01936.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":43,"endLine":62,"snippet":{"text":"            Process p = r.exec(cmd + bar);"},"startColumn":13,"startLine":62}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01937.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":43,"endLine":62,"snippet":{"text":"            Process p = r.exec(cmd + bar);"},"startColumn":13,"startLine":62}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01938.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":97,"endLine":76,"snippet":{"text":"            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":76}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01939.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":97,"endLine":62,"snippet":{"text":"            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":62}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01940.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":52,"endLine":63,"snippet":{"text":"            Process p = r.exec(cmd + bar, argsEnv);"},"startColumn":13,"startLine":63}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01941.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":61,"snippet":{"text":"            Process p = r.exec(cmd, argsEnv);"},"startColumn":13,"startLine":61}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01942.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":98,"endLine":64,"snippet":{"text":"            Process p =\n                    r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":63}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01943.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":98,"endLine":64,"snippet":{"text":"            Process p =\n                    r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":63}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01944.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":98,"endLine":64,"snippet":{"text":"            Process p =\n                    r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":63}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01955.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":60,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' with value: 10340 saved in session.\");"},"startColumn":9,"startLine":56}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01956.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":60,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' with value: 10340 saved in session.\");"},"startColumn":9,"startLine":56}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01957.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":60,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' with value: 10340 saved in session.\");"},"startColumn":9,"startLine":56}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01958.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":52,"endLine":54,"snippet":{"text":"        request.getSession().putValue(\"userid\", bar);"},"startColumn":49,"startLine":54}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"properties":{},"ruleId":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01958.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":60,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: 'userid' with value: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' saved in session.\");"},"startColumn":9,"startLine":56}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01959.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":54,"snippet":{"text":"        request.getSession().setAttribute(\"userid\", bar);"},"startColumn":53,"startLine":54}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"properties":{},"ruleId":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01959.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":60,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: 'userid' with value: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' saved in session.\");"},"startColumn":9,"startLine":56}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01960.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":54,"snippet":{"text":"        request.getSession().setAttribute(\"userid\", bar);"},"startColumn":53,"startLine":54}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"properties":{},"ruleId":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01960.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":60,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: 'userid' with value: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' saved in session.\");"},"startColumn":9,"startLine":56}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01961.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":59,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},"startColumn":13,"startLine":58}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01962.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":59,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"});"},"startColumn":13,"startLine":58}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01963.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":56,"snippet":{"text":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);"},"startColumn":13,"startLine":56}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01964.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":32,"endLine":71,"snippet":{"text":"            java.util.List<String> results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(\n                            sql,\n                            new org.springframework.jdbc.core.RowMapper<String>() {\n                                @Override\n                                public String mapRow(java.sql.ResultSet rs, int rowNum)\n                                        throws java.sql.SQLException {\n                                    try {\n                                        return rs.getString(\"USERNAME\");\n                                    } catch (java.sql.SQLException e) {\n                                        if (org.owasp.benchmark.helpers.DatabaseHelper\n                                                .hideSQLErrors) {\n                                            return \"Error processing query.\";\n                                        } else throw e;\n                                    }\n                                }\n                            });"},"startColumn":13,"startLine":55}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01965.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":59,"snippet":{"text":"            Long results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class);"},"startColumn":13,"startLine":57}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01965.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":89,"endLine":60,"snippet":{"text":"            response.getWriter().println(\"Your results are: \" + String.valueOf(results));"},"startColumn":13,"startLine":60}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01966.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":65,"endLine":58,"snippet":{"text":"            Object results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, new Object[] {}, String.class);"},"startColumn":13,"startLine":56}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01967.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":65,"endLine":58,"snippet":{"text":"            Object results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, new Object[] {}, String.class);"},"startColumn":13,"startLine":56}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01968.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":56,"snippet":{"text":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);"},"startColumn":13,"startLine":56}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01969.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":53,"endLine":59,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            statement.addBatch(sql);\n            int[] counts = statement.executeBatch();"},"startColumn":13,"startLine":56}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01970.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":53,"endLine":59,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            statement.addBatch(sql);\n            int[] counts = statement.executeBatch();"},"startColumn":13,"startLine":56}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01971.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":58,"snippet":{"text":"            statement.execute(sql, new int[] {1, 2});"},"startColumn":13,"startLine":58}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01972.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":58,"snippet":{"text":"            statement.execute(sql, new String[] {\"username\", \"password\"});"},"startColumn":13,"startLine":58}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01973.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":58,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            int count = statement.executeUpdate(sql);"},"startColumn":13,"startLine":56}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01974.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":99,"endLine":71,"snippet":{"text":"                            xp.compile(expression)\n                                    .evaluate(xmlDocument, javax.xml.xpath.XPathConstants.NODESET);"},"startColumn":29,"startLine":70}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a XPath evaluate or compile command. This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized. Xpath injection could lead to unauthorized access to sensitive information in XML documents. Instead, thoroughly sanitize user input or use parameterized xpath queries if you can."},"properties":{},"ruleId":"java.lang.security.audit.tainted-xpath-from-http-request.tainted-xpath-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01974.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":79,"endLine":77,"snippet":{"text":"                response.getWriter().println(value.getTextContent() + \"<br/>\");"},"startColumn":17,"startLine":77}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01978.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":74,"snippet":{"text":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},"startColumn":69,"startLine":74}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01978.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":77,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":77}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01978.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":77,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":77}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01980.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":71,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":71}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01980.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":71,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":71}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01981.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":71,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":71}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01981.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":71,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":71}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01983.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":87,"endLine":64,"snippet":{"text":"        java.io.File fileTarget =\n                new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar);"},"startColumn":22,"startLine":63}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01984.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":87,"endLine":64,"snippet":{"text":"        java.io.File fileTarget =\n                new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar);"},"startColumn":22,"startLine":63}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01985.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":69,"endLine":63,"snippet":{"text":"        java.io.File fileTarget = new java.io.File(bar, \"/Test.txt\");"},"startColumn":22,"startLine":63}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01986.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":64,"endLine":83,"snippet":{"text":"            java.io.File fileTarget = new java.io.File(fileURI);"},"startColumn":26,"startLine":83}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01987.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":64,"endLine":83,"snippet":{"text":"            java.io.File fileTarget = new java.io.File(fileURI);"},"startColumn":26,"startLine":83}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01988.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":74,"endLine":68,"snippet":{"text":"            fis = new java.io.FileInputStream(new java.io.File(fileName));"},"startColumn":19,"startLine":68}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01989.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":64,"endLine":69,"snippet":{"text":"            fos = new java.io.FileOutputStream(fileName, false);"},"startColumn":13,"startLine":69}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01989.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":82,"snippet":{"text":"                    fos = null;"},"startColumn":21,"startLine":82}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01990.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":69,"snippet":{"text":"            fos = new java.io.FileOutputStream(fileName);"},"startColumn":13,"startLine":69}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01990.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":82,"snippet":{"text":"                    fos = null;"},"startColumn":21,"startLine":82}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02015.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":70,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' with value: 10340 saved in session.\");"},"startColumn":9,"startLine":66}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02016.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":52,"endLine":64,"snippet":{"text":"        request.getSession().putValue(\"userid\", bar);"},"startColumn":49,"startLine":64}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"properties":{},"ruleId":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02016.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":70,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: 'userid' with value: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' saved in session.\");"},"startColumn":9,"startLine":66}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02017.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":71,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":71}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02017.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":71,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":71}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02018.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":71,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":71}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02018.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":71,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":71}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02019.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":71,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":71}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02019.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":71,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":71}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02020.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":69,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":69}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02020.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":69,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":69}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02022.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":63,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":63}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02022.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":63,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":63}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02023.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":63,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":63}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02023.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":63,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":63}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02025.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":49,"endLine":66,"snippet":{"text":"                    ctx.search(base, filter, sc);"},"startColumn":21,"startLine":66}}}],"message":{"text":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data."},"properties":{},"ruleId":"java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02025.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":83,"snippet":{"text":"                    response.getWriter()\n                            .println(\n                                    \"LDAP query results:<br>\"\n                                            + \"Record found with name \"\n                                            + attr.get()\n                                            + \"<br>\"\n                                            + \"Address: \"\n                                            + attr2.get()\n                                            + \"<br>\");"},"startColumn":21,"startLine":75}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02026.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":57,"snippet":{"text":"        java.io.File fileTarget =\n                new java.io.File(\n                        new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR), bar);"},"startColumn":22,"startLine":55}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02027.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":87,"endLine":56,"snippet":{"text":"        java.io.File fileTarget =\n                new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar);"},"startColumn":22,"startLine":55}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02028.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":87,"endLine":56,"snippet":{"text":"        java.io.File fileTarget =\n                new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar);"},"startColumn":22,"startLine":55}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02029.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":55,"snippet":{"text":"        java.io.File fileTarget = new java.io.File(bar);"},"startColumn":22,"startLine":55}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02030.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":64,"endLine":75,"snippet":{"text":"            java.io.File fileTarget = new java.io.File(fileURI);"},"startColumn":26,"startLine":75}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02031.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":74,"endLine":60,"snippet":{"text":"            fis = new java.io.FileInputStream(new java.io.File(fileName));"},"startColumn":19,"startLine":60}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02032.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":60,"snippet":{"text":"            fis = new java.io.FileInputStream(fileName);"},"startColumn":19,"startLine":60}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02033.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":82,"endLine":61,"snippet":{"text":"            fos = new java.io.FileOutputStream(new java.io.File(fileName), false);"},"startColumn":13,"startLine":61}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02033.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":74,"snippet":{"text":"                    fos = null;"},"startColumn":21,"startLine":74}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02034.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":92,"endLine":67,"snippet":{"text":"        java.io.FileOutputStream fos =\n                new java.io.FileOutputStream(new java.io.FileInputStream(fileName).getFD()); ) {"},"startColumn":34,"startLine":66}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02036.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":58,"endLine":69,"snippet":{"text":"                    idc.search(base, filter, filters, sc);"},"startColumn":21,"startLine":69}}}],"message":{"text":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data."},"properties":{},"ruleId":"java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02036.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":86,"snippet":{"text":"                    response.getWriter()\n                            .println(\n                                    \"LDAP query results:<br>\"\n                                            + \"Record found with name \"\n                                            + attr.get()\n                                            + \"<br>\"\n                                            + \"Address: \"\n                                            + attr2.get()\n                                            + \"<br>\");"},"startColumn":21,"startLine":78}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02037.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":58,"endLine":69,"snippet":{"text":"                    idc.search(base, filter, filters, sc);"},"startColumn":21,"startLine":69}}}],"message":{"text":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data."},"properties":{},"ruleId":"java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02037.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":86,"snippet":{"text":"                    response.getWriter()\n                            .println(\n                                    \"LDAP query results:<br>\"\n                                            + \"Record found with name \"\n                                            + attr.get()\n                                            + \"<br>\"\n                                            + \"Address: \"\n                                            + attr2.get()\n                                            + \"<br>\");"},"startColumn":21,"startLine":78}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02042.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":101,"endLine":56,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"SHA1\", \"SUN\");"},"startColumn":13,"startLine":56}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02045.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":79,"endLine":59,"snippet":{"text":"        out.format(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":59}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02046.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":56,"snippet":{"text":"        response.getWriter().print(bar.toCharArray());"},"startColumn":9,"startLine":56}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02047.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":56,"snippet":{"text":"        response.getWriter().print(bar.toCharArray());"},"startColumn":9,"startLine":56}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02048.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":57,"snippet":{"text":"        response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":57}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02049.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":57,"snippet":{"text":"        response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":57}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02050.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":57,"snippet":{"text":"        response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":57}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02051.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":57,"snippet":{"text":"        response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":57}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02052.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":57,"snippet":{"text":"        response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":57}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02053.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":57,"snippet":{"text":"        response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":57}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02054.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":57,"snippet":{"text":"        response.getWriter().printf(bar, obj);"},"startColumn":9,"startLine":57}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02055.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":56,"snippet":{"text":"        response.getWriter().println(bar.toCharArray());"},"startColumn":9,"startLine":56}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02056.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":42,"endLine":56,"snippet":{"text":"        response.getWriter().println(bar);"},"startColumn":9,"startLine":56}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02057.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":55,"endLine":59,"snippet":{"text":"            response.getWriter().write(bar, 0, length);"},"startColumn":13,"startLine":59}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02058.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":36,"endLine":65,"snippet":{"text":"        argList.add(\"echo \" + bar);"},"startColumn":9,"startLine":65}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02059.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":67,"snippet":{"text":"        ProcessBuilder pb = new ProcessBuilder(args);"},"startColumn":9,"startLine":67}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02059.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":36,"endLine":70,"snippet":{"text":"            Process p = pb.start();"},"startColumn":13,"startLine":70}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02067.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":47,"endLine":78,"snippet":{"text":"            Process p = r.exec(args, argsEnv);"},"startColumn":13,"startLine":78}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02068.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":97,"endLine":64,"snippet":{"text":"            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":64}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02069.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":52,"endLine":65,"snippet":{"text":"            Process p = r.exec(cmd + bar, argsEnv);"},"startColumn":13,"startLine":65}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02070.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":61,"snippet":{"text":"            Process p = r.exec(cmd, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":61}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02084.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":56,"snippet":{"text":"        request.getSession().setAttribute(\"userid\", bar);"},"startColumn":53,"startLine":56}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"properties":{},"ruleId":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02084.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":62,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: 'userid' with value: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' saved in session.\");"},"startColumn":9,"startLine":58}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02085.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":56,"snippet":{"text":"        request.getSession().setAttribute(\"userid\", bar);"},"startColumn":53,"startLine":56}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"properties":{},"ruleId":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02085.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":62,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: 'userid' with value: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' saved in session.\");"},"startColumn":9,"startLine":58}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02086.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":56,"snippet":{"text":"        request.getSession().setAttribute(\"userid\", bar);"},"startColumn":53,"startLine":56}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"properties":{},"ruleId":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02086.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":62,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: 'userid' with value: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' saved in session.\");"},"startColumn":9,"startLine":58}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02087.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":61,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},"startColumn":13,"startLine":60}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02088.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":66,"endLine":64,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);"},"startColumn":13,"startLine":60}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02089.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":66,"endLine":64,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);"},"startColumn":13,"startLine":60}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02090.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":82,"endLine":58,"snippet":{"text":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql);"},"startColumn":13,"startLine":58}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02091.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":32,"endLine":73,"snippet":{"text":"            java.util.List<String> results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(\n                            sql,\n                            new org.springframework.jdbc.core.RowMapper<String>() {\n                                @Override\n                                public String mapRow(java.sql.ResultSet rs, int rowNum)\n                                        throws java.sql.SQLException {\n                                    try {\n                                        return rs.getString(\"USERNAME\");\n                                    } catch (java.sql.SQLException e) {\n                                        if (org.owasp.benchmark.helpers.DatabaseHelper\n                                                .hideSQLErrors) {\n                                            return \"Error processing query.\";\n                                        } else throw e;\n                                    }\n                                }\n                            });"},"startColumn":13,"startLine":57}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02092.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":36,"endLine":60,"snippet":{"text":"            statement.execute(sql);"},"startColumn":13,"startLine":60}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02093.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":36,"endLine":60,"snippet":{"text":"            statement.execute(sql);"},"startColumn":13,"startLine":60}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02094.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":36,"endLine":60,"snippet":{"text":"            statement.execute(sql);"},"startColumn":13,"startLine":60}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02095.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":78,"endLine":60,"snippet":{"text":"            statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},"startColumn":13,"startLine":60}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02096.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":60,"snippet":{"text":"            statement.execute(sql, new int[] {1, 2});"},"startColumn":13,"startLine":60}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02097.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":65,"endLine":60,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            java.sql.ResultSet rs = statement.executeQuery(sql);"},"startColumn":13,"startLine":58}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02097.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":65,"endLine":60,"snippet":{"text":"            java.sql.ResultSet rs = statement.executeQuery(sql);"},"startColumn":13,"startLine":60}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02098.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":65,"endLine":60,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            java.sql.ResultSet rs = statement.executeQuery(sql);"},"startColumn":13,"startLine":58}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02098.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":65,"endLine":60,"snippet":{"text":"            java.sql.ResultSet rs = statement.executeQuery(sql);"},"startColumn":13,"startLine":60}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02099.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":60,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            int count = statement.executeUpdate(sql);"},"startColumn":13,"startLine":58}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02100.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":99,"endLine":73,"snippet":{"text":"                            xp.compile(expression)\n                                    .evaluate(xmlDocument, javax.xml.xpath.XPathConstants.NODESET);"},"startColumn":29,"startLine":72}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a XPath evaluate or compile command. This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized. Xpath injection could lead to unauthorized access to sensitive information in XML documents. Instead, thoroughly sanitize user input or use parameterized xpath queries if you can."},"properties":{},"ruleId":"java.lang.security.audit.tainted-xpath-from-http-request.tainted-xpath-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02100.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":79,"endLine":79,"snippet":{"text":"                response.getWriter().println(value.getTextContent() + \"<br/>\");"},"startColumn":17,"startLine":79}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02101.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":62,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":62}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02101.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":62,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":62}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02104.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":58,"endLine":60,"snippet":{"text":"                    ctx.search(base, filter, filters, sc);"},"startColumn":21,"startLine":60}}}],"message":{"text":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data."},"properties":{},"ruleId":"java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02104.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":77,"snippet":{"text":"                    response.getWriter()\n                            .println(\n                                    \"LDAP query results:<br>\"\n                                            + \"Record found with name \"\n                                            + attr.get()\n                                            + \"<br>\"\n                                            + \"Address: \"\n                                            + attr2.get()\n                                            + \"<br>\");"},"startColumn":21,"startLine":69}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02105.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":87,"endLine":49,"snippet":{"text":"        java.io.File fileTarget =\n                new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar);"},"startColumn":22,"startLine":48}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02106.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":48,"snippet":{"text":"        java.io.File fileTarget = new java.io.File(bar);"},"startColumn":22,"startLine":48}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02107.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":48,"snippet":{"text":"        java.io.File fileTarget = new java.io.File(bar);"},"startColumn":22,"startLine":48}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02108.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":82,"endLine":54,"snippet":{"text":"            fos = new java.io.FileOutputStream(new java.io.File(fileName), false);"},"startColumn":13,"startLine":54}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02108.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":67,"snippet":{"text":"                    fos = null;"},"startColumn":21,"startLine":67}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02109.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":54,"snippet":{"text":"            fos = new java.io.FileOutputStream(new java.io.File(fileName));"},"startColumn":13,"startLine":54}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02109.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":67,"snippet":{"text":"                    fos = null;"},"startColumn":21,"startLine":67}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02110.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":54,"snippet":{"text":"            fos = new java.io.FileOutputStream(new java.io.File(fileName));"},"startColumn":13,"startLine":54}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02110.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":67,"snippet":{"text":"                    fos = null;"},"startColumn":21,"startLine":67}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02111.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":92,"endLine":60,"snippet":{"text":"        java.io.FileOutputStream fos =\n                new java.io.FileOutputStream(new java.io.FileInputStream(fileName).getFD()); ) {"},"startColumn":34,"startLine":59}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02112.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":64,"endLine":54,"snippet":{"text":"            fos = new java.io.FileOutputStream(fileName, false);"},"startColumn":13,"startLine":54}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02112.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":67,"snippet":{"text":"                    fos = null;"},"startColumn":21,"startLine":67}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02114.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":58,"endLine":62,"snippet":{"text":"                    idc.search(base, filter, filters, sc);"},"startColumn":21,"startLine":62}}}],"message":{"text":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data."},"properties":{},"ruleId":"java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02114.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":79,"snippet":{"text":"                    response.getWriter()\n                            .println(\n                                    \"LDAP query results:<br>\"\n                                            + \"Record found with name \"\n                                            + attr.get()\n                                            + \"<br>\"\n                                            + \"Address: \"\n                                            + attr2.get()\n                                            + \"<br>\");"},"startColumn":21,"startLine":71}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02115.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":58,"endLine":62,"snippet":{"text":"                    idc.search(base, filter, filters, sc);"},"startColumn":21,"startLine":62}}}],"message":{"text":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data."},"properties":{},"ruleId":"java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02115.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":79,"snippet":{"text":"                    response.getWriter()\n                            .println(\n                                    \"LDAP query results:<br>\"\n                                            + \"Record found with name \"\n                                            + attr.get()\n                                            + \"<br>\"\n                                            + \"Address: \"\n                                            + attr2.get()\n                                            + \"<br>\");"},"startColumn":21,"startLine":71}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02116.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":49,"endLine":61,"snippet":{"text":"                    idc.search(base, filter, sc);"},"startColumn":21,"startLine":61}}}],"message":{"text":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data."},"properties":{},"ruleId":"java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02116.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":79,"snippet":{"text":"                    response.getWriter()\n                            .println(\n                                    \"LDAP query results:<br>\"\n                                            + \"Record found with name \"\n                                            + attr.get()\n                                            + \"<br>\"\n                                            + \"Address: \"\n                                            + attr2.get()\n                                            + \"<br>\");"},"startColumn":21,"startLine":71}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02118.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":83,"endLine":54,"snippet":{"text":"                md = java.security.MessageDigest.getInstance(\"SHA1\", provider[0]);"},"startColumn":17,"startLine":54}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02118.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":77,"endLine":56,"snippet":{"text":"                md = java.security.MessageDigest.getInstance(\"SHA1\", \"SUN\");"},"startColumn":17,"startLine":56}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02122.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":79,"endLine":52,"snippet":{"text":"        out.format(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":52}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02123.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":50,"snippet":{"text":"        response.getWriter().format(\"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":50}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02124.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":49,"snippet":{"text":"        response.getWriter().print(bar.toCharArray());"},"startColumn":9,"startLine":49}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02125.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":40,"endLine":49,"snippet":{"text":"        response.getWriter().print(bar);"},"startColumn":9,"startLine":49}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02126.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":40,"endLine":49,"snippet":{"text":"        response.getWriter().print(bar);"},"startColumn":9,"startLine":49}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02127.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":40,"endLine":49,"snippet":{"text":"        response.getWriter().print(bar);"},"startColumn":9,"startLine":49}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02128.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":40,"endLine":49,"snippet":{"text":"        response.getWriter().print(bar);"},"startColumn":9,"startLine":49}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02129.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":50,"snippet":{"text":"        response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":50}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02130.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":50,"snippet":{"text":"        response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":50}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02131.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":67,"endLine":50,"snippet":{"text":"        response.getWriter().printf(java.util.Locale.US, bar, obj);"},"startColumn":9,"startLine":50}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02132.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":42,"endLine":49,"snippet":{"text":"        response.getWriter().println(bar);"},"startColumn":9,"startLine":49}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02133.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":42,"endLine":49,"snippet":{"text":"        response.getWriter().println(bar);"},"startColumn":9,"startLine":49}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02134.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":49,"snippet":{"text":"        response.getWriter().write(bar.toCharArray());"},"startColumn":9,"startLine":49}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02135.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":40,"endLine":49,"snippet":{"text":"        response.getWriter().write(bar);"},"startColumn":9,"startLine":49}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02136.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":55,"endLine":52,"snippet":{"text":"            response.getWriter().write(bar, 0, length);"},"startColumn":13,"startLine":52}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02137.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":36,"endLine":58,"snippet":{"text":"        argList.add(\"echo \" + bar);"},"startColumn":9,"startLine":58}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02145.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":62,"endLine":49,"snippet":{"text":"        response.getWriter().write(\"Parameter value: \" + bar);"},"startColumn":9,"startLine":49}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02146.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":43,"endLine":57,"snippet":{"text":"            Process p = r.exec(cmd + bar);"},"startColumn":13,"startLine":57}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02147.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":43,"endLine":57,"snippet":{"text":"            Process p = r.exec(cmd + bar);"},"startColumn":13,"startLine":57}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02148.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":47,"endLine":71,"snippet":{"text":"            Process p = r.exec(args, argsEnv);"},"startColumn":13,"startLine":71}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02149.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":47,"endLine":71,"snippet":{"text":"            Process p = r.exec(args, argsEnv);"},"startColumn":13,"startLine":71}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02150.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":47,"endLine":71,"snippet":{"text":"            Process p = r.exec(args, argsEnv);"},"startColumn":13,"startLine":71}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02151.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":97,"endLine":71,"snippet":{"text":"            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":71}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02152.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":97,"endLine":71,"snippet":{"text":"            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":71}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02153.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":97,"endLine":57,"snippet":{"text":"            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":57}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02154.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":98,"endLine":59,"snippet":{"text":"            Process p =\n                    r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":58}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02155.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":54,"snippet":{"text":"            Process p = r.exec(cmd, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":54}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02156.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":54,"snippet":{"text":"            Process p = r.exec(cmd, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":54}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02165.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":55,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' with value: 10340 saved in session.\");"},"startColumn":9,"startLine":51}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02166.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":52,"endLine":49,"snippet":{"text":"        request.getSession().putValue(\"userid\", bar);"},"startColumn":49,"startLine":49}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"properties":{},"ruleId":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02166.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":55,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: 'userid' with value: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' saved in session.\");"},"startColumn":9,"startLine":51}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02167.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":49,"snippet":{"text":"        request.getSession().setAttribute(\"userid\", bar);"},"startColumn":53,"startLine":49}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"properties":{},"ruleId":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02167.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":55,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: 'userid' with value: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' saved in session.\");"},"startColumn":9,"startLine":51}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02168.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":49,"snippet":{"text":"        request.getSession().setAttribute(\"userid\", bar);"},"startColumn":53,"startLine":49}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"properties":{},"ruleId":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02168.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":55,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: 'userid' with value: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' saved in session.\");"},"startColumn":9,"startLine":51}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02169.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":66,"endLine":57,"snippet":{"text":"            java.sql.CallableStatement statement =\n                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);"},"startColumn":13,"startLine":53}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02170.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":73,"endLine":58,"snippet":{"text":"            java.sql.CallableStatement statement =\n                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},"startColumn":13,"startLine":53}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02171.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":66,"endLine":57,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);"},"startColumn":13,"startLine":53}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02172.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":66,"endLine":57,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);"},"startColumn":13,"startLine":53}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02173.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":66,"endLine":57,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);"},"startColumn":13,"startLine":53}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02174.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":51,"snippet":{"text":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);"},"startColumn":13,"startLine":51}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02175.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":82,"endLine":51,"snippet":{"text":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql);"},"startColumn":13,"startLine":51}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02176.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":82,"endLine":51,"snippet":{"text":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql);"},"startColumn":13,"startLine":51}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02177.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":32,"endLine":66,"snippet":{"text":"            java.util.List<String> results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(\n                            sql,\n                            new org.springframework.jdbc.core.RowMapper<String>() {\n                                @Override\n                                public String mapRow(java.sql.ResultSet rs, int rowNum)\n                                        throws java.sql.SQLException {\n                                    try {\n                                        return rs.getString(\"USERNAME\");\n                                    } catch (java.sql.SQLException e) {\n                                        if (org.owasp.benchmark.helpers.DatabaseHelper\n                                                .hideSQLErrors) {\n                                            return \"Error processing query.\";\n                                        } else throw e;\n                                    }\n                                }\n                            });"},"startColumn":13,"startLine":50}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02178.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":95,"endLine":51,"snippet":{"text":"            java.util.List<java.util.Map<String, Object>> list =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql);"},"startColumn":13,"startLine":50}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02179.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":54,"snippet":{"text":"            Long results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class);"},"startColumn":13,"startLine":52}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02179.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":89,"endLine":55,"snippet":{"text":"            response.getWriter().println(\"Your results are: \" + String.valueOf(results));"},"startColumn":13,"startLine":55}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02180.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":54,"snippet":{"text":"            Long results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class);"},"startColumn":13,"startLine":52}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02180.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":89,"endLine":55,"snippet":{"text":"            response.getWriter().println(\"Your results are: \" + String.valueOf(results));"},"startColumn":13,"startLine":55}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02181.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":94,"endLine":52,"snippet":{"text":"            java.util.Map<String, Object> results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForMap(sql);"},"startColumn":13,"startLine":51}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02182.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":94,"endLine":52,"snippet":{"text":"            java.util.Map<String, Object> results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForMap(sql);"},"startColumn":13,"startLine":51}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02183.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":65,"endLine":53,"snippet":{"text":"            Object results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, new Object[] {}, String.class);"},"startColumn":13,"startLine":51}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02184.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":97,"endLine":51,"snippet":{"text":"            org.springframework.jdbc.support.rowset.SqlRowSet results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql);"},"startColumn":13,"startLine":50}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02185.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":53,"endLine":54,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            statement.addBatch(sql);\n            int[] counts = statement.executeBatch();"},"startColumn":13,"startLine":51}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02186.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":36,"endLine":53,"snippet":{"text":"            statement.execute(sql);"},"startColumn":13,"startLine":53}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02187.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":36,"endLine":53,"snippet":{"text":"            statement.execute(sql);"},"startColumn":13,"startLine":53}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02188.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":65,"endLine":53,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            java.sql.ResultSet rs = statement.executeQuery(sql);"},"startColumn":13,"startLine":51}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02188.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":65,"endLine":53,"snippet":{"text":"            java.sql.ResultSet rs = statement.executeQuery(sql);"},"startColumn":13,"startLine":53}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02189.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":99,"endLine":66,"snippet":{"text":"                            xp.compile(expression)\n                                    .evaluate(xmlDocument, javax.xml.xpath.XPathConstants.NODESET);"},"startColumn":29,"startLine":65}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a XPath evaluate or compile command. This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized. Xpath injection could lead to unauthorized access to sensitive information in XML documents. Instead, thoroughly sanitize user input or use parameterized xpath queries if you can."},"properties":{},"ruleId":"java.lang.security.audit.tainted-xpath-from-http-request.tainted-xpath-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02189.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":79,"endLine":72,"snippet":{"text":"                response.getWriter().println(value.getTextContent() + \"<br/>\");"},"startColumn":17,"startLine":72}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02192.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":66,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":66}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02192.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":66,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":66}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02193.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":66,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":66}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02193.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":66,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":66}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02194.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":63,"snippet":{"text":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},"startColumn":69,"startLine":63}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02194.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":66,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":66}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02194.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":66,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":66}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02195.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":63,"snippet":{"text":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},"startColumn":69,"startLine":63}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02195.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":66,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":66}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02195.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":66,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":66}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02196.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":49,"endLine":63,"snippet":{"text":"                    ctx.search(base, filter, sc);"},"startColumn":21,"startLine":63}}}],"message":{"text":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data."},"properties":{},"ruleId":"java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02196.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":80,"snippet":{"text":"                    response.getWriter()\n                            .println(\n                                    \"LDAP query results:<br>\"\n                                            + \"Record found with name \"\n                                            + attr.get()\n                                            + \"<br>\"\n                                            + \"Address: \"\n                                            + attr2.get()\n                                            + \"<br>\");"},"startColumn":21,"startLine":72}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02197.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":54,"snippet":{"text":"        java.io.File fileTarget =\n                new java.io.File(\n                        new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR), bar);"},"startColumn":22,"startLine":52}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02198.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":87,"endLine":53,"snippet":{"text":"        java.io.File fileTarget =\n                new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar);"},"startColumn":22,"startLine":52}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02199.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":52,"snippet":{"text":"        java.io.File fileTarget = new java.io.File(bar);"},"startColumn":22,"startLine":52}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02200.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":52,"snippet":{"text":"        java.io.File fileTarget = new java.io.File(bar);"},"startColumn":22,"startLine":52}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02201.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":74,"endLine":57,"snippet":{"text":"            fis = new java.io.FileInputStream(new java.io.File(fileName));"},"startColumn":19,"startLine":57}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02202.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":82,"endLine":58,"snippet":{"text":"            fos = new java.io.FileOutputStream(new java.io.File(fileName), false);"},"startColumn":13,"startLine":58}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02202.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":71,"snippet":{"text":"                    fos = null;"},"startColumn":21,"startLine":71}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02203.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":58,"snippet":{"text":"            fos = new java.io.FileOutputStream(new java.io.File(fileName));"},"startColumn":13,"startLine":58}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02203.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":71,"snippet":{"text":"                    fos = null;"},"startColumn":21,"startLine":71}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02204.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":92,"endLine":64,"snippet":{"text":"        java.io.FileOutputStream fos =\n                new java.io.FileOutputStream(new java.io.FileInputStream(fileName).getFD()); ) {"},"startColumn":34,"startLine":63}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02205.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":58,"snippet":{"text":"            fos = new java.io.FileOutputStream(fileName);"},"startColumn":13,"startLine":58}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02205.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":71,"snippet":{"text":"                    fos = null;"},"startColumn":21,"startLine":71}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02208.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":58,"endLine":66,"snippet":{"text":"                    idc.search(base, filter, filters, sc);"},"startColumn":21,"startLine":66}}}],"message":{"text":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data."},"properties":{},"ruleId":"java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02208.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":83,"snippet":{"text":"                    response.getWriter()\n                            .println(\n                                    \"LDAP query results:<br>\"\n                                            + \"Record found with name \"\n                                            + attr.get()\n                                            + \"<br>\"\n                                            + \"Address: \"\n                                            + attr2.get()\n                                            + \"<br>\");"},"startColumn":21,"startLine":75}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02211.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":101,"endLine":53,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"SHA1\", \"SUN\");"},"startColumn":13,"startLine":53}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02212.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":101,"endLine":53,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"SHA1\", \"SUN\");"},"startColumn":13,"startLine":53}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02213.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":101,"endLine":53,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"SHA1\", \"SUN\");"},"startColumn":13,"startLine":53}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02217.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":53,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"MD5\");"},"startColumn":86,"startLine":53}}}],"message":{"text":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-md5.use-of-md5"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02221.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":79,"endLine":56,"snippet":{"text":"        out.format(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":56}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02222.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":67,"endLine":54,"snippet":{"text":"        response.getWriter().format(java.util.Locale.US, bar, obj);"},"startColumn":9,"startLine":54}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02223.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":54,"snippet":{"text":"        response.getWriter().format(\"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":54}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02224.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":54,"snippet":{"text":"        response.getWriter().format(\"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":54}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02225.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":54,"snippet":{"text":"        response.getWriter().format(bar, obj);"},"startColumn":9,"startLine":54}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02226.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":53,"snippet":{"text":"        response.getWriter().print(bar.toCharArray());"},"startColumn":9,"startLine":53}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02227.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":53,"snippet":{"text":"        response.getWriter().print(bar.toCharArray());"},"startColumn":9,"startLine":53}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02228.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":40,"endLine":53,"snippet":{"text":"        response.getWriter().print(bar);"},"startColumn":9,"startLine":53}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02229.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":54,"snippet":{"text":"        response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":54}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02230.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":54,"snippet":{"text":"        response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":54}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02231.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":54,"snippet":{"text":"        response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":54}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02232.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":54,"snippet":{"text":"        response.getWriter().printf(bar, obj);"},"startColumn":9,"startLine":54}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02233.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":54,"snippet":{"text":"        response.getWriter().printf(bar, obj);"},"startColumn":9,"startLine":54}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02234.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":54,"snippet":{"text":"        response.getWriter().printf(bar, obj);"},"startColumn":9,"startLine":54}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02235.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":53,"snippet":{"text":"        response.getWriter().println(bar.toCharArray());"},"startColumn":9,"startLine":53}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02236.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":42,"endLine":53,"snippet":{"text":"        response.getWriter().println(bar);"},"startColumn":9,"startLine":53}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02237.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":42,"endLine":53,"snippet":{"text":"        response.getWriter().println(bar);"},"startColumn":9,"startLine":53}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02238.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":42,"endLine":53,"snippet":{"text":"        response.getWriter().println(bar);"},"startColumn":9,"startLine":53}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02239.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":53,"snippet":{"text":"        response.getWriter().write(bar.toCharArray());"},"startColumn":9,"startLine":53}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02240.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":40,"endLine":53,"snippet":{"text":"        response.getWriter().write(bar);"},"startColumn":9,"startLine":53}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02241.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":40,"endLine":53,"snippet":{"text":"        response.getWriter().write(bar);"},"startColumn":9,"startLine":53}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02242.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":36,"endLine":62,"snippet":{"text":"        argList.add(\"echo \" + bar);"},"startColumn":9,"startLine":62}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02243.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":36,"endLine":62,"snippet":{"text":"        argList.add(\"echo \" + bar);"},"startColumn":9,"startLine":62}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02244.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":36,"endLine":62,"snippet":{"text":"        argList.add(\"echo \" + bar);"},"startColumn":9,"startLine":62}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02249.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":43,"endLine":61,"snippet":{"text":"            Process p = r.exec(cmd + bar);"},"startColumn":13,"startLine":61}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02250.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":43,"endLine":61,"snippet":{"text":"            Process p = r.exec(cmd + bar);"},"startColumn":13,"startLine":61}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02251.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":38,"endLine":73,"snippet":{"text":"            Process p = r.exec(args);"},"startColumn":13,"startLine":73}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02252.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":97,"endLine":75,"snippet":{"text":"            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":75}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02253.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":97,"endLine":75,"snippet":{"text":"            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":75}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02261.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":59,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' with value: 10340 saved in session.\");"},"startColumn":9,"startLine":55}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02262.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":52,"endLine":53,"snippet":{"text":"        request.getSession().putValue(\"userid\", bar);"},"startColumn":49,"startLine":53}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"properties":{},"ruleId":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02262.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":59,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: 'userid' with value: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' saved in session.\");"},"startColumn":9,"startLine":55}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02263.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":77,"endLine":59,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' with value: '10340' saved in session.\");"},"startColumn":9,"startLine":55}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02264.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":80,"endLine":57,"snippet":{"text":"            java.sql.CallableStatement statement = connection.prepareCall(sql);"},"startColumn":13,"startLine":57}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02265.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":66,"endLine":61,"snippet":{"text":"            java.sql.CallableStatement statement =\n                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);"},"startColumn":13,"startLine":57}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02266.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":73,"endLine":62,"snippet":{"text":"            java.sql.CallableStatement statement =\n                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},"startColumn":13,"startLine":57}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02267.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":57,"snippet":{"text":"            java.sql.PreparedStatement statement = connection.prepareStatement(sql);"},"startColumn":13,"startLine":57}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02268.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":73,"endLine":62,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},"startColumn":13,"startLine":57}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02269.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":73,"endLine":62,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},"startColumn":13,"startLine":57}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02270.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":73,"endLine":62,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},"startColumn":13,"startLine":57}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02271.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":72,"endLine":58,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(sql, new int[] {1, 2});"},"startColumn":13,"startLine":57}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02272.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":55,"snippet":{"text":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);"},"startColumn":13,"startLine":55}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02273.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":55,"snippet":{"text":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);"},"startColumn":13,"startLine":55}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02274.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":32,"endLine":70,"snippet":{"text":"            java.util.List<String> results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(\n                            sql,\n                            new org.springframework.jdbc.core.RowMapper<String>() {\n                                @Override\n                                public String mapRow(java.sql.ResultSet rs, int rowNum)\n                                        throws java.sql.SQLException {\n                                    try {\n                                        return rs.getString(\"USERNAME\");\n                                    } catch (java.sql.SQLException e) {\n                                        if (org.owasp.benchmark.helpers.DatabaseHelper\n                                                .hideSQLErrors) {\n                                            return \"Error processing query.\";\n                                        } else throw e;\n                                    }\n                                }\n                            });"},"startColumn":13,"startLine":54}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02275.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":49,"endLine":58,"snippet":{"text":"            Integer results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Integer.class);"},"startColumn":13,"startLine":56}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02275.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":73,"endLine":59,"snippet":{"text":"            response.getWriter().println(\"Your results are: \" + results);"},"startColumn":13,"startLine":59}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02276.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":49,"endLine":58,"snippet":{"text":"            Integer results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Integer.class);"},"startColumn":13,"startLine":56}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02276.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":73,"endLine":59,"snippet":{"text":"            response.getWriter().println(\"Your results are: \" + results);"},"startColumn":13,"startLine":59}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02277.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":95,"endLine":55,"snippet":{"text":"            java.util.List<java.util.Map<String, Object>> list =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql);"},"startColumn":13,"startLine":54}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02278.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":58,"snippet":{"text":"            Long results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class);"},"startColumn":13,"startLine":56}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02278.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":89,"endLine":59,"snippet":{"text":"            response.getWriter().println(\"Your results are: \" + String.valueOf(results));"},"startColumn":13,"startLine":59}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02279.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":58,"snippet":{"text":"            Long results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class);"},"startColumn":13,"startLine":56}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02279.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":89,"endLine":59,"snippet":{"text":"            response.getWriter().println(\"Your results are: \" + String.valueOf(results));"},"startColumn":13,"startLine":59}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02280.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":58,"snippet":{"text":"            Long results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class);"},"startColumn":13,"startLine":56}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02280.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":89,"endLine":59,"snippet":{"text":"            response.getWriter().println(\"Your results are: \" + String.valueOf(results));"},"startColumn":13,"startLine":59}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02281.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":94,"endLine":56,"snippet":{"text":"            java.util.Map<String, Object> results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForMap(sql);"},"startColumn":13,"startLine":55}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02282.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":55,"snippet":{"text":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);"},"startColumn":13,"startLine":55}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02283.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":57,"snippet":{"text":"            statement.execute(sql, new int[] {1, 2});"},"startColumn":13,"startLine":57}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02284.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":57,"snippet":{"text":"            statement.execute(sql, new String[] {\"username\", \"password\"});"},"startColumn":13,"startLine":57}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02285.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":57,"snippet":{"text":"            statement.execute(sql, new String[] {\"username\", \"password\"});"},"startColumn":13,"startLine":57}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02286.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":57,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            int count = statement.executeUpdate(sql);"},"startColumn":13,"startLine":55}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02287.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":93,"endLine":57,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            int count = statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"});"},"startColumn":13,"startLine":55}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02288.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":93,"endLine":57,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            int count = statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"});"},"startColumn":13,"startLine":55}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02290.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":76,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":76}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02290.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":76,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":76}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02291.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":76,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":76}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02291.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":76,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":76}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02292.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":76,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":76}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02292.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":76,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":76}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02293.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":73,"snippet":{"text":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},"startColumn":69,"startLine":73}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02293.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":76,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":76}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02293.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":76,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":76}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02294.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":73,"snippet":{"text":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},"startColumn":69,"startLine":73}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02294.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":76,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":76}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02294.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":76,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":76}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02295.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":73,"snippet":{"text":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},"startColumn":69,"startLine":73}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02295.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":76,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":76}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02295.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":76,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":76}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02299.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":49,"endLine":73,"snippet":{"text":"                    ctx.search(base, filter, sc);"},"startColumn":21,"startLine":73}}}],"message":{"text":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data."},"properties":{},"ruleId":"java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02299.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":90,"snippet":{"text":"                    response.getWriter()\n                            .println(\n                                    \"LDAP query results:<br>\"\n                                            + \"Record found with name \"\n                                            + attr.get()\n                                            + \"<br>\"\n                                            + \"Address: \"\n                                            + attr2.get()\n                                            + \"<br>\");"},"startColumn":21,"startLine":82}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02300.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":64,"snippet":{"text":"        java.io.File fileTarget =\n                new java.io.File(\n                        new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR), bar);"},"startColumn":22,"startLine":62}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02301.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":62,"snippet":{"text":"        java.io.File fileTarget = new java.io.File(bar);"},"startColumn":22,"startLine":62}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02302.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":69,"endLine":62,"snippet":{"text":"        java.io.File fileTarget = new java.io.File(bar, \"/Test.txt\");"},"startColumn":22,"startLine":62}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02303.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":74,"endLine":67,"snippet":{"text":"            fis = new java.io.FileInputStream(new java.io.File(fileName));"},"startColumn":19,"startLine":67}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02304.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":67,"snippet":{"text":"            fis = new java.io.FileInputStream(fileName);"},"startColumn":19,"startLine":67}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02305.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":58,"endLine":76,"snippet":{"text":"                    idc.search(base, filter, filters, sc);"},"startColumn":21,"startLine":76}}}],"message":{"text":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data."},"properties":{},"ruleId":"java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02305.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":93,"snippet":{"text":"                    response.getWriter()\n                            .println(\n                                    \"LDAP query results:<br>\"\n                                            + \"Record found with name \"\n                                            + attr.get()\n                                            + \"<br>\"\n                                            + \"Address: \"\n                                            + attr2.get()\n                                            + \"<br>\");"},"startColumn":21,"startLine":85}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02306.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":49,"endLine":75,"snippet":{"text":"                    idc.search(base, filter, sc);"},"startColumn":21,"startLine":75}}}],"message":{"text":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data."},"properties":{},"ruleId":"java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02306.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":93,"snippet":{"text":"                    response.getWriter()\n                            .println(\n                                    \"LDAP query results:<br>\"\n                                            + \"Record found with name \"\n                                            + attr.get()\n                                            + \"<br>\"\n                                            + \"Address: \"\n                                            + attr2.get()\n                                            + \"<br>\");"},"startColumn":21,"startLine":85}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02307.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":83,"endLine":68,"snippet":{"text":"                md = java.security.MessageDigest.getInstance(\"SHA1\", provider[0]);"},"startColumn":17,"startLine":68}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02307.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":77,"endLine":70,"snippet":{"text":"                md = java.security.MessageDigest.getInstance(\"SHA1\", \"SUN\");"},"startColumn":17,"startLine":70}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02308.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":101,"endLine":63,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"SHA1\", \"SUN\");"},"startColumn":13,"startLine":63}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02311.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":63,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"MD5\");"},"startColumn":86,"startLine":63}}}],"message":{"text":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-md5.use-of-md5"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02313.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":79,"endLine":66,"snippet":{"text":"        out.format(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":66}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02314.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":67,"endLine":64,"snippet":{"text":"        response.getWriter().format(java.util.Locale.US, bar, obj);"},"startColumn":9,"startLine":64}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02315.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":64,"snippet":{"text":"        response.getWriter().format(\"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":64}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02316.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":64,"snippet":{"text":"        response.getWriter().format(bar, obj);"},"startColumn":9,"startLine":64}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02317.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":64,"snippet":{"text":"        response.getWriter().format(bar, obj);"},"startColumn":9,"startLine":64}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02318.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":63,"snippet":{"text":"        response.getWriter().print(bar.toCharArray());"},"startColumn":9,"startLine":63}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02319.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":40,"endLine":63,"snippet":{"text":"        response.getWriter().print(bar);"},"startColumn":9,"startLine":63}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02320.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":64,"snippet":{"text":"        response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":64}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02321.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":64,"snippet":{"text":"        response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":64}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02322.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":64,"snippet":{"text":"        response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":64}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02323.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":64,"snippet":{"text":"        response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":64}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02324.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":64,"snippet":{"text":"        response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":64}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02325.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":42,"endLine":63,"snippet":{"text":"        response.getWriter().println(bar);"},"startColumn":9,"startLine":63}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02326.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":63,"snippet":{"text":"        response.getWriter().write(bar.toCharArray());"},"startColumn":9,"startLine":63}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02327.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":69,"endLine":66,"snippet":{"text":"            response.getWriter().write(bar.toCharArray(), 0, length);"},"startColumn":13,"startLine":66}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02328.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":69,"endLine":66,"snippet":{"text":"            response.getWriter().write(bar.toCharArray(), 0, length);"},"startColumn":13,"startLine":66}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02329.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":69,"endLine":66,"snippet":{"text":"            response.getWriter().write(bar.toCharArray(), 0, length);"},"startColumn":13,"startLine":66}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02330.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":69,"endLine":66,"snippet":{"text":"            response.getWriter().write(bar.toCharArray(), 0, length);"},"startColumn":13,"startLine":66}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02331.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":40,"endLine":63,"snippet":{"text":"        response.getWriter().write(bar);"},"startColumn":9,"startLine":63}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02332.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":40,"endLine":63,"snippet":{"text":"        response.getWriter().write(bar);"},"startColumn":9,"startLine":63}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02333.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":36,"endLine":72,"snippet":{"text":"        argList.add(\"echo \" + bar);"},"startColumn":9,"startLine":72}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02334.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":36,"endLine":72,"snippet":{"text":"        argList.add(\"echo \" + bar);"},"startColumn":9,"startLine":72}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02340.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":47,"endLine":85,"snippet":{"text":"            Process p = r.exec(args, argsEnv);"},"startColumn":13,"startLine":85}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02341.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":97,"endLine":71,"snippet":{"text":"            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":71}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02342.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":52,"endLine":72,"snippet":{"text":"            Process p = r.exec(cmd + bar, argsEnv);"},"startColumn":13,"startLine":72}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02343.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":98,"endLine":73,"snippet":{"text":"            Process p =\n                    r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":72}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02344.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":68,"snippet":{"text":"            Process p = r.exec(cmd, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":68}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02352.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":77,"endLine":69,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' with value: '10340' saved in session.\");"},"startColumn":9,"startLine":65}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02353.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":68,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},"startColumn":13,"startLine":67}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02354.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":72,"endLine":68,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(sql, new int[] {1, 2});"},"startColumn":13,"startLine":67}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02355.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":68,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"});"},"startColumn":13,"startLine":67}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02356.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":82,"endLine":65,"snippet":{"text":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql);"},"startColumn":13,"startLine":65}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02357.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":32,"endLine":80,"snippet":{"text":"            java.util.List<String> results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(\n                            sql,\n                            new org.springframework.jdbc.core.RowMapper<String>() {\n                                @Override\n                                public String mapRow(java.sql.ResultSet rs, int rowNum)\n                                        throws java.sql.SQLException {\n                                    try {\n                                        return rs.getString(\"USERNAME\");\n                                    } catch (java.sql.SQLException e) {\n                                        if (org.owasp.benchmark.helpers.DatabaseHelper\n                                                .hideSQLErrors) {\n                                            return \"Error processing query.\";\n                                        } else throw e;\n                                    }\n                                }\n                            });"},"startColumn":13,"startLine":64}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02358.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":95,"endLine":65,"snippet":{"text":"            java.util.List<java.util.Map<String, Object>> list =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql);"},"startColumn":13,"startLine":64}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02359.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":68,"snippet":{"text":"            Long results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class);"},"startColumn":13,"startLine":66}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02359.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":89,"endLine":69,"snippet":{"text":"            response.getWriter().println(\"Your results are: \" + String.valueOf(results));"},"startColumn":13,"startLine":69}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02360.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":68,"snippet":{"text":"            Long results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class);"},"startColumn":13,"startLine":66}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02360.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":89,"endLine":69,"snippet":{"text":"            response.getWriter().println(\"Your results are: \" + String.valueOf(results));"},"startColumn":13,"startLine":69}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02361.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":65,"endLine":67,"snippet":{"text":"            Object results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, new Object[] {}, String.class);"},"startColumn":13,"startLine":65}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02362.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":97,"endLine":65,"snippet":{"text":"            org.springframework.jdbc.support.rowset.SqlRowSet results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql);"},"startColumn":13,"startLine":64}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02363.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":65,"snippet":{"text":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);"},"startColumn":13,"startLine":65}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02364.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":36,"endLine":67,"snippet":{"text":"            statement.execute(sql);"},"startColumn":13,"startLine":67}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02365.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":78,"endLine":67,"snippet":{"text":"            statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},"startColumn":13,"startLine":67}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02366.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":78,"endLine":67,"snippet":{"text":"            statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},"startColumn":13,"startLine":67}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02367.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":67,"snippet":{"text":"            statement.execute(sql, new int[] {1, 2});"},"startColumn":13,"startLine":67}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02368.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":67,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            int count = statement.executeUpdate(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},"startColumn":13,"startLine":65}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02369.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":72,"endLine":67,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            int count = statement.executeUpdate(sql, new int[] {1, 2});"},"startColumn":13,"startLine":65}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02370.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":99,"endLine":80,"snippet":{"text":"                            xp.compile(expression)\n                                    .evaluate(xmlDocument, javax.xml.xpath.XPathConstants.NODESET);"},"startColumn":29,"startLine":79}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a XPath evaluate or compile command. This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized. Xpath injection could lead to unauthorized access to sensitive information in XML documents. Instead, thoroughly sanitize user input or use parameterized xpath queries if you can."},"properties":{},"ruleId":"java.lang.security.audit.tainted-xpath-from-http-request.tainted-xpath-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02370.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":79,"endLine":86,"snippet":{"text":"                response.getWriter().println(value.getTextContent() + \"<br/>\");"},"startColumn":17,"startLine":86}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02373.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":61,"snippet":{"text":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},"startColumn":69,"startLine":61}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02373.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":64,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":64}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02373.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":64,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":64}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02374.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":61,"snippet":{"text":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},"startColumn":69,"startLine":61}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02374.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":64,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":64}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02374.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":64,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":64}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02375.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":58,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":58}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02375.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":58,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":58}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02376.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":58,"endLine":62,"snippet":{"text":"                    ctx.search(base, filter, filters, sc);"},"startColumn":21,"startLine":62}}}],"message":{"text":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data."},"properties":{},"ruleId":"java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02377.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":69,"endLine":50,"snippet":{"text":"        java.io.File fileTarget = new java.io.File(bar, \"/Test.txt\");"},"startColumn":22,"startLine":50}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02378.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":64,"endLine":67,"snippet":{"text":"            java.io.File fileTarget = new java.io.File(fileURI);"},"startColumn":26,"startLine":67}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02379.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":64,"endLine":70,"snippet":{"text":"            java.io.File fileTarget = new java.io.File(fileURI);"},"startColumn":26,"startLine":70}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02380.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":56,"snippet":{"text":"            fos = new java.io.FileOutputStream(new java.io.File(fileName));"},"startColumn":13,"startLine":56}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02380.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":69,"snippet":{"text":"                    fos = null;"},"startColumn":21,"startLine":69}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02381.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":92,"endLine":62,"snippet":{"text":"        java.io.FileOutputStream fos =\n                new java.io.FileOutputStream(new java.io.FileInputStream(fileName).getFD()); ) {"},"startColumn":34,"startLine":61}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02382.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":64,"endLine":56,"snippet":{"text":"            fos = new java.io.FileOutputStream(fileName, false);"},"startColumn":13,"startLine":56}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02382.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":69,"snippet":{"text":"                    fos = null;"},"startColumn":21,"startLine":69}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02383.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":56,"snippet":{"text":"            fos = new java.io.FileOutputStream(fileName);"},"startColumn":13,"startLine":56}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02383.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":69,"snippet":{"text":"                    fos = null;"},"startColumn":21,"startLine":69}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02384.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":49,"endLine":63,"snippet":{"text":"                    idc.search(base, filter, sc);"},"startColumn":21,"startLine":63}}}],"message":{"text":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data."},"properties":{},"ruleId":"java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02385.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":83,"endLine":56,"snippet":{"text":"                md = java.security.MessageDigest.getInstance(\"SHA1\", provider[0]);"},"startColumn":17,"startLine":56}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02385.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":77,"endLine":58,"snippet":{"text":"                md = java.security.MessageDigest.getInstance(\"SHA1\", \"SUN\");"},"startColumn":17,"startLine":58}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02386.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":101,"endLine":51,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"SHA1\", \"SUN\");"},"startColumn":13,"startLine":51}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02387.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":51,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"MD5\");"},"startColumn":86,"startLine":51}}}],"message":{"text":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-md5.use-of-md5"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02388.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":51,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"MD5\");"},"startColumn":86,"startLine":51}}}],"message":{"text":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-md5.use-of-md5"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02414.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":36,"endLine":60,"snippet":{"text":"        argList.add(\"echo \" + bar);"},"startColumn":9,"startLine":60}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02428.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":43,"endLine":59,"snippet":{"text":"            Process p = r.exec(cmd + bar);"},"startColumn":13,"startLine":59}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02429.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":38,"endLine":71,"snippet":{"text":"            Process p = r.exec(args);"},"startColumn":13,"startLine":71}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02430.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":47,"endLine":73,"snippet":{"text":"            Process p = r.exec(args, argsEnv);"},"startColumn":13,"startLine":73}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02431.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":47,"endLine":59,"snippet":{"text":"            Process p = r.exec(args, argsEnv);"},"startColumn":13,"startLine":59}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02432.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":97,"endLine":73,"snippet":{"text":"            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":73}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02433.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":97,"endLine":73,"snippet":{"text":"            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":73}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02458.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":66,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":66}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02458.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":66,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":66}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02462.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":52,"snippet":{"text":"        java.io.File fileTarget =\n                new java.io.File(\n                        new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR), bar);"},"startColumn":22,"startLine":50}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02463.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":87,"endLine":51,"snippet":{"text":"        java.io.File fileTarget =\n                new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar);"},"startColumn":22,"startLine":50}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02464.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":50,"snippet":{"text":"        java.io.File fileTarget = new java.io.File(bar);"},"startColumn":22,"startLine":50}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02465.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":74,"endLine":55,"snippet":{"text":"            fis = new java.io.FileInputStream(new java.io.File(fileName));"},"startColumn":19,"startLine":55}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02466.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":74,"endLine":55,"snippet":{"text":"            fis = new java.io.FileInputStream(new java.io.File(fileName));"},"startColumn":19,"startLine":55}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02467.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":55,"snippet":{"text":"            fis = new java.io.FileInputStream(fileName);"},"startColumn":19,"startLine":55}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02468.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":92,"endLine":62,"snippet":{"text":"        java.io.FileOutputStream fos =\n                new java.io.FileOutputStream(new java.io.FileInputStream(fileName).getFD()); ) {"},"startColumn":34,"startLine":61}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02469.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":64,"endLine":56,"snippet":{"text":"            fos = new java.io.FileOutputStream(fileName, false);"},"startColumn":13,"startLine":56}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02469.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":69,"snippet":{"text":"                    fos = null;"},"startColumn":21,"startLine":69}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02470.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":64,"endLine":56,"snippet":{"text":"            fos = new java.io.FileOutputStream(fileName, false);"},"startColumn":13,"startLine":56}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02470.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":69,"snippet":{"text":"                    fos = null;"},"startColumn":21,"startLine":69}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02472.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":58,"endLine":64,"snippet":{"text":"                    idc.search(base, filter, filters, sc);"},"startColumn":21,"startLine":64}}}],"message":{"text":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data."},"properties":{},"ruleId":"java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02472.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":81,"snippet":{"text":"                    response.getWriter()\n                            .println(\n                                    \"LDAP query results:<br>\"\n                                            + \"Record found with name \"\n                                            + attr.get()\n                                            + \"<br>\"\n                                            + \"Address: \"\n                                            + attr2.get()\n                                            + \"<br>\");"},"startColumn":21,"startLine":73}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02474.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":101,"endLine":51,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"SHA1\", \"SUN\");"},"startColumn":13,"startLine":51}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02475.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":51,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"MD5\");"},"startColumn":86,"startLine":51}}}],"message":{"text":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-md5.use-of-md5"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02476.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":51,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"MD5\");"},"startColumn":86,"startLine":51}}}],"message":{"text":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-md5.use-of-md5"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02480.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":51,"snippet":{"text":"        response.getWriter().print(bar.toCharArray());"},"startColumn":9,"startLine":51}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02481.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":51,"snippet":{"text":"        response.getWriter().print(bar.toCharArray());"},"startColumn":9,"startLine":51}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02482.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":51,"snippet":{"text":"        response.getWriter().print(bar.toCharArray());"},"startColumn":9,"startLine":51}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02483.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":40,"endLine":51,"snippet":{"text":"        response.getWriter().print(bar);"},"startColumn":9,"startLine":51}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02484.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":40,"endLine":51,"snippet":{"text":"        response.getWriter().print(bar);"},"startColumn":9,"startLine":51}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02485.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":52,"snippet":{"text":"        response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":52}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02486.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":52,"snippet":{"text":"        response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":52}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02487.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":52,"snippet":{"text":"        response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":52}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02488.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":52,"snippet":{"text":"        response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":52}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02489.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":52,"snippet":{"text":"        response.getWriter().printf(bar, obj);"},"startColumn":9,"startLine":52}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02490.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":52,"snippet":{"text":"        response.getWriter().printf(bar, obj);"},"startColumn":9,"startLine":52}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02491.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":51,"snippet":{"text":"        response.getWriter().println(bar.toCharArray());"},"startColumn":9,"startLine":51}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02492.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":51,"snippet":{"text":"        response.getWriter().write(bar.toCharArray());"},"startColumn":9,"startLine":51}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02493.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":69,"endLine":54,"snippet":{"text":"            response.getWriter().write(bar.toCharArray(), 0, length);"},"startColumn":13,"startLine":54}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02494.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":40,"endLine":51,"snippet":{"text":"        response.getWriter().write(bar);"},"startColumn":9,"startLine":51}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02495.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":55,"endLine":54,"snippet":{"text":"            response.getWriter().write(bar, 0, length);"},"startColumn":13,"startLine":54}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02509.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":62,"endLine":51,"snippet":{"text":"        response.getWriter().write(\"Parameter value: \" + bar);"},"startColumn":9,"startLine":51}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02510.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":47,"endLine":59,"snippet":{"text":"            Process p = r.exec(args, argsEnv);"},"startColumn":13,"startLine":59}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02511.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":47,"endLine":59,"snippet":{"text":"            Process p = r.exec(args, argsEnv);"},"startColumn":13,"startLine":59}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02512.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":97,"endLine":59,"snippet":{"text":"            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":59}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02513.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":97,"endLine":59,"snippet":{"text":"            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":59}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02514.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":58,"snippet":{"text":"            Process p = r.exec(cmd, argsEnv);"},"startColumn":13,"startLine":58}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02515.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":58,"snippet":{"text":"            Process p = r.exec(cmd, argsEnv);"},"startColumn":13,"startLine":58}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02516.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":56,"snippet":{"text":"            Process p = r.exec(cmd, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":56}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02517.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":56,"snippet":{"text":"            Process p = r.exec(cmd, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":56}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02518.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":56,"snippet":{"text":"            Process p = r.exec(cmd, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":56}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02523.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":57,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' with value: 10340 saved in session.\");"},"startColumn":9,"startLine":53}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02524.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":52,"endLine":51,"snippet":{"text":"        request.getSession().putValue(\"userid\", bar);"},"startColumn":49,"startLine":51}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"properties":{},"ruleId":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02524.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":57,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: 'userid' with value: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' saved in session.\");"},"startColumn":9,"startLine":53}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02525.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":52,"endLine":51,"snippet":{"text":"        request.getSession().putValue(\"userid\", bar);"},"startColumn":49,"startLine":51}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"properties":{},"ruleId":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02525.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":57,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: 'userid' with value: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' saved in session.\");"},"startColumn":9,"startLine":53}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02526.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":52,"endLine":51,"snippet":{"text":"        request.getSession().putValue(\"userid\", bar);"},"startColumn":49,"startLine":51}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"properties":{},"ruleId":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02526.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":57,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: 'userid' with value: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' saved in session.\");"},"startColumn":9,"startLine":53}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02527.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":77,"endLine":57,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' with value: '10340' saved in session.\");"},"startColumn":9,"startLine":53}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02528.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":80,"endLine":55,"snippet":{"text":"            java.sql.CallableStatement statement = connection.prepareCall(sql);"},"startColumn":13,"startLine":55}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02529.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":80,"endLine":55,"snippet":{"text":"            java.sql.CallableStatement statement = connection.prepareCall(sql);"},"startColumn":13,"startLine":55}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02530.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":73,"endLine":60,"snippet":{"text":"            java.sql.CallableStatement statement =\n                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},"startColumn":13,"startLine":55}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02531.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":56,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},"startColumn":13,"startLine":55}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02532.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":66,"endLine":59,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);"},"startColumn":13,"startLine":55}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02533.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":73,"endLine":60,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},"startColumn":13,"startLine":55}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02534.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":73,"endLine":60,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},"startColumn":13,"startLine":55}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02535.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":73,"endLine":60,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},"startColumn":13,"startLine":55}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02536.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":53,"snippet":{"text":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);"},"startColumn":13,"startLine":53}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02537.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":53,"snippet":{"text":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);"},"startColumn":13,"startLine":53}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02538.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":65,"endLine":55,"snippet":{"text":"            Object results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, new Object[] {}, String.class);"},"startColumn":13,"startLine":53}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02539.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":97,"endLine":53,"snippet":{"text":"            org.springframework.jdbc.support.rowset.SqlRowSet results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql);"},"startColumn":13,"startLine":52}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02540.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":53,"snippet":{"text":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);"},"startColumn":13,"startLine":53}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02541.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":53,"endLine":56,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            statement.addBatch(sql);\n            int[] counts = statement.executeBatch();"},"startColumn":13,"startLine":53}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02542.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":36,"endLine":55,"snippet":{"text":"            statement.execute(sql);"},"startColumn":13,"startLine":55}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02543.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":78,"endLine":55,"snippet":{"text":"            statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},"startColumn":13,"startLine":55}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02544.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":55,"snippet":{"text":"            statement.execute(sql, new int[] {1, 2});"},"startColumn":13,"startLine":55}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02545.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":55,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            int count = statement.executeUpdate(sql);"},"startColumn":13,"startLine":53}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02546.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":72,"endLine":55,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            int count = statement.executeUpdate(sql, new int[] {1, 2});"},"startColumn":13,"startLine":53}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02548.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":86,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":86}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02548.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":86,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":86}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02549.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":86,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":86}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02549.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":86,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":86}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02550.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":83,"snippet":{"text":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},"startColumn":69,"startLine":83}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02550.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":86,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":86}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02550.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":86,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":86}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02553.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":58,"endLine":84,"snippet":{"text":"                    ctx.search(base, filter, filters, sc);"},"startColumn":21,"startLine":84}}}],"message":{"text":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data."},"properties":{},"ruleId":"java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02553.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":101,"snippet":{"text":"                    response.getWriter()\n                            .println(\n                                    \"LDAP query results:<br>\"\n                                            + \"Record found with name \"\n                                            + attr.get()\n                                            + \"<br>\"\n                                            + \"Address: \"\n                                            + attr2.get()\n                                            + \"<br>\");"},"startColumn":21,"startLine":93}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02554.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":74,"snippet":{"text":"        java.io.File fileTarget =\n                new java.io.File(\n                        new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR), bar);"},"startColumn":22,"startLine":72}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02555.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":72,"snippet":{"text":"        java.io.File fileTarget = new java.io.File(bar);"},"startColumn":22,"startLine":72}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02556.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":72,"snippet":{"text":"        java.io.File fileTarget = new java.io.File(bar);"},"startColumn":22,"startLine":72}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02557.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":69,"endLine":72,"snippet":{"text":"        java.io.File fileTarget = new java.io.File(bar, \"/Test.txt\");"},"startColumn":22,"startLine":72}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02558.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":69,"endLine":72,"snippet":{"text":"        java.io.File fileTarget = new java.io.File(bar, \"/Test.txt\");"},"startColumn":22,"startLine":72}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02559.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":64,"endLine":89,"snippet":{"text":"            java.io.File fileTarget = new java.io.File(fileURI);"},"startColumn":26,"startLine":89}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02560.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":74,"endLine":77,"snippet":{"text":"            fis = new java.io.FileInputStream(new java.io.File(fileName));"},"startColumn":19,"startLine":77}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02561.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":77,"snippet":{"text":"            fis = new java.io.FileInputStream(fileName);"},"startColumn":19,"startLine":77}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02562.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":77,"snippet":{"text":"            fis = new java.io.FileInputStream(fileName);"},"startColumn":19,"startLine":77}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02563.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":82,"endLine":78,"snippet":{"text":"            fos = new java.io.FileOutputStream(new java.io.File(fileName), false);"},"startColumn":13,"startLine":78}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02563.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":91,"snippet":{"text":"                    fos = null;"},"startColumn":21,"startLine":91}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02564.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":82,"endLine":78,"snippet":{"text":"            fos = new java.io.FileOutputStream(new java.io.File(fileName), false);"},"startColumn":13,"startLine":78}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02564.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":91,"snippet":{"text":"                    fos = null;"},"startColumn":21,"startLine":91}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02565.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":92,"endLine":84,"snippet":{"text":"        java.io.FileOutputStream fos =\n                new java.io.FileOutputStream(new java.io.FileInputStream(fileName).getFD()); ) {"},"startColumn":34,"startLine":83}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02566.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":92,"endLine":84,"snippet":{"text":"        java.io.FileOutputStream fos =\n                new java.io.FileOutputStream(new java.io.FileInputStream(fileName).getFD()); ) {"},"startColumn":34,"startLine":83}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02567.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":64,"endLine":78,"snippet":{"text":"            fos = new java.io.FileOutputStream(fileName, false);"},"startColumn":13,"startLine":78}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02567.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":91,"snippet":{"text":"                    fos = null;"},"startColumn":21,"startLine":91}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02568.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":78,"snippet":{"text":"            fos = new java.io.FileOutputStream(fileName);"},"startColumn":13,"startLine":78}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02568.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":91,"snippet":{"text":"                    fos = null;"},"startColumn":21,"startLine":91}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02569.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":78,"snippet":{"text":"            fos = new java.io.FileOutputStream(fileName);"},"startColumn":13,"startLine":78}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02569.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":91,"snippet":{"text":"                    fos = null;"},"startColumn":21,"startLine":91}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02571.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":58,"endLine":86,"snippet":{"text":"                    idc.search(base, filter, filters, sc);"},"startColumn":21,"startLine":86}}}],"message":{"text":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data."},"properties":{},"ruleId":"java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02571.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":103,"snippet":{"text":"                    response.getWriter()\n                            .println(\n                                    \"LDAP query results:<br>\"\n                                            + \"Record found with name \"\n                                            + attr.get()\n                                            + \"<br>\"\n                                            + \"Address: \"\n                                            + attr2.get()\n                                            + \"<br>\");"},"startColumn":21,"startLine":95}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02572.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":49,"endLine":85,"snippet":{"text":"                    idc.search(base, filter, sc);"},"startColumn":21,"startLine":85}}}],"message":{"text":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data."},"properties":{},"ruleId":"java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02572.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":103,"snippet":{"text":"                    response.getWriter()\n                            .println(\n                                    \"LDAP query results:<br>\"\n                                            + \"Record found with name \"\n                                            + attr.get()\n                                            + \"<br>\"\n                                            + \"Address: \"\n                                            + attr2.get()\n                                            + \"<br>\");"},"startColumn":21,"startLine":95}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02573.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":101,"endLine":73,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"SHA1\", \"SUN\");"},"startColumn":13,"startLine":73}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02574.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":101,"endLine":73,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"SHA1\", \"SUN\");"},"startColumn":13,"startLine":73}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02575.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":73,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"MD5\");"},"startColumn":86,"startLine":73}}}],"message":{"text":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-md5.use-of-md5"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02578.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":67,"endLine":74,"snippet":{"text":"        response.getWriter().format(java.util.Locale.US, bar, obj);"},"startColumn":9,"startLine":74}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02579.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":74,"snippet":{"text":"        response.getWriter().format(bar, obj);"},"startColumn":9,"startLine":74}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02580.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":74,"snippet":{"text":"        response.getWriter().format(bar, obj);"},"startColumn":9,"startLine":74}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02581.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":74,"snippet":{"text":"        response.getWriter().format(bar, obj);"},"startColumn":9,"startLine":74}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02582.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":73,"snippet":{"text":"        response.getWriter().print(bar.toCharArray());"},"startColumn":9,"startLine":73}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02583.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":40,"endLine":73,"snippet":{"text":"        response.getWriter().print(bar);"},"startColumn":9,"startLine":73}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02584.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":40,"endLine":73,"snippet":{"text":"        response.getWriter().print(bar);"},"startColumn":9,"startLine":73}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02585.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":40,"endLine":73,"snippet":{"text":"        response.getWriter().print(bar);"},"startColumn":9,"startLine":73}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02586.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":40,"endLine":73,"snippet":{"text":"        response.getWriter().print(bar);"},"startColumn":9,"startLine":73}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02587.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":74,"snippet":{"text":"        response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":74}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02588.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":67,"endLine":74,"snippet":{"text":"        response.getWriter().printf(java.util.Locale.US, bar, obj);"},"startColumn":9,"startLine":74}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02589.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":67,"endLine":74,"snippet":{"text":"        response.getWriter().printf(java.util.Locale.US, bar, obj);"},"startColumn":9,"startLine":74}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02590.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":67,"endLine":74,"snippet":{"text":"        response.getWriter().printf(java.util.Locale.US, bar, obj);"},"startColumn":9,"startLine":74}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02591.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":74,"snippet":{"text":"        response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":74}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02592.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":74,"snippet":{"text":"        response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj);"},"startColumn":9,"startLine":74}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02593.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":46,"endLine":74,"snippet":{"text":"        response.getWriter().printf(bar, obj);"},"startColumn":9,"startLine":74}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02594.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":73,"snippet":{"text":"        response.getWriter().println(bar.toCharArray());"},"startColumn":9,"startLine":73}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02595.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":73,"snippet":{"text":"        response.getWriter().println(bar.toCharArray());"},"startColumn":9,"startLine":73}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02596.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":42,"endLine":73,"snippet":{"text":"        response.getWriter().println(bar);"},"startColumn":9,"startLine":73}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02597.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":42,"endLine":73,"snippet":{"text":"        response.getWriter().println(bar);"},"startColumn":9,"startLine":73}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02598.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":42,"endLine":73,"snippet":{"text":"        response.getWriter().println(bar);"},"startColumn":9,"startLine":73}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02599.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":73,"snippet":{"text":"        response.getWriter().write(bar.toCharArray());"},"startColumn":9,"startLine":73}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02600.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":69,"endLine":76,"snippet":{"text":"            response.getWriter().write(bar.toCharArray(), 0, length);"},"startColumn":13,"startLine":76}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02601.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":69,"endLine":76,"snippet":{"text":"            response.getWriter().write(bar.toCharArray(), 0, length);"},"startColumn":13,"startLine":76}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02608.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":62,"endLine":73,"snippet":{"text":"        response.getWriter().write(\"Parameter value: \" + bar);"},"startColumn":9,"startLine":73}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02609.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":62,"endLine":73,"snippet":{"text":"        response.getWriter().write(\"Parameter value: \" + bar);"},"startColumn":9,"startLine":73}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02610.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":47,"endLine":95,"snippet":{"text":"            Process p = r.exec(args, argsEnv);"},"startColumn":13,"startLine":95}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02611.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":97,"endLine":95,"snippet":{"text":"            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":95}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02612.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":97,"endLine":81,"snippet":{"text":"            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":81}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02613.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":78,"snippet":{"text":"            Process p = r.exec(cmd, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":78}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02622.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":77,"endLine":79,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' with value: '10340' saved in session.\");"},"startColumn":9,"startLine":75}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02623.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":73,"snippet":{"text":"        request.getSession().setAttribute(\"userid\", bar);"},"startColumn":53,"startLine":73}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"properties":{},"ruleId":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02623.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":79,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: 'userid' with value: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' saved in session.\");"},"startColumn":9,"startLine":75}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02624.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":73,"snippet":{"text":"        request.getSession().setAttribute(\"userid\", bar);"},"startColumn":53,"startLine":73}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"properties":{},"ruleId":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02624.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":79,"snippet":{"text":"        response.getWriter()\n                .println(\n                        \"Item: 'userid' with value: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n                                + \"' saved in session.\");"},"startColumn":9,"startLine":75}}}],"message":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"properties":{},"ruleId":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02625.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":80,"endLine":77,"snippet":{"text":"            java.sql.CallableStatement statement = connection.prepareCall(sql);"},"startColumn":13,"startLine":77}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02626.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":80,"endLine":77,"snippet":{"text":"            java.sql.CallableStatement statement = connection.prepareCall(sql);"},"startColumn":13,"startLine":77}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02627.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":66,"endLine":81,"snippet":{"text":"            java.sql.CallableStatement statement =\n                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);"},"startColumn":13,"startLine":77}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02628.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":66,"endLine":81,"snippet":{"text":"            java.sql.CallableStatement statement =\n                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);"},"startColumn":13,"startLine":77}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02629.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":66,"endLine":81,"snippet":{"text":"            java.sql.CallableStatement statement =\n                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);"},"startColumn":13,"startLine":77}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02630.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":73,"endLine":82,"snippet":{"text":"            java.sql.CallableStatement statement =\n                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},"startColumn":13,"startLine":77}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02631.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":77,"snippet":{"text":"            java.sql.PreparedStatement statement = connection.prepareStatement(sql);"},"startColumn":13,"startLine":77}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02632.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":77,"snippet":{"text":"            java.sql.PreparedStatement statement = connection.prepareStatement(sql);"},"startColumn":13,"startLine":77}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02633.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":78,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},"startColumn":13,"startLine":77}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02634.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":66,"endLine":81,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);"},"startColumn":13,"startLine":77}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02635.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":73,"endLine":82,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);"},"startColumn":13,"startLine":77}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02636.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":78,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"});"},"startColumn":13,"startLine":77}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02637.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":78,"snippet":{"text":"            java.sql.PreparedStatement statement =\n                    connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"});"},"startColumn":13,"startLine":77}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02638.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":75,"snippet":{"text":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);"},"startColumn":13,"startLine":75}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02639.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":82,"endLine":75,"snippet":{"text":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql);"},"startColumn":13,"startLine":75}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02640.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":82,"endLine":75,"snippet":{"text":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql);"},"startColumn":13,"startLine":75}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02641.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":32,"endLine":90,"snippet":{"text":"            java.util.List<String> results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(\n                            sql,\n                            new org.springframework.jdbc.core.RowMapper<String>() {\n                                @Override\n                                public String mapRow(java.sql.ResultSet rs, int rowNum)\n                                        throws java.sql.SQLException {\n                                    try {\n                                        return rs.getString(\"USERNAME\");\n                                    } catch (java.sql.SQLException e) {\n                                        if (org.owasp.benchmark.helpers.DatabaseHelper\n                                                .hideSQLErrors) {\n                                            return \"Error processing query.\";\n                                        } else throw e;\n                                    }\n                                }\n                            });"},"startColumn":13,"startLine":74}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02642.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":95,"endLine":75,"snippet":{"text":"            java.util.List<java.util.Map<String, Object>> list =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql);"},"startColumn":13,"startLine":74}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02643.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":95,"endLine":75,"snippet":{"text":"            java.util.List<java.util.Map<String, Object>> list =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql);"},"startColumn":13,"startLine":74}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02644.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":97,"endLine":75,"snippet":{"text":"            org.springframework.jdbc.support.rowset.SqlRowSet results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql);"},"startColumn":13,"startLine":74}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02645.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":97,"endLine":75,"snippet":{"text":"            org.springframework.jdbc.support.rowset.SqlRowSet results =\n                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql);"},"startColumn":13,"startLine":74}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02646.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":75,"snippet":{"text":"            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);"},"startColumn":13,"startLine":75}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02647.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":53,"endLine":78,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            statement.addBatch(sql);\n            int[] counts = statement.executeBatch();"},"startColumn":13,"startLine":75}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02648.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":78,"endLine":77,"snippet":{"text":"            statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},"startColumn":13,"startLine":77}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02649.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":77,"snippet":{"text":"            statement.execute(sql, new int[] {1, 2});"},"startColumn":13,"startLine":77}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02650.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":77,"snippet":{"text":"            statement.execute(sql, new int[] {1, 2});"},"startColumn":13,"startLine":77}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02651.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":77,"snippet":{"text":"            statement.execute(sql, new String[] {\"username\", \"password\"});"},"startColumn":13,"startLine":77}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02652.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":75,"endLine":77,"snippet":{"text":"            statement.execute(sql, new String[] {\"username\", \"password\"});"},"startColumn":13,"startLine":77}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02653.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":65,"endLine":77,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            java.sql.ResultSet rs = statement.executeQuery(sql);"},"startColumn":13,"startLine":75}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02653.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":65,"endLine":77,"snippet":{"text":"            java.sql.ResultSet rs = statement.executeQuery(sql);"},"startColumn":13,"startLine":77}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02654.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":77,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            int count = statement.executeUpdate(sql);"},"startColumn":13,"startLine":75}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02655.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":77,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            int count = statement.executeUpdate(sql);"},"startColumn":13,"startLine":75}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02656.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":77,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            int count = statement.executeUpdate(sql, java.sql.Statement.RETURN_GENERATED_KEYS);"},"startColumn":13,"startLine":75}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02657.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":72,"endLine":77,"snippet":{"text":"            java.sql.Statement statement =\n                    org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement();\n            int count = statement.executeUpdate(sql, new int[] {1, 2});"},"startColumn":13,"startLine":75}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"properties":{},"ruleId":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02658.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":65,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":65}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02658.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":65,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":65}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02660.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":60,"snippet":{"text":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},"startColumn":69,"startLine":60}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02660.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":63,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":63}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02660.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":63,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":63}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02661.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":60,"snippet":{"text":"            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");"},"startColumn":69,"startLine":60}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02661.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":63,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":63}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02661.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":63,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":63}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02663.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":86,"endLine":57,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":42,"startLine":57}}}],"message":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"properties":{},"ruleId":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02663.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":85,"endLine":57,"snippet":{"text":"            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();"},"startColumn":80,"startLine":57}}}],"message":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"properties":{},"ruleId":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02664.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":69,"endLine":49,"snippet":{"text":"        java.io.File fileTarget = new java.io.File(bar, \"/Test.txt\");"},"startColumn":22,"startLine":49}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02665.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":74,"endLine":54,"snippet":{"text":"            fis = new java.io.FileInputStream(new java.io.File(fileName));"},"startColumn":19,"startLine":54}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02666.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":54,"snippet":{"text":"            fis = new java.io.FileInputStream(fileName);"},"startColumn":19,"startLine":54}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02667.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":56,"endLine":54,"snippet":{"text":"            fis = new java.io.FileInputStream(fileName);"},"startColumn":19,"startLine":54}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02668.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":64,"endLine":55,"snippet":{"text":"            fos = new java.io.FileOutputStream(fileName, false);"},"startColumn":13,"startLine":55}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02668.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":68,"snippet":{"text":"                    fos = null;"},"startColumn":21,"startLine":68}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02669.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":57,"endLine":55,"snippet":{"text":"            fos = new java.io.FileOutputStream(fileName);"},"startColumn":13,"startLine":55}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02669.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":31,"endLine":68,"snippet":{"text":"                    fos = null;"},"startColumn":21,"startLine":68}}}],"message":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"properties":{},"ruleId":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02670.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":83,"endLine":55,"snippet":{"text":"                md = java.security.MessageDigest.getInstance(\"SHA1\", provider[0]);"},"startColumn":17,"startLine":55}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02670.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":77,"endLine":57,"snippet":{"text":"                md = java.security.MessageDigest.getInstance(\"SHA1\", \"SUN\");"},"startColumn":17,"startLine":57}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02671.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":83,"endLine":55,"snippet":{"text":"                md = java.security.MessageDigest.getInstance(\"SHA1\", provider[0]);"},"startColumn":17,"startLine":55}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02671.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":77,"endLine":57,"snippet":{"text":"                md = java.security.MessageDigest.getInstance(\"SHA1\", \"SUN\");"},"startColumn":17,"startLine":57}}}],"message":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02674.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":50,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"MD5\");"},"startColumn":86,"startLine":50}}}],"message":{"text":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-md5.use-of-md5"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02675.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":91,"endLine":50,"snippet":{"text":"            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"MD5\");"},"startColumn":86,"startLine":50}}}],"message":{"text":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead."},"properties":{},"ruleId":"java.lang.security.audit.crypto.use-of-md5.use-of-md5"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02697.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":36,"endLine":59,"snippet":{"text":"        argList.add(\"echo \" + bar);"},"startColumn":9,"startLine":59}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02698.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":36,"endLine":59,"snippet":{"text":"        argList.add(\"echo \" + bar);"},"startColumn":9,"startLine":59}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02699.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":61,"snippet":{"text":"        ProcessBuilder pb = new ProcessBuilder(args);"},"startColumn":9,"startLine":61}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02699.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":36,"endLine":64,"snippet":{"text":"            Process p = pb.start();"},"startColumn":13,"startLine":64}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02713.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":97,"endLine":58,"snippet":{"text":"            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":58}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02714.java","uriBaseId":"%SRCROOT%"},"region":{"endColumn":96,"endLine":55,"snippet":{"text":"            Process p = r.exec(cmd, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));"},"startColumn":13,"startLine":55}}}],"message":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"properties":{},"ruleId":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"}],"tool":{"driver":{"name":"Semgrep OSS","rules":[{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries."},"help":{"markdown":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.\n\n#### 💎 Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.aws-lambda.security.tainted-sql-string.tainted-sql-string)\n - [https://owasp.org/www-community/attacks/SQL_Injection](https://owasp.org/www-community/attacks/SQL_Injection)\n","text":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.\n💎 Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.aws-lambda.security.tainted-sql-string.tainted-sql-string","id":"java.aws-lambda.security.tainted-sql-string.tainted-sql-string","name":"java.aws-lambda.security.tainted-sql-string.tainted-sql-string","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Semgrep Finding: java.aws-lambda.security.tainted-sql-string.tainted-sql-string"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"help":{"markdown":"Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead.\n\n#### 💎 Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.aws-lambda.security.tainted-sqli.tainted-sqli)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead.\n💎 Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.aws-lambda.security.tainted-sqli.tainted-sqli","id":"java.aws-lambda.security.tainted-sqli.tainted-sqli","name":"java.aws-lambda.security.tainted-sqli.tainted-sqli","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Semgrep Finding: java.aws-lambda.security.tainted-sqli.tainted-sqli"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected the decoding of a JWT token without a verify step. JWT tokens must be verified before use, otherwise the token's integrity is unknown. This means a malicious actor could forge a JWT token with any claims. Call '.verify()' before using the token."},"help":{"markdown":"Detected the decoding of a JWT token without a verify step. JWT tokens must be verified before use, otherwise the token's integrity is unknown. This means a malicious actor could forge a JWT token with any claims. Call '.verify()' before using the token.\n\n#### 💎 Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.java-jwt.security.audit.jwt-decode-without-verify.java-jwt-decode-without-verify)\n - [https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures](https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures)\n","text":"Detected the decoding of a JWT token without a verify step. JWT tokens must be verified before use, otherwise the token's integrity is unknown. This means a malicious actor could forge a JWT token with any claims. Call '.verify()' before using the token.\n💎 Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.java-jwt.security.audit.jwt-decode-without-verify.java-jwt-decode-without-verify","id":"java.java-jwt.security.audit.jwt-decode-without-verify.java-jwt-decode-without-verify","name":"java.java-jwt.security.audit.jwt-decode-without-verify.java-jwt-decode-without-verify","properties":{"precision":"very-high","tags":["CWE-345: Insufficient Verification of Data Authenticity","MEDIUM CONFIDENCE","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Semgrep Finding: java.java-jwt.security.audit.jwt-decode-without-verify.java-jwt-decode-without-verify"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."},"help":{"markdown":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n#### 💎 Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.java-jwt.security.jwt-hardcode.java-jwt-hardcoded-secret)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n","text":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n💎 Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.java-jwt.security.jwt-hardcode.java-jwt-hardcoded-secret","id":"java.java-jwt.security.jwt-hardcode.java-jwt-hardcoded-secret","name":"java.java-jwt.security.jwt-hardcode.java-jwt-hardcoded-secret","properties":{"precision":"very-high","tags":["CWE-798: Use of Hard-coded Credentials","HIGH CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: java.java-jwt.security.jwt-hardcode.java-jwt-hardcoded-secret"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'."},"help":{"markdown":"Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.\n\n#### 💎 Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.java-jwt.security.jwt-none-alg.java-jwt-none-alg)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.\n💎 Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.java-jwt.security.jwt-none-alg.java-jwt-none-alg","id":"java.java-jwt.security.jwt-none-alg.java-jwt-none-alg","name":"java.java-jwt.security.jwt-none-alg.java-jwt-none-alg","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: java.java-jwt.security.jwt-none-alg.java-jwt-none-alg"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"help":{"markdown":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.\n\n#### 💎 Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.jax-rs.security.jax-rs-path-traversal.jax-rs-path-traversal)\n - [https://www.owasp.org/index.php/Path_Traversal](https://www.owasp.org/index.php/Path_Traversal)\n","text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.\n💎 Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.jax-rs.security.jax-rs-path-traversal.jax-rs-path-traversal","id":"java.jax-rs.security.jax-rs-path-traversal.jax-rs-path-traversal","name":"java.jax-rs.security.jax-rs-path-traversal.jax-rs-path-traversal","properties":{"precision":"very-high","tags":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Semgrep Finding: java.jax-rs.security.jax-rs-path-traversal.jax-rs-path-traversal"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"In $METHOD, $X is used to construct a SQL query via string concatenation."},"help":{"markdown":"In $METHOD, $X is used to construct a SQL query via string concatenation.\n\n#### 💎 Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.jboss.security.session_sqli.find-sql-string-concatenation)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"In $METHOD, $X is used to construct a SQL query via string concatenation.\n💎 Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.jboss.security.session_sqli.find-sql-string-concatenation","id":"java.jboss.security.session_sqli.find-sql-string-concatenation","name":"java.jboss.security.session_sqli.find-sql-string-concatenation","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Semgrep Finding: java.jboss.security.session_sqli.find-sql-string-concatenation"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Using less than 128 bits for Blowfish is considered insecure. Use 128 bits or more, or switch to use AES instead."},"help":{"markdown":"Using less than 128 bits for Blowfish is considered insecure. Use 128 bits or more, or switch to use AES instead.\n\n#### 💎 Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.blowfish-insufficient-key-size.blowfish-insufficient-key-size)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Using less than 128 bits for Blowfish is considered insecure. Use 128 bits or more, or switch to use AES instead.\n💎 Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.blowfish-insufficient-key-size.blowfish-insufficient-key-size","id":"java.lang.security.audit.blowfish-insufficient-key-size.blowfish-insufficient-key-size","name":"java.lang.security.audit.blowfish-insufficient-key-size.blowfish-insufficient-key-size","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.blowfish-insufficient-key-size.blowfish-insufficient-key-size"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Using CBC with PKCS5Padding is susceptible to padding oracle attacks. A malicious actor could discern the difference between plaintext with valid or invalid padding. Further, CBC mode does not include any integrity checks. Use 'AES/GCM/NoPadding' instead."},"help":{"markdown":"Using CBC with PKCS5Padding is susceptible to padding oracle attacks. A malicious actor could discern the difference between plaintext with valid or invalid padding. Further, CBC mode does not include any integrity checks. Use 'AES/GCM/NoPadding' instead.\n\n#### 💎 Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.cbc-padding-oracle.cbc-padding-oracle)\n - [https://capec.mitre.org/data/definitions/463.html](https://capec.mitre.org/data/definitions/463.html)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#cipher-modes](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#cipher-modes)\n - [https://find-sec-bugs.github.io/bugs.htm#CIPHER_INTEGRITY](https://find-sec-bugs.github.io/bugs.htm#CIPHER_INTEGRITY)\n","text":"Using CBC with PKCS5Padding is susceptible to padding oracle attacks. A malicious actor could discern the difference between plaintext with valid or invalid padding. Further, CBC mode does not include any integrity checks. Use 'AES/GCM/NoPadding' instead.\n💎 Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.cbc-padding-oracle.cbc-padding-oracle","id":"java.lang.security.audit.cbc-padding-oracle.cbc-padding-oracle","name":"java.lang.security.audit.cbc-padding-oracle.cbc-padding-oracle","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.cbc-padding-oracle.cbc-padding-oracle"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content."},"help":{"markdown":"When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content.\n\n#### 💎 Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.crlf-injection-logs.crlf-injection-logs)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content.\n💎 Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.crlf-injection-logs.crlf-injection-logs","id":"java.lang.security.audit.crlf-injection-logs.crlf-injection-logs","name":"java.lang.security.audit.crlf-injection-logs.crlf-injection-logs","properties":{"precision":"very-high","tags":["CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.crlf-injection-logs.crlf-injection-logs"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."},"help":{"markdown":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information.\n\n#### 💎 Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated)\n - [https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard](https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#algorithms](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#algorithms)\n","text":"DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information.\n💎 Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated","id":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated","name":"java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."},"help":{"markdown":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES.\n\n#### 💎 Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated)\n - [https://csrc.nist.gov/News/2017/Update-to-Current-Use-and-Deprecation-of-TDEA](https://csrc.nist.gov/News/2017/Update-to-Current-Use-and-Deprecation-of-TDEA)\n","text":"Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES.\n💎 Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated","id":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated","name":"java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Cipher in ECB mode is detected. ECB mode produces the same output for the same input each time which allows an attacker to intercept and replay the data. Further, ECB mode does not provide any integrity checking. See https://find-sec-bugs.github.io/bugs.htm#CIPHER_INTEGRITY."},"help":{"markdown":"Cipher in ECB mode is detected. ECB mode produces the same output for the same input each time which allows an attacker to intercept and replay the data. Further, ECB mode does not provide any integrity checking. See https://find-sec-bugs.github.io/bugs.htm#CIPHER_INTEGRITY.\n\n#### 💎 Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.crypto.ecb-cipher.ecb-cipher)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Cipher in ECB mode is detected. ECB mode produces the same output for the same input each time which allows an attacker to intercept and replay the data. Further, ECB mode does not provide any integrity checking. See https://find-sec-bugs.github.io/bugs.htm#CIPHER_INTEGRITY.\n💎 Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.crypto.ecb-cipher.ecb-cipher","id":"java.lang.security.audit.crypto.ecb-cipher.ecb-cipher","name":"java.lang.security.audit.crypto.ecb-cipher.ecb-cipher","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.crypto.ecb-cipher.ecb-cipher"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"GCM IV/nonce is reused: encryption can be totally useless"},"help":{"markdown":"GCM IV/nonce is reused: encryption can be totally useless\n\n#### 💎 Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.crypto.gcm-nonce-reuse.gcm-nonce-reuse)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"GCM IV/nonce is reused: encryption can be totally useless\n💎 Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.crypto.gcm-nonce-reuse.gcm-nonce-reuse","id":"java.lang.security.audit.crypto.gcm-nonce-reuse.gcm-nonce-reuse","name":"java.lang.security.audit.crypto.gcm-nonce-reuse.gcm-nonce-reuse","properties":{"precision":"very-high","tags":["CWE-323: Reusing a Nonce, Key Pair in Encryption","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.crypto.gcm-nonce-reuse.gcm-nonce-reuse"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"NullCipher was detected. This will not encrypt anything; the cipher text will be the same as the plain text. Use a valid, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information."},"help":{"markdown":"NullCipher was detected. This will not encrypt anything; the cipher text will be the same as the plain text. Use a valid, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information.\n\n#### 💎 Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.crypto.no-null-cipher.no-null-cipher)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"NullCipher was detected. This will not encrypt anything; the cipher text will be the same as the plain text. Use a valid, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information.\n💎 Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.crypto.no-null-cipher.no-null-cipher","id":"java.lang.security.audit.crypto.no-null-cipher.no-null-cipher","name":"java.lang.security.audit.crypto.no-null-cipher.no-null-cipher","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.crypto.no-null-cipher.no-null-cipher"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Initialization Vectors (IVs) for block ciphers should be randomly generated each time they are used. Using a static IV means the same plaintext encrypts to the same ciphertext every time, weakening the strength of the encryption."},"help":{"markdown":"Initialization Vectors (IVs) for block ciphers should be randomly generated each time they are used. Using a static IV means the same plaintext encrypts to the same ciphertext every time, weakening the strength of the encryption.\n\n#### 💎 Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.crypto.no-static-initialization-vector.no-static-initialization-vector)\n - [https://cwe.mitre.org/data/definitions/329.html](https://cwe.mitre.org/data/definitions/329.html)\n","text":"Initialization Vectors (IVs) for block ciphers should be randomly generated each time they are used. Using a static IV means the same plaintext encrypts to the same ciphertext every time, weakening the strength of the encryption.\n💎 Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.crypto.no-static-initialization-vector.no-static-initialization-vector","id":"java.lang.security.audit.crypto.no-static-initialization-vector.no-static-initialization-vector","name":"java.lang.security.audit.crypto.no-static-initialization-vector.no-static-initialization-vector","properties":{"precision":"very-high","tags":["CWE-329: Generation of Predictable IV with CBC Mode","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.crypto.no-static-initialization-vector.no-static-initialization-vector"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Using RSA without OAEP mode weakens the encryption."},"help":{"markdown":"Using RSA without OAEP mode weakens the encryption.\n\n#### 💎 Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.crypto.rsa-no-padding.rsa-no-padding)\n - [https://rdist.root.org/2009/10/06/why-rsa-encryption-padding-is-critical/](https://rdist.root.org/2009/10/06/why-rsa-encryption-padding-is-critical/)\n","text":"Using RSA without OAEP mode weakens the encryption.\n💎 Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.crypto.rsa-no-padding.rsa-no-padding","id":"java.lang.security.audit.crypto.rsa-no-padding.rsa-no-padding","name":"java.lang.security.audit.crypto.rsa-no-padding.rsa-no-padding","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.crypto.rsa-no-padding.rsa-no-padding"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."},"help":{"markdown":"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead.\n\n#### 💎 Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.crypto.unencrypted-socket.unencrypted-socket)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead.\n💎 Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.crypto.unencrypted-socket.unencrypted-socket","id":"java.lang.security.audit.crypto.unencrypted-socket.unencrypted-socket","name":"java.lang.security.audit.crypto.unencrypted-socket.unencrypted-socket","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.crypto.unencrypted-socket.unencrypted-socket"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Use of AES with ECB mode detected. ECB doesn't provide message confidentiality and  is not semantically secure so should not be used. Instead, use a strong, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information."},"help":{"markdown":"Use of AES with ECB mode detected. ECB doesn't provide message confidentiality and  is not semantically secure so should not be used. Instead, use a strong, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information.\n\n#### 💎 Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.crypto.use-of-aes-ecb.use-of-aes-ecb)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n - [https://googleprojectzero.blogspot.com/2022/10/rc4-is-still-considered-harmful.html](https://googleprojectzero.blogspot.com/2022/10/rc4-is-still-considered-harmful.html)\n","text":"Use of AES with ECB mode detected. ECB doesn't provide message confidentiality and  is not semantically secure so should not be used. Instead, use a strong, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information.\n💎 Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.crypto.use-of-aes-ecb.use-of-aes-ecb","id":"java.lang.security.audit.crypto.use-of-aes-ecb.use-of-aes-ecb","name":"java.lang.security.audit.crypto.use-of-aes-ecb.use-of-aes-ecb","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.crypto.use-of-aes-ecb.use-of-aes-ecb"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Use of Blowfish was detected. Blowfish uses a 64-bit block size that  makes it vulnerable to birthday attacks, and is therefore considered non-compliant.  Instead, use a strong, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information."},"help":{"markdown":"Use of Blowfish was detected. Blowfish uses a 64-bit block size that  makes it vulnerable to birthday attacks, and is therefore considered non-compliant.  Instead, use a strong, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information.\n\n#### 💎 Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.crypto.use-of-blowfish.use-of-blowfish)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n - [https://googleprojectzero.blogspot.com/2022/10/rc4-is-still-considered-harmful.html](https://googleprojectzero.blogspot.com/2022/10/rc4-is-still-considered-harmful.html)\n","text":"Use of Blowfish was detected. Blowfish uses a 64-bit block size that  makes it vulnerable to birthday attacks, and is therefore considered non-compliant.  Instead, use a strong, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information.\n💎 Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.crypto.use-of-blowfish.use-of-blowfish","id":"java.lang.security.audit.crypto.use-of-blowfish.use-of-blowfish","name":"java.lang.security.audit.crypto.use-of-blowfish.use-of-blowfish","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.crypto.use-of-blowfish.use-of-blowfish"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Use of AES with no settings detected. By default, java.crypto.Cipher uses ECB mode. ECB doesn't  provide message confidentiality and is not semantically secure so should not be used. Instead, use a strong, secure cipher: java.crypto.Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information."},"help":{"markdown":"Use of AES with no settings detected. By default, java.crypto.Cipher uses ECB mode. ECB doesn't  provide message confidentiality and is not semantically secure so should not be used. Instead, use a strong, secure cipher: java.crypto.Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information.\n\n#### 💎 Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.crypto.use-of-default-aes.use-of-default-aes)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n - [https://googleprojectzero.blogspot.com/2022/10/rc4-is-still-considered-harmful.html](https://googleprojectzero.blogspot.com/2022/10/rc4-is-still-considered-harmful.html)\n","text":"Use of AES with no settings detected. By default, java.crypto.Cipher uses ECB mode. ECB doesn't  provide message confidentiality and is not semantically secure so should not be used. Instead, use a strong, secure cipher: java.crypto.Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information.\n💎 Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.crypto.use-of-default-aes.use-of-default-aes","id":"java.lang.security.audit.crypto.use-of-default-aes.use-of-default-aes","name":"java.lang.security.audit.crypto.use-of-default-aes.use-of-default-aes","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.crypto.use-of-default-aes.use-of-default-aes"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead."},"help":{"markdown":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead.\n\n#### 💎 Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.crypto.use-of-md5-digest-utils.use-of-md5-digest-utils)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead.\n💎 Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.crypto.use-of-md5-digest-utils.use-of-md5-digest-utils","id":"java.lang.security.audit.crypto.use-of-md5-digest-utils.use-of-md5-digest-utils","name":"java.lang.security.audit.crypto.use-of-md5-digest-utils.use-of-md5-digest-utils","properties":{"precision":"very-high","tags":["CWE-328: Use of Weak Hash","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.crypto.use-of-md5-digest-utils.use-of-md5-digest-utils"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead."},"help":{"markdown":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead.\n\n#### 💎 Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.crypto.use-of-md5.use-of-md5)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead.\n💎 Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.crypto.use-of-md5.use-of-md5","id":"java.lang.security.audit.crypto.use-of-md5.use-of-md5","name":"java.lang.security.audit.crypto.use-of-md5.use-of-md5","properties":{"precision":"very-high","tags":["CWE-328: Use of Weak Hash","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.crypto.use-of-md5.use-of-md5"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Use of RC2 was detected. RC2 is vulnerable to related-key attacks, and is therefore considered non-compliant. Instead, use a strong, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information."},"help":{"markdown":"Use of RC2 was detected. RC2 is vulnerable to related-key attacks, and is therefore considered non-compliant. Instead, use a strong, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information.\n\n#### 💎 Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.crypto.use-of-rc2.use-of-rc2)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n - [https://googleprojectzero.blogspot.com/2022/10/rc4-is-still-considered-harmful.html](https://googleprojectzero.blogspot.com/2022/10/rc4-is-still-considered-harmful.html)\n","text":"Use of RC2 was detected. RC2 is vulnerable to related-key attacks, and is therefore considered non-compliant. Instead, use a strong, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information.\n💎 Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.crypto.use-of-rc2.use-of-rc2","id":"java.lang.security.audit.crypto.use-of-rc2.use-of-rc2","name":"java.lang.security.audit.crypto.use-of-rc2.use-of-rc2","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.crypto.use-of-rc2.use-of-rc2"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Use of RC4 was detected. RC4 is vulnerable to several attacks, including stream cipher attacks and bit flipping attacks. Instead, use a strong, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information."},"help":{"markdown":"Use of RC4 was detected. RC4 is vulnerable to several attacks, including stream cipher attacks and bit flipping attacks. Instead, use a strong, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information.\n\n#### 💎 Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.crypto.use-of-rc4.use-of-rc4)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n - [https://googleprojectzero.blogspot.com/2022/10/rc4-is-still-considered-harmful.html](https://googleprojectzero.blogspot.com/2022/10/rc4-is-still-considered-harmful.html)\n","text":"Use of RC4 was detected. RC4 is vulnerable to several attacks, including stream cipher attacks and bit flipping attacks. Instead, use a strong, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information.\n💎 Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.crypto.use-of-rc4.use-of-rc4","id":"java.lang.security.audit.crypto.use-of-rc4.use-of-rc4","name":"java.lang.security.audit.crypto.use-of-rc4.use-of-rc4","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.crypto.use-of-rc4.use-of-rc4"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."},"help":{"markdown":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications.\n\n#### 💎 Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.crypto.use-of-sha1.use-of-sha1)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n","text":"Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications.\n💎 Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.crypto.use-of-sha1.use-of-sha1","id":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1","name":"java.lang.security.audit.crypto.use-of-sha1.use-of-sha1","properties":{"precision":"very-high","tags":["CWE-328: Use of Weak Hash","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"This code uses a 224-bit hash function, which is deprecated or disallowed in some security policies. Consider updating to a stronger hash function such as SHA-384 or higher to ensure compliance and security."},"help":{"markdown":"This code uses a 224-bit hash function, which is deprecated or disallowed in some security policies. Consider updating to a stronger hash function such as SHA-384 or higher to ensure compliance and security.\n\n#### 💎 Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.crypto.use-of-sha224.use-of-sha224)\n - [https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar3.ipd.pdf](https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar3.ipd.pdf)\n - [https://www.cyber.gov.au/resources-business-and-government/essential-cyber-security/ism/cyber-security-guidelines/guidelines-cryptography](https://www.cyber.gov.au/resources-business-and-government/essential-cyber-security/ism/cyber-security-guidelines/guidelines-cryptography)\n","text":"This code uses a 224-bit hash function, which is deprecated or disallowed in some security policies. Consider updating to a stronger hash function such as SHA-384 or higher to ensure compliance and security.\n💎 Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.crypto.use-of-sha224.use-of-sha224","id":"java.lang.security.audit.crypto.use-of-sha224.use-of-sha224","name":"java.lang.security.audit.crypto.use-of-sha224.use-of-sha224","properties":{"precision":"very-high","tags":["CWE-328: Use of Weak Hash","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.crypto.use-of-sha224.use-of-sha224"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"RSA keys should be at least 2048 bits based on NIST recommendation."},"help":{"markdown":"RSA keys should be at least 2048 bits based on NIST recommendation.\n\n#### 💎 Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.crypto.weak-rsa.use-of-weak-rsa-key)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#algorithms](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#algorithms)\n","text":"RSA keys should be at least 2048 bits based on NIST recommendation.\n💎 Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.crypto.weak-rsa.use-of-weak-rsa-key","id":"java.lang.security.audit.crypto.weak-rsa.use-of-weak-rsa-key","name":"java.lang.security.audit.crypto.weak-rsa.use-of-weak-rsa-key","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.crypto.weak-rsa.use-of-weak-rsa-key"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'."},"help":{"markdown":"Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.\n\n#### 💎 Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.formatted-sql-string.formatted-sql-string)\n - [https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n - [https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html#create_ps](https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html#create_ps)\n - [https://software-security.sans.org/developer-how-to/fix-sql-injection-in-java-using-prepared-callable-statement](https://software-security.sans.org/developer-how-to/fix-sql-injection-in-java-using-prepared-callable-statement)\n","text":"Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.\n💎 Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.formatted-sql-string.formatted-sql-string","id":"java.lang.security.audit.formatted-sql-string.formatted-sql-string","name":"java.lang.security.audit.formatted-sql-string.formatted-sql-string","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.formatted-sql-string.formatted-sql-string"}},{"defaultConfiguration":{"level":"note"},"fullDescription":{"text":"Older Java application servers are vulnerable to HTTP response splitting, which may occur if an HTTP request can be injected with CRLF characters. This finding is reported for completeness; it is recommended to ensure your environment is not affected by testing this yourself."},"help":{"markdown":"Older Java application servers are vulnerable to HTTP response splitting, which may occur if an HTTP request can be injected with CRLF characters. This finding is reported for completeness; it is recommended to ensure your environment is not affected by testing this yourself.\n\n#### 💎 Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.http-response-splitting.http-response-splitting)\n - [https://www.owasp.org/index.php/HTTP_Response_Splitting](https://www.owasp.org/index.php/HTTP_Response_Splitting)\n","text":"Older Java application servers are vulnerable to HTTP response splitting, which may occur if an HTTP request can be injected with CRLF characters. This finding is reported for completeness; it is recommended to ensure your environment is not affected by testing this yourself.\n💎 Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.http-response-splitting.http-response-splitting","id":"java.lang.security.audit.http-response-splitting.http-response-splitting","name":"java.lang.security.audit.http-response-splitting.http-response-splitting","properties":{"precision":"very-high","tags":["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.http-response-splitting.http-response-splitting"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Insecure SMTP connection detected. This connection will trust any SSL certificate. Enable certificate verification by setting 'email.setSSLCheckServerIdentity(true)'."},"help":{"markdown":"Insecure SMTP connection detected. This connection will trust any SSL certificate. Enable certificate verification by setting 'email.setSSLCheckServerIdentity(true)'.\n\n#### 💎 Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.insecure-smtp-connection.insecure-smtp-connection)\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n","text":"Insecure SMTP connection detected. This connection will trust any SSL certificate. Enable certificate verification by setting 'email.setSSLCheckServerIdentity(true)'.\n💎 Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.insecure-smtp-connection.insecure-smtp-connection","id":"java.lang.security.audit.insecure-smtp-connection.insecure-smtp-connection","name":"java.lang.security.audit.insecure-smtp-connection.insecure-smtp-connection","properties":{"precision":"very-high","tags":["CWE-297: Improper Validation of Certificate with Host Mismatch","MEDIUM CONFIDENCE","OWASP-A07:2021 - Identification and Authentication Failures","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.insecure-smtp-connection.insecure-smtp-connection"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as PBKDF2 or bcrypt. You can use `javax.crypto.SecretKeyFactory` with `SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA1\")` or, if using Spring, `org.springframework.security.crypto.bcrypt`."},"help":{"markdown":"It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as PBKDF2 or bcrypt. You can use `javax.crypto.SecretKeyFactory` with `SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA1\")` or, if using Spring, `org.springframework.security.crypto.bcrypt`.\n\n#### 💎 Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.md5-used-as-password.md5-used-as-password)\n - [https://tools.ietf.org/id/draft-lvelvindron-tls-md5-sha1-deprecate-01.html](https://tools.ietf.org/id/draft-lvelvindron-tls-md5-sha1-deprecate-01.html)\n - [https://github.com/returntocorp/semgrep-rules/issues/1609](https://github.com/returntocorp/semgrep-rules/issues/1609)\n - [https://docs.oracle.com/javase/7/docs/technotes/guides/security/StandardNames.html#SecretKeyFactory](https://docs.oracle.com/javase/7/docs/technotes/guides/security/StandardNames.html#SecretKeyFactory)\n - [https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoder.html](https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoder.html)\n","text":"It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as PBKDF2 or bcrypt. You can use `javax.crypto.SecretKeyFactory` with `SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA1\")` or, if using Spring, `org.springframework.security.crypto.bcrypt`.\n💎 Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.md5-used-as-password.md5-used-as-password","id":"java.lang.security.audit.md5-used-as-password.md5-used-as-password","name":"java.lang.security.audit.md5-used-as-password.md5-used-as-password","properties":{"precision":"very-high","tags":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm","MEDIUM CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.md5-used-as-password.md5-used-as-password"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."},"help":{"markdown":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead.\n\n#### 💎 Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request)\n - [https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n - [https://owasp.org/www-community/attacks/SQL_Injection](https://owasp.org/www-community/attacks/SQL_Injection)\n","text":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead.\n💎 Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request","id":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request","name":"java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","HIGH CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."},"help":{"markdown":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values.\n\n#### 💎 Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values.\n💎 Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request","id":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request","name":"java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected input from a HTTPServletRequest going into the environment variables of an 'exec' command.  Instead, call the command with user-supplied arguments by using the overloaded method with one String array as the argument. `exec({\"command\", \"arg1\", \"arg2\"})`."},"help":{"markdown":"Detected input from a HTTPServletRequest going into the environment variables of an 'exec' command.  Instead, call the command with user-supplied arguments by using the overloaded method with one String array as the argument. `exec({\"command\", \"arg1\", \"arg2\"})`.\n\n#### 💎 Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.tainted-env-from-http-request.tainted-env-from-http-request)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Detected input from a HTTPServletRequest going into the environment variables of an 'exec' command.  Instead, call the command with user-supplied arguments by using the overloaded method with one String array as the argument. `exec({\"command\", \"arg1\", \"arg2\"})`.\n💎 Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.tainted-env-from-http-request.tainted-env-from-http-request","id":"java.lang.security.audit.tainted-env-from-http-request.tainted-env-from-http-request","name":"java.lang.security.audit.tainted-env-from-http-request.tainted-env-from-http-request","properties":{"precision":"very-high","tags":["CWE-454: External Initialization of Trusted Variables or Data Stores","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.tainted-env-from-http-request.tainted-env-from-http-request"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data."},"help":{"markdown":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data.\n\n#### 💎 Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request)\n - [https://sensei.securecodewarrior.com/recipes/scw%3Ajava%3ALDAP-injection](https://sensei.securecodewarrior.com/recipes/scw%3Ajava%3ALDAP-injection)\n","text":"Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data.\n💎 Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request","id":"java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request","name":"java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request","properties":{"precision":"very-high","tags":["CWE-90: Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."},"help":{"markdown":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls.\n\n#### 💎 Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request)\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n","text":"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls.\n💎 Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request","id":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request","name":"java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request","properties":{"precision":"very-high","tags":["CWE-501: Trust Boundary Violation","MEDIUM CONFIDENCE","OWASP-A04:2021 - Insecure Design","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected input from a HTTPServletRequest going into a XPath evaluate or compile command. This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized. Xpath injection could lead to unauthorized access to sensitive information in XML documents. Instead, thoroughly sanitize user input or use parameterized xpath queries if you can."},"help":{"markdown":"Detected input from a HTTPServletRequest going into a XPath evaluate or compile command. This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized. Xpath injection could lead to unauthorized access to sensitive information in XML documents. Instead, thoroughly sanitize user input or use parameterized xpath queries if you can.\n\n#### 💎 Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.tainted-xpath-from-http-request.tainted-xpath-from-http-request)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Detected input from a HTTPServletRequest going into a XPath evaluate or compile command. This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized. Xpath injection could lead to unauthorized access to sensitive information in XML documents. Instead, thoroughly sanitize user input or use parameterized xpath queries if you can.\n💎 Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.tainted-xpath-from-http-request.tainted-xpath-from-http-request","id":"java.lang.security.audit.tainted-xpath-from-http-request.tainted-xpath-from-http-request","name":"java.lang.security.audit.tainted-xpath-from-http-request.tainted-xpath-from-http-request","properties":{"precision":"very-high","tags":["CWE-643: Improper Neutralization of Data within XPath Expressions ('XPath Injection')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.tainted-xpath-from-http-request.tainted-xpath-from-http-request"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Application redirects to a destination URL specified by a user-supplied parameter that is not validated. This could direct users to malicious locations. Consider using an allowlist to validate URLs."},"help":{"markdown":"Application redirects to a destination URL specified by a user-supplied parameter that is not validated. This could direct users to malicious locations. Consider using an allowlist to validate URLs.\n\n#### 💎 Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.unvalidated-redirect.unvalidated-redirect)\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Application redirects to a destination URL specified by a user-supplied parameter that is not validated. This could direct users to malicious locations. Consider using an allowlist to validate URLs.\n💎 Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.unvalidated-redirect.unvalidated-redirect","id":"java.lang.security.audit.unvalidated-redirect.unvalidated-redirect","name":"java.lang.security.audit.unvalidated-redirect.unvalidated-redirect","properties":{"precision":"very-high","tags":["CWE-601: URL Redirection to Untrusted Site ('Open Redirect')","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.unvalidated-redirect.unvalidated-redirect"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"An insecure SSL context was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use SSLContext.getInstance(\"TLSv1.2\") for the best security."},"help":{"markdown":"An insecure SSL context was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use SSLContext.getInstance(\"TLSv1.2\") for the best security.\n\n#### 💎 Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.weak-ssl-context.weak-ssl-context)\n - [https://tools.ietf.org/html/rfc7568](https://tools.ietf.org/html/rfc7568)\n - [https://tools.ietf.org/id/draft-ietf-tls-oldversions-deprecate-02.html](https://tools.ietf.org/id/draft-ietf-tls-oldversions-deprecate-02.html)\n","text":"An insecure SSL context was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use SSLContext.getInstance(\"TLSv1.2\") for the best security.\n💎 Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.weak-ssl-context.weak-ssl-context","id":"java.lang.security.audit.weak-ssl-context.weak-ssl-context","name":"java.lang.security.audit.weak-ssl-context.weak-ssl-context","properties":{"precision":"very-high","tags":["CWE-326: Inadequate Encryption Strength","HIGH CONFIDENCE","OWASP-A02:2021 - Cryptographic Failures","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.weak-ssl-context.weak-ssl-context"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."},"help":{"markdown":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views.\n\n#### 💎 Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer)\n - [https://www3.ntu.edu.sg/home/ehchua/programming/java/JavaServerFaces.html](https://www3.ntu.edu.sg/home/ehchua/programming/java/JavaServerFaces.html)\n","text":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views.\n💎 Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer","id":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer","name":"java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"DOCTYPE declarations are enabled for $DBFACTORY. Without prohibiting external entity declarations, this is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://apache.org/xml/features/disallow-doctype-decl\" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features \"http://xml.org/sax/features/external-general-entities\" and \"http://xml.org/sax/features/external-parameter-entities\" to false."},"help":{"markdown":"DOCTYPE declarations are enabled for $DBFACTORY. Without prohibiting external entity declarations, this is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://apache.org/xml/features/disallow-doctype-decl\" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features \"http://xml.org/sax/features/external-general-entities\" and \"http://xml.org/sax/features/external-parameter-entities\" to false.\n\n#### 💎 Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-false.documentbuilderfactory-disallow-doctype-decl-false)\n - [https://semgrep.dev/blog/2022/xml-security-in-java](https://semgrep.dev/blog/2022/xml-security-in-java)\n - [https://semgrep.dev/docs/cheat-sheets/java-xxe/](https://semgrep.dev/docs/cheat-sheets/java-xxe/)\n - [https://blog.sonarsource.com/secure-xml-processor](https://blog.sonarsource.com/secure-xml-processor)\n - [https://xerces.apache.org/xerces2-j/features.html](https://xerces.apache.org/xerces2-j/features.html)\n","text":"DOCTYPE declarations are enabled for $DBFACTORY. Without prohibiting external entity declarations, this is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://apache.org/xml/features/disallow-doctype-decl\" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features \"http://xml.org/sax/features/external-general-entities\" and \"http://xml.org/sax/features/external-parameter-entities\" to false.\n💎 Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-false.documentbuilderfactory-disallow-doctype-decl-false","id":"java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-false.documentbuilderfactory-disallow-doctype-decl-false","name":"java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-false.documentbuilderfactory-disallow-doctype-decl-false","properties":{"precision":"very-high","tags":["CWE-611: Improper Restriction of XML External Entity Reference","HIGH CONFIDENCE","OWASP-A04:2017 - XML External Entities (XXE)","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-false.documentbuilderfactory-disallow-doctype-decl-false"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"DOCTYPE declarations are enabled for this DocumentBuilderFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://apache.org/xml/features/disallow-doctype-decl\" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features \"http://xml.org/sax/features/external-general-entities\" and \"http://xml.org/sax/features/external-parameter-entities\" to false."},"help":{"markdown":"DOCTYPE declarations are enabled for this DocumentBuilderFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://apache.org/xml/features/disallow-doctype-decl\" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features \"http://xml.org/sax/features/external-general-entities\" and \"http://xml.org/sax/features/external-parameter-entities\" to false.\n\n#### 💎 Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing.documentbuilderfactory-disallow-doctype-decl-missing)\n - [https://semgrep.dev/blog/2022/xml-security-in-java](https://semgrep.dev/blog/2022/xml-security-in-java)\n - [https://semgrep.dev/docs/cheat-sheets/java-xxe/](https://semgrep.dev/docs/cheat-sheets/java-xxe/)\n - [https://blog.sonarsource.com/secure-xml-processor](https://blog.sonarsource.com/secure-xml-processor)\n - [https://xerces.apache.org/xerces2-j/features.html](https://xerces.apache.org/xerces2-j/features.html)\n","text":"DOCTYPE declarations are enabled for this DocumentBuilderFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://apache.org/xml/features/disallow-doctype-decl\" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features \"http://xml.org/sax/features/external-general-entities\" and \"http://xml.org/sax/features/external-parameter-entities\" to false.\n💎 Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing.documentbuilderfactory-disallow-doctype-decl-missing","id":"java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing.documentbuilderfactory-disallow-doctype-decl-missing","name":"java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing.documentbuilderfactory-disallow-doctype-decl-missing","properties":{"precision":"very-high","tags":["CWE-611: Improper Restriction of XML External Entity Reference","HIGH CONFIDENCE","OWASP-A04:2017 - XML External Entities (XXE)","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing.documentbuilderfactory-disallow-doctype-decl-missing"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"External entities are allowed for $DBFACTORY. This is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://xml.org/sax/features/external-general-entities\" to false."},"help":{"markdown":"External entities are allowed for $DBFACTORY. This is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://xml.org/sax/features/external-general-entities\" to false.\n\n#### 💎 Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.xxe.documentbuilderfactory-external-general-entities-true.documentbuilderfactory-external-general-entities-true)\n - [https://semgrep.dev/blog/2022/xml-security-in-java](https://semgrep.dev/blog/2022/xml-security-in-java)\n - [https://semgrep.dev/docs/cheat-sheets/java-xxe/](https://semgrep.dev/docs/cheat-sheets/java-xxe/)\n - [https://blog.sonarsource.com/secure-xml-processor](https://blog.sonarsource.com/secure-xml-processor)\n","text":"External entities are allowed for $DBFACTORY. This is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://xml.org/sax/features/external-general-entities\" to false.\n💎 Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.xxe.documentbuilderfactory-external-general-entities-true.documentbuilderfactory-external-general-entities-true","id":"java.lang.security.audit.xxe.documentbuilderfactory-external-general-entities-true.documentbuilderfactory-external-general-entities-true","name":"java.lang.security.audit.xxe.documentbuilderfactory-external-general-entities-true.documentbuilderfactory-external-general-entities-true","properties":{"precision":"very-high","tags":["CWE-611: Improper Restriction of XML External Entity Reference","HIGH CONFIDENCE","OWASP-A04:2017 - XML External Entities (XXE)","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.xxe.documentbuilderfactory-external-general-entities-true.documentbuilderfactory-external-general-entities-true"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"External entities are allowed for $DBFACTORY. This is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://xml.org/sax/features/external-parameter-entities\" to false."},"help":{"markdown":"External entities are allowed for $DBFACTORY. This is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://xml.org/sax/features/external-parameter-entities\" to false.\n\n#### 💎 Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.xxe.documentbuilderfactory-external-parameter-entities-true.documentbuilderfactory-external-parameter-entities-true)\n - [https://semgrep.dev/blog/2022/xml-security-in-java](https://semgrep.dev/blog/2022/xml-security-in-java)\n - [https://semgrep.dev/docs/cheat-sheets/java-xxe/](https://semgrep.dev/docs/cheat-sheets/java-xxe/)\n - [https://blog.sonarsource.com/secure-xml-processor](https://blog.sonarsource.com/secure-xml-processor)\n","text":"External entities are allowed for $DBFACTORY. This is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://xml.org/sax/features/external-parameter-entities\" to false.\n💎 Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.xxe.documentbuilderfactory-external-parameter-entities-true.documentbuilderfactory-external-parameter-entities-true","id":"java.lang.security.audit.xxe.documentbuilderfactory-external-parameter-entities-true.documentbuilderfactory-external-parameter-entities-true","name":"java.lang.security.audit.xxe.documentbuilderfactory-external-parameter-entities-true.documentbuilderfactory-external-parameter-entities-true","properties":{"precision":"very-high","tags":["CWE-611: Improper Restriction of XML External Entity Reference","HIGH CONFIDENCE","OWASP-A04:2017 - XML External Entities (XXE)","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.xxe.documentbuilderfactory-external-parameter-entities-true.documentbuilderfactory-external-parameter-entities-true"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"DOCTYPE declarations are enabled for this SAXParserFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature `http://apache.org/xml/features/disallow-doctype-decl` to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features `http://xml.org/sax/features/external-general-entities` and `http://xml.org/sax/features/external-parameter-entities` to false. NOTE - The previous links are not meant to be clicked. They are the literal config key values that are supposed to be used to disable these features. For more information, see https://semgrep.dev/docs/cheat-sheets/java-xxe/#3a-documentbuilderfactory."},"help":{"markdown":"DOCTYPE declarations are enabled for this SAXParserFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature `http://apache.org/xml/features/disallow-doctype-decl` to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features `http://xml.org/sax/features/external-general-entities` and `http://xml.org/sax/features/external-parameter-entities` to false. NOTE - The previous links are not meant to be clicked. They are the literal config key values that are supposed to be used to disable these features. For more information, see https://semgrep.dev/docs/cheat-sheets/java-xxe/#3a-documentbuilderfactory.\n\n#### 💎 Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.xxe.saxparserfactory-disallow-doctype-decl-missing.saxparserfactory-disallow-doctype-decl-missing)\n - [https://semgrep.dev/blog/2022/xml-security-in-java](https://semgrep.dev/blog/2022/xml-security-in-java)\n - [https://semgrep.dev/docs/cheat-sheets/java-xxe/](https://semgrep.dev/docs/cheat-sheets/java-xxe/)\n - [https://blog.sonarsource.com/secure-xml-processor](https://blog.sonarsource.com/secure-xml-processor)\n - [https://xerces.apache.org/xerces2-j/features.html](https://xerces.apache.org/xerces2-j/features.html)\n","text":"DOCTYPE declarations are enabled for this SAXParserFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature `http://apache.org/xml/features/disallow-doctype-decl` to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features `http://xml.org/sax/features/external-general-entities` and `http://xml.org/sax/features/external-parameter-entities` to false. NOTE - The previous links are not meant to be clicked. They are the literal config key values that are supposed to be used to disable these features. For more information, see https://semgrep.dev/docs/cheat-sheets/java-xxe/#3a-documentbuilderfactory.\n💎 Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.xxe.saxparserfactory-disallow-doctype-decl-missing.saxparserfactory-disallow-doctype-decl-missing","id":"java.lang.security.audit.xxe.saxparserfactory-disallow-doctype-decl-missing.saxparserfactory-disallow-doctype-decl-missing","name":"java.lang.security.audit.xxe.saxparserfactory-disallow-doctype-decl-missing.saxparserfactory-disallow-doctype-decl-missing","properties":{"precision":"very-high","tags":["CWE-611: Improper Restriction of XML External Entity Reference","HIGH CONFIDENCE","OWASP-A04:2017 - XML External Entities (XXE)","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.xxe.saxparserfactory-disallow-doctype-decl-missing.saxparserfactory-disallow-doctype-decl-missing"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"DOCTYPE declarations are enabled for this TransformerFactory. This is vulnerable to XML external entity attacks. Disable this by setting the attributes \"accessExternalDTD\" and \"accessExternalStylesheet\" to \"\"."},"help":{"markdown":"DOCTYPE declarations are enabled for this TransformerFactory. This is vulnerable to XML external entity attacks. Disable this by setting the attributes \"accessExternalDTD\" and \"accessExternalStylesheet\" to \"\".\n\n#### 💎 Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.xxe.transformerfactory-dtds-not-disabled.transformerfactory-dtds-not-disabled)\n - [https://semgrep.dev/blog/2022/xml-security-in-java](https://semgrep.dev/blog/2022/xml-security-in-java)\n - [https://semgrep.dev/docs/cheat-sheets/java-xxe/](https://semgrep.dev/docs/cheat-sheets/java-xxe/)\n - [https://blog.sonarsource.com/secure-xml-processor](https://blog.sonarsource.com/secure-xml-processor)\n - [https://xerces.apache.org/xerces2-j/features.html](https://xerces.apache.org/xerces2-j/features.html)\n","text":"DOCTYPE declarations are enabled for this TransformerFactory. This is vulnerable to XML external entity attacks. Disable this by setting the attributes \"accessExternalDTD\" and \"accessExternalStylesheet\" to \"\".\n💎 Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.audit.xxe.transformerfactory-dtds-not-disabled.transformerfactory-dtds-not-disabled","id":"java.lang.security.audit.xxe.transformerfactory-dtds-not-disabled.transformerfactory-dtds-not-disabled","name":"java.lang.security.audit.xxe.transformerfactory-dtds-not-disabled.transformerfactory-dtds-not-disabled","properties":{"precision":"very-high","tags":["CWE-611: Improper Restriction of XML External Entity Reference","HIGH CONFIDENCE","OWASP-A04:2017 - XML External Entities (XXE)","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.audit.xxe.transformerfactory-dtds-not-disabled.transformerfactory-dtds-not-disabled"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"help":{"markdown":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.\n\n#### 💎 Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal)\n - [https://www.owasp.org/index.php/Path_Traversal](https://www.owasp.org/index.php/Path_Traversal)\n","text":"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.\n💎 Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal","id":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal","name":"java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal","properties":{"precision":"very-high","tags":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","OWASP-A05:2017 - Broken Access Control","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"JMS Object messages depend on Java Serialization for marshalling/unmarshalling of the message payload when ObjectMessage.getObject() is called. Deserialization of untrusted data can lead to security flaws; a remote attacker could via a crafted JMS ObjectMessage to execute arbitrary code with the permissions of the application listening/consuming JMS Messages. In this case, the JMS MessageListener consume an ObjectMessage type received inside the onMessage method, which may lead to arbitrary code execution when calling the $Y.getObject method."},"help":{"markdown":"JMS Object messages depend on Java Serialization for marshalling/unmarshalling of the message payload when ObjectMessage.getObject() is called. Deserialization of untrusted data can lead to security flaws; a remote attacker could via a crafted JMS ObjectMessage to execute arbitrary code with the permissions of the application listening/consuming JMS Messages. In this case, the JMS MessageListener consume an ObjectMessage type received inside the onMessage method, which may lead to arbitrary code execution when calling the $Y.getObject method.\n\n#### 💎 Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.insecure-jms-deserialization.insecure-jms-deserialization)\n - [https://www.blackhat.com/docs/us-16/materials/us-16-Kaiser-Pwning-Your-Java-Messaging-With-Deserialization-Vulnerabilities-wp.pdf](https://www.blackhat.com/docs/us-16/materials/us-16-Kaiser-Pwning-Your-Java-Messaging-With-Deserialization-Vulnerabilities-wp.pdf)\n","text":"JMS Object messages depend on Java Serialization for marshalling/unmarshalling of the message payload when ObjectMessage.getObject() is called. Deserialization of untrusted data can lead to security flaws; a remote attacker could via a crafted JMS ObjectMessage to execute arbitrary code with the permissions of the application listening/consuming JMS Messages. In this case, the JMS MessageListener consume an ObjectMessage type received inside the onMessage method, which may lead to arbitrary code execution when calling the $Y.getObject method.\n💎 Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.insecure-jms-deserialization.insecure-jms-deserialization","id":"java.lang.security.insecure-jms-deserialization.insecure-jms-deserialization","name":"java.lang.security.insecure-jms-deserialization.insecure-jms-deserialization","properties":{"precision":"very-high","tags":["CWE-502: Deserialization of Untrusted Data","MEDIUM CONFIDENCE","OWASP-A08:2017 - Insecure Deserialization","OWASP-A08:2021 - Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.insecure-jms-deserialization.insecure-jms-deserialization"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"When using Jackson to marshall/unmarshall JSON to Java objects, enabling default typing is dangerous and can lead to RCE. If an attacker can control `$JSON` it might be possible to provide a malicious JSON which can be used to exploit unsecure deserialization. In order to prevent this issue, avoid to enable default typing (globally or by using \"Per-class\" annotations) and avoid using `Object` and other dangerous types for member variable declaration which creating classes for Jackson based deserialization."},"help":{"markdown":"When using Jackson to marshall/unmarshall JSON to Java objects, enabling default typing is dangerous and can lead to RCE. If an attacker can control `$JSON` it might be possible to provide a malicious JSON which can be used to exploit unsecure deserialization. In order to prevent this issue, avoid to enable default typing (globally or by using \"Per-class\" annotations) and avoid using `Object` and other dangerous types for member variable declaration which creating classes for Jackson based deserialization.\n\n#### 💎 Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.jackson-unsafe-deserialization.jackson-unsafe-deserialization)\n - [https://swapneildash.medium.com/understanding-insecure-implementation-of-jackson-deserialization-7b3d409d2038](https://swapneildash.medium.com/understanding-insecure-implementation-of-jackson-deserialization-7b3d409d2038)\n - [https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062](https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [https://adamcaudill.com/2017/10/04/exploiting-jackson-rce-cve-2017-7525/](https://adamcaudill.com/2017/10/04/exploiting-jackson-rce-cve-2017-7525/)\n","text":"When using Jackson to marshall/unmarshall JSON to Java objects, enabling default typing is dangerous and can lead to RCE. If an attacker can control `$JSON` it might be possible to provide a malicious JSON which can be used to exploit unsecure deserialization. In order to prevent this issue, avoid to enable default typing (globally or by using \"Per-class\" annotations) and avoid using `Object` and other dangerous types for member variable declaration which creating classes for Jackson based deserialization.\n💎 Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.jackson-unsafe-deserialization.jackson-unsafe-deserialization","id":"java.lang.security.jackson-unsafe-deserialization.jackson-unsafe-deserialization","name":"java.lang.security.jackson-unsafe-deserialization.jackson-unsafe-deserialization","properties":{"precision":"very-high","tags":["CWE-502: Deserialization of Untrusted Data","MEDIUM CONFIDENCE","OWASP-A8:2017 Insecure Deserialization","OWASP-A8:2021 Software and Data Integrity Failures","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.jackson-unsafe-deserialization.jackson-unsafe-deserialization"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Cross-site scripting detected in HttpServletResponse writer with variable '$VAR'. User input was detected going directly from the HttpServletRequest into output. Ensure your data is properly encoded using org.owasp.encoder.Encode.forHtml: 'Encode.forHtml($VAR)'."},"help":{"markdown":"Cross-site scripting detected in HttpServletResponse writer with variable '$VAR'. User input was detected going directly from the HttpServletRequest into output. Ensure your data is properly encoded using org.owasp.encoder.Encode.forHtml: 'Encode.forHtml($VAR)'.\n\n#### 💎 Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.servletresponse-writer-xss.servletresponse-writer-xss)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Cross-site scripting detected in HttpServletResponse writer with variable '$VAR'. User input was detected going directly from the HttpServletRequest into output. Ensure your data is properly encoded using org.owasp.encoder.Encode.forHtml: 'Encode.forHtml($VAR)'.\n💎 Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.servletresponse-writer-xss.servletresponse-writer-xss","id":"java.lang.security.servletresponse-writer-xss.servletresponse-writer-xss","name":"java.lang.security.servletresponse-writer-xss.servletresponse-writer-xss","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.servletresponse-writer-xss.servletresponse-writer-xss"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"XML external entities are not explicitly disabled for this XMLInputFactory. This could be vulnerable to XML external entity vulnerabilities. Explicitly disable external entities by setting \"javax.xml.stream.isSupportingExternalEntities\" to false."},"help":{"markdown":"XML external entities are not explicitly disabled for this XMLInputFactory. This could be vulnerable to XML external entity vulnerabilities. Explicitly disable external entities by setting \"javax.xml.stream.isSupportingExternalEntities\" to false.\n\n#### 💎 Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.xmlinputfactory-possible-xxe.xmlinputfactory-possible-xxe)\n - [https://semgrep.dev/blog/2022/xml-security-in-java](https://semgrep.dev/blog/2022/xml-security-in-java)\n - [https://semgrep.dev/docs/cheat-sheets/java-xxe/](https://semgrep.dev/docs/cheat-sheets/java-xxe/)\n - [https://www.blackhat.com/docs/us-15/materials/us-15-Wang-FileCry-The-New-Age-Of-XXE-java-wp.pdf](https://www.blackhat.com/docs/us-15/materials/us-15-Wang-FileCry-The-New-Age-Of-XXE-java-wp.pdf)\n - [https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#xmlinputfactory-a-stax-parser](https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#xmlinputfactory-a-stax-parser)\n","text":"XML external entities are not explicitly disabled for this XMLInputFactory. This could be vulnerable to XML external entity vulnerabilities. Explicitly disable external entities by setting \"javax.xml.stream.isSupportingExternalEntities\" to false.\n💎 Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.lang.security.xmlinputfactory-possible-xxe.xmlinputfactory-possible-xxe","id":"java.lang.security.xmlinputfactory-possible-xxe.xmlinputfactory-possible-xxe","name":"java.lang.security.xmlinputfactory-possible-xxe.xmlinputfactory-possible-xxe","properties":{"precision":"very-high","tags":["CWE-611: Improper Restriction of XML External Entity Reference","MEDIUM CONFIDENCE","OWASP-A04:2017 - XML External Entities (XXE)","OWASP-A05:2021 - Security Misconfiguration","security"]},"shortDescription":{"text":"Semgrep Finding: java.lang.security.xmlinputfactory-possible-xxe.xmlinputfactory-possible-xxe"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected a string argument from a public method contract in a raw SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'."},"help":{"markdown":"Detected a string argument from a public method contract in a raw SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.\n\n#### 💎 Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.spring.security.audit.spring-sqli.spring-sqli)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n","text":"Detected a string argument from a public method contract in a raw SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.\n💎 Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.spring.security.audit.spring-sqli.spring-sqli","id":"java.spring.security.audit.spring-sqli.spring-sqli","name":"java.spring.security.audit.spring-sqli.spring-sqli","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Semgrep Finding: java.spring.security.audit.spring-sqli.spring-sqli"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Application redirects a user to a destination URL specified by a user supplied parameter that is not validated."},"help":{"markdown":"Application redirects a user to a destination URL specified by a user supplied parameter that is not validated.\n\n#### 💎 Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.spring.security.audit.spring-unvalidated-redirect.spring-unvalidated-redirect)\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n","text":"Application redirects a user to a destination URL specified by a user supplied parameter that is not validated.\n💎 Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.spring.security.audit.spring-unvalidated-redirect.spring-unvalidated-redirect","id":"java.spring.security.audit.spring-unvalidated-redirect.spring-unvalidated-redirect","name":"java.spring.security.audit.spring-unvalidated-redirect.spring-unvalidated-redirect","properties":{"precision":"very-high","tags":["CWE-601: URL Redirection to Untrusted Site ('Open Redirect')","MEDIUM CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Semgrep Finding: java.spring.security.audit.spring-unvalidated-redirect.spring-unvalidated-redirect"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected user input controlling a file path. An attacker could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."},"help":{"markdown":"Detected user input controlling a file path. An attacker could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.\n\n#### 💎 Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.spring.security.injection.tainted-file-path.tainted-file-path)\n - [https://owasp.org/www-community/attacks/Path_Traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n","text":"Detected user input controlling a file path. An attacker could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.\n💎 Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.spring.security.injection.tainted-file-path.tainted-file-path","id":"java.spring.security.injection.tainted-file-path.tainted-file-path","name":"java.spring.security.injection.tainted-file-path.tainted-file-path","properties":{"precision":"very-high","tags":["CWE-23: Relative Path Traversal","HIGH CONFIDENCE","OWASP-A01:2021 - Broken Access Control","security"]},"shortDescription":{"text":"Semgrep Finding: java.spring.security.injection.tainted-file-path.tainted-file-path"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. You can use the OWASP ESAPI encoder if you must render user data."},"help":{"markdown":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. You can use the OWASP ESAPI encoder if you must render user data.\n\n#### 💎 Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.spring.security.injection.tainted-html-string.tainted-html-string)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n","text":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. You can use the OWASP ESAPI encoder if you must render user data.\n💎 Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.spring.security.injection.tainted-html-string.tainted-html-string","id":"java.spring.security.injection.tainted-html-string.tainted-html-string","name":"java.spring.security.injection.tainted-html-string.tainted-html-string","properties":{"precision":"very-high","tags":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","MEDIUM CONFIDENCE","OWASP-A03:2021 - Injection","OWASP-A07:2017 - Cross-Site Scripting (XSS)","security"]},"shortDescription":{"text":"Semgrep Finding: java.spring.security.injection.tainted-html-string.tainted-html-string"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library."},"help":{"markdown":"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.\n\n#### 💎 Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.spring.security.injection.tainted-sql-string.tainted-sql-string)\n - [https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html](https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html)\n","text":"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.\n💎 Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.spring.security.injection.tainted-sql-string.tainted-sql-string","id":"java.spring.security.injection.tainted-sql-string.tainted-sql-string","name":"java.spring.security.injection.tainted-sql-string.tainted-sql-string","properties":{"precision":"very-high","tags":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","MEDIUM CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Semgrep Finding: java.spring.security.injection.tainted-sql-string.tainted-sql-string"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Detected user input entering a method which executes a system command. This could result in a command injection vulnerability, which allows an attacker to inject an arbitrary system command onto the server. The attacker could download malware onto or steal data from the server. Instead, use ProcessBuilder, separating the command into individual arguments, like this: `new ProcessBuilder(\"ls\", \"-al\", targetDirectory)`. Further, make sure you hardcode or allowlist the actual command so that attackers can't run arbitrary commands."},"help":{"markdown":"Detected user input entering a method which executes a system command. This could result in a command injection vulnerability, which allows an attacker to inject an arbitrary system command onto the server. The attacker could download malware onto or steal data from the server. Instead, use ProcessBuilder, separating the command into individual arguments, like this: `new ProcessBuilder(\"ls\", \"-al\", targetDirectory)`. Further, make sure you hardcode or allowlist the actual command so that attackers can't run arbitrary commands.\n\n#### 💎 Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.spring.security.injection.tainted-system-command.tainted-system-command)\n - [https://www.stackhawk.com/blog/command-injection-java/](https://www.stackhawk.com/blog/command-injection-java/)\n - [https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html)\n - [https://github.com/github/codeql/blob/main/java/ql/src/Security/CWE/CWE-078/ExecUnescaped.java](https://github.com/github/codeql/blob/main/java/ql/src/Security/CWE/CWE-078/ExecUnescaped.java)\n","text":"Detected user input entering a method which executes a system command. This could result in a command injection vulnerability, which allows an attacker to inject an arbitrary system command onto the server. The attacker could download malware onto or steal data from the server. Instead, use ProcessBuilder, separating the command into individual arguments, like this: `new ProcessBuilder(\"ls\", \"-al\", targetDirectory)`. Further, make sure you hardcode or allowlist the actual command so that attackers can't run arbitrary commands.\n💎 Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.spring.security.injection.tainted-system-command.tainted-system-command","id":"java.spring.security.injection.tainted-system-command.tainted-system-command","name":"java.spring.security.injection.tainted-system-command.tainted-system-command","properties":{"precision":"very-high","tags":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","HIGH CONFIDENCE","OWASP-A01:2017 - Injection","OWASP-A03:2021 - Injection","security"]},"shortDescription":{"text":"Semgrep Finding: java.spring.security.injection.tainted-system-command.tainted-system-command"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server running this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, hardcode the correct host, or ensure that the user data can only affect the path or parameters."},"help":{"markdown":"User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server running this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, hardcode the correct host, or ensure that the user data can only affect the path or parameters.\n\n#### 💎 Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.spring.security.injection.tainted-url-host.tainted-url-host)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html)\n","text":"User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server running this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, hardcode the correct host, or ensure that the user data can only affect the path or parameters.\n💎 Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/java.spring.security.injection.tainted-url-host.tainted-url-host","id":"java.spring.security.injection.tainted-url-host.tainted-url-host","name":"java.spring.security.injection.tainted-url-host.tainted-url-host","properties":{"precision":"very-high","tags":["CWE-918: Server-Side Request Forgery (SSRF)","MEDIUM CONFIDENCE","OWASP-A10:2021 - Server-Side Request Forgery (SSRF)","security"]},"shortDescription":{"text":"Semgrep Finding: java.spring.security.injection.tainted-url-host.tainted-url-host"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Detected an HTTP request sent via HttpGet. This could lead to sensitive information being sent  over an insecure channel. Instead, it is recommended to send requests over HTTPS."},"help":{"markdown":"Detected an HTTP request sent via HttpGet. This could lead to sensitive information being sent  over an insecure channel. Instead, it is recommended to send requests over HTTPS.\n\n#### 💎 Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/problem-based-packs.insecure-transport.java-stdlib.httpget-http-request.httpget-http-request)\n - [https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/net/URLConnection.html](https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/net/URLConnection.html)\n - [https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/net/URL.html#openConnection()](https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/net/URL.html#openConnection())\n","text":"Detected an HTTP request sent via HttpGet. This could lead to sensitive information being sent  over an insecure channel. Instead, it is recommended to send requests over HTTPS.\n💎 Enable cross-file analysis and Pro rules for free at sg.run/pro"},"helpUri":"https://semgrep.dev/r/problem-based-packs.insecure-transport.java-stdlib.httpget-http-request.httpget-http-request","id":"problem-based-packs.insecure-transport.java-stdlib.httpget-http-request.httpget-http-request","name":"problem-based-packs.insecure-transport.java-stdlib.httpget-http-request.httpget-http-request","properties":{"precision":"very-high","tags":["CWE-319: Cleartext Transmission of Sensitive Information","MEDIUM CONFIDENCE","OWASP-A03:2017 - Sensitive Data Exposure","security"]},"shortDescription":{"text":"Semgrep Finding: problem-based-packs.insecure-transport.java-stdlib.httpget-http-request.httpget-http-request"}}],"semanticVersion":"1.135.0"}}}],"$schema":"https://docs.oasis-open.org/sarif/sarif/v2.1.0/os/schemas/sarif-schema-2.1.0.json"}